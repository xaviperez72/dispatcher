@startuml
class checker_struct {
  - _caller: std::function<int()>
  - _last_fork: time_t
  - _pid: pid_t
  - _procname: std::string
}

class keep_running_flags {
  - _keep_accepting: std::atomic<bool>
  - _keep_working: std::atomic<bool>

  + keep_running_flags()
  + ~keep_running_flags()
}

class checker_pids {
  - _pids: std::vector<checker_struct>
  - _dead: checker_struct
  - _p_run: std::shared_ptr<keep_running_flags>
  - _forker: bool
  - _me: checker_pids *
  - _previousInterruptHandler_int: sighandler_t
  - _previousInterruptHandler_usr1: sighandler_t
  - _previousInterruptHandler_term: sighandler_t

  + sigterm_func(s: int): void
  + add(_call: std::function<int()>, procname: std::string): void
  + StoppingChildren(): void
  + get_run_flags(): std::shared_ptr<keep_running_flags>
  + operator()(): int
}

checker_pids --> checker_struct
checker_pids --> keep_running_flags
@enduml
