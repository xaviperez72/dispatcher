{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Dispatcher TCP/IP  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
01.00 \par
}}Dispatcher TCP/IP}
{\comment Generated by doxygen 1.9.6.}
{\creatim \yr2023\mo5\dy10\hr11\min7\sec2}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Dispatcher TCP/IP}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 01.00\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Wed May 10 2023 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b protomsg} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b protopipe} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
all_dispatch_cfg\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
allowed_ips\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
checker_pids\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
checker_struct\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
connection\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
connections\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
dispatch_cfg\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Dispatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GetCfgFile\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Ipc\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
MessageQueue\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Semaphore\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SharedMemory\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
keep_running_flags\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
semun\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Socket\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
socket_data_t\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
protomsg::st_protomsg\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
thread_pair\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TuxClient\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b all_dispatch_cfg} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b allowed_ips} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b checker_pids} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b checker_struct} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b connection} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b connections} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b dispatch_cfg} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Dispatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GetCfgFile} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Ipc} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b keep_running_flags} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MessageQueue} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Semaphore} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b semun} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SharedMemory} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Socket} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAALW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b socket_data_t} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAMV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b protomsg::st_protomsg} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b thread_pair} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TuxClient} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b src/{\b checker_pids.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b checker_pids.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b client_main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b common.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b connections.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b connections.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b dispatch_cfg.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b dispatch_cfg.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b dispatch_main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b dispatcher.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b dispatcher.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b getcfgfile.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b getcfgfile.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b ipclib.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b ipclib.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b protocol_msg.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Socket.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Socket.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b thread_pair.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b thread_pair.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b tuxcli_main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
protomsg Namespace Reference\par \pard\plain 
{\tc\tcl2 \v protomsg}
{\xe \v protomsg}
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b st_protomsg}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b TYPE_WEAKUP_MSG} =1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b TYPE_NORMAL_MSG} =2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b TYPE_ENDING_MSG} =3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b MAX_MSG_SIZE} =10000\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v MAX_MSG_SIZE\:protomsg}
{\xe \v protomsg\:MAX_MSG_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr long protomsg::MAX_MSG_SIZE =10000{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b protocol_msg.h}.}\par
}
{\xe \v TYPE_ENDING_MSG\:protomsg}
{\xe \v protomsg\:TYPE_ENDING_MSG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr long protomsg::TYPE_ENDING_MSG =3{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b protocol_msg.h}.}\par
}
{\xe \v TYPE_NORMAL_MSG\:protomsg}
{\xe \v protomsg\:TYPE_NORMAL_MSG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr long protomsg::TYPE_NORMAL_MSG =2{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 15} of file {\b protocol_msg.h}.}\par
}
{\xe \v TYPE_WEAKUP_MSG\:protomsg}
{\xe \v protomsg\:TYPE_WEAKUP_MSG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr long protomsg::TYPE_WEAKUP_MSG =1{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b protocol_msg.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
protopipe Namespace Reference\par \pard\plain 
{\tc\tcl2 \v protopipe}
{\xe \v protopipe}
{\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr char {\b WEAKUP_PIPE} [1] =\{'1'\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr char {\b ENDING_PIPE} [1] =\{'2'\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b LEN_PIPEMSG} =1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static char {\b GETPIPEMSG} [1]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v ENDING_PIPE\:protopipe}
{\xe \v protopipe\:ENDING_PIPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr char protopipe::ENDING_PIPE[1] =\{'2'\}{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b protocol_msg.h}.}\par
}
{\xe \v GETPIPEMSG\:protopipe}
{\xe \v protopipe\:GETPIPEMSG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char protopipe::GETPIPEMSG[1]{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 9} of file {\b protocol_msg.h}.}\par
}
{\xe \v LEN_PIPEMSG\:protopipe}
{\xe \v protopipe\:LEN_PIPEMSG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int protopipe::LEN_PIPEMSG =1{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 8} of file {\b protocol_msg.h}.}\par
}
{\xe \v WEAKUP_PIPE\:protopipe}
{\xe \v protopipe\:WEAKUP_PIPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr char protopipe::WEAKUP_PIPE[1] =\{'1'\}{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 6} of file {\b protocol_msg.h}.}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
all_dispatch_cfg Class Reference\par \pard\plain 
{\tc\tcl2 \v all_dispatch_cfg}
{\xe \v all_dispatch_cfg}
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
\par
{
{\f2 #include <dispatch_cfg.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b all_dispatch_cfg} ()=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b all_dispatch_cfg} (const Json::Value json)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b all_dispatch_cfg} ({\b all_dispatch_cfg} const &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b all_dispatch_cfg} ({\b all_dispatch_cfg} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b all_dispatch_cfg} & {\b operator=} ({\b all_dispatch_cfg} const &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b all_dispatch_cfg} & {\b operator=} ({\b all_dispatch_cfg} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~all_dispatch_cfg} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const Json::Value & {\b get_json} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b load_all_info} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b create_cfg_values} (std::string file_dir)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b show_all_config} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_num_dispatchers} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b dispatch_cfg} > & {\b get_all_dispatch_info} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getNumDispatchers} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b getDispatcherXX_IP} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getDispatcherXX_Port} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getDispatcherXX_NumThreads} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b getDispatcherXX_TuxCliProg} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b getDispatcherXX_TuxCliSetup} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getDispatcherXX_LogLevel} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getDispatcherXX_MaxConnections} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getDispatcherXX_StopTimeout} (const std::string dispatchXX) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b getDispatcherXX_IpcFile} (const std::string dispatchXX) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Json::Value {\b _m_json}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b NumDispatchers} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b dispatch_cfg} > {\b dispatchers_cfg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b loaded} \{false\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class of all Dispatchers configuration. \par
}{
Definition at line {\b 60} of file {\b dispatch_cfg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
all_dispatch_cfg::all_dispatch_cfg (){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
all_dispatch_cfg::all_dispatch_cfg (const Json::Value  {\i json}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 79} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
all_dispatch_cfg::all_dispatch_cfg ({\b all_dispatch_cfg} const & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:all_dispatch_cfg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
all_dispatch_cfg::all_dispatch_cfg ({\b all_dispatch_cfg} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~all_dispatch_cfg\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:~all_dispatch_cfg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
all_dispatch_cfg::~all_dispatch_cfg (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v create_cfg_values\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:create_cfg_values}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void all_dispatch_cfg::create_cfg_values (std::string  {\i file_dir})}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v get_all_dispatch_info\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:get_all_dispatch_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< {\b dispatch_cfg} > & all_dispatch_cfg::get_all_dispatch_info (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 99} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v get_json\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:get_json}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const Json::Value & all_dispatch_cfg::get_json () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 87} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v get_num_dispatchers\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:get_num_dispatchers}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::get_num_dispatchers () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 97} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v getDispatcherXX_IP\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_IP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * all_dispatch_cfg::getDispatcherXX_IP (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_IpcFile\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_IpcFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * all_dispatch_cfg::getDispatcherXX_IpcFile (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 104} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_LogLevel\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_LogLevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::getDispatcherXX_LogLevel (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 89} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_MaxConnections\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_MaxConnections}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::getDispatcherXX_MaxConnections (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 94} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_NumThreads\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_NumThreads}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::getDispatcherXX_NumThreads (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 74} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_Port\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_Port}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::getDispatcherXX_Port (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_StopTimeout\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_StopTimeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::getDispatcherXX_StopTimeout (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 99} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_TuxCliProg\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_TuxCliProg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * all_dispatch_cfg::getDispatcherXX_TuxCliProg (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 79} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getDispatcherXX_TuxCliSetup\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getDispatcherXX_TuxCliSetup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * all_dispatch_cfg::getDispatcherXX_TuxCliSetup (const std::string  {\i dispatchXX}) const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 84} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v getNumDispatchers\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:getNumDispatchers}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::getNumDispatchers () const{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 59} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v load_all_info\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:load_all_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void all_dispatch_cfg::load_all_info ()}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b dispatch_cfg.cpp}.}\par
}
{\xe \v operator bool\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
all_dispatch_cfg::operator bool () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 93} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v operator=\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b all_dispatch_cfg} & all_dispatch_cfg::operator= ({\b all_dispatch_cfg} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b all_dispatch_cfg} & all_dispatch_cfg::operator= ({\b all_dispatch_cfg} const & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v show_all_config\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:show_all_config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void all_dispatch_cfg::show_all_config ()}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 109} of file {\b dispatch_cfg.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _m_json\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:_m_json}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Json::Value all_dispatch_cfg::_m_json{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 62} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v dispatchers_cfg\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:dispatchers_cfg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<{\b dispatch_cfg}> all_dispatch_cfg::dispatchers_cfg{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v loaded\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:loaded}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool all_dispatch_cfg::loaded \{false\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 65} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v NumDispatchers\:all_dispatch_cfg}
{\xe \v all_dispatch_cfg\:NumDispatchers}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int all_dispatch_cfg::NumDispatchers \{0\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b dispatch_cfg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b dispatch_cfg.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b dispatch_cfg.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
allowed_ips Struct Reference\par \pard\plain 
{\tc\tcl2 \v allowed_ips}
{\xe \v allowed_ips}
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
\par
{
{\f2 #include <dispatcher.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b trace} \{false\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b allowed} \{true\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
in_addr {\b ip}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 20} of file {\b dispatcher.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v allowed\:allowed_ips}
{\xe \v allowed_ips\:allowed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool allowed_ips::allowed \{true\}}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b dispatcher.h}.}\par
}
{\xe \v ip\:allowed_ips}
{\xe \v allowed_ips\:ip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
in_addr allowed_ips::ip}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b dispatcher.h}.}\par
}
{\xe \v trace\:allowed_ips}
{\xe \v allowed_ips\:trace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool allowed_ips::trace \{false\}}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b dispatcher.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b dispatcher.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
checker_pids Class Reference\par \pard\plain 
{\tc\tcl2 \v checker_pids}
{\xe \v checker_pids}
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
\par
{
{\f2 #include <checker_pids.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b checker_pids} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b checker_pids} ({\b checker_pids} const &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b checker_pids} ({\b checker_pids} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b checker_pids} & {\b operator=} ({\b checker_pids} const &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b checker_pids} & {\b operator=} ({\b checker_pids} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~checker_pids} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b add} (std::function< int()> _call, std::string procname)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b StoppingChildren} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b keep_running_flags} > {\b get_run_flags} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b operator()} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b sigterm_func} (int s)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b checker_struct} > {\b _pids}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b checker_struct} {\b _dead}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
sighandler_t {\b _previousInterruptHandler_int} \{nullptr\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
sighandler_t {\b _previousInterruptHandler_usr1} \{nullptr\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
sighandler_t {\b _previousInterruptHandler_term} \{nullptr\}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::shared_ptr< {\b keep_running_flags} > {\b _p_run} = std::make_shared<{\b keep_running_flags}>()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b _forker} \{false\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b checker_pids} * {\b _me} \{nullptr\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates processes (fork) and keep them alive until signal is captured. \par
}{
Definition at line {\b 46} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v checker_pids\:checker_pids}
{\xe \v checker_pids\:checker_pids}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
checker_pids::checker_pids (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v checker_pids\:checker_pids}
{\xe \v checker_pids\:checker_pids}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
checker_pids::checker_pids ({\b checker_pids} const & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v checker_pids\:checker_pids}
{\xe \v checker_pids\:checker_pids}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
checker_pids::checker_pids ({\b checker_pids} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~checker_pids\:checker_pids}
{\xe \v checker_pids\:~checker_pids}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
checker_pids::~checker_pids (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v add\:checker_pids}
{\xe \v checker_pids\:add}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void checker_pids::add (std::function< int()>  {\i _call}, std::string  {\i procname})}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 113} of file {\b checker_pids.cpp}.}\par
}
{\xe \v get_run_flags\:checker_pids}
{\xe \v checker_pids\:get_run_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr< {\b keep_running_flags} > checker_pids::get_run_flags () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 81} of file {\b checker_pids.h}.}\par
}
{\xe \v operator()\:checker_pids}
{\xe \v checker_pids\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int checker_pids::operator() ()}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b checker_pids.cpp}.}\par
}
{\xe \v operator=\:checker_pids}
{\xe \v checker_pids\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b checker_pids} & checker_pids::operator= ({\b checker_pids} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:checker_pids}
{\xe \v checker_pids\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b checker_pids} & checker_pids::operator= ({\b checker_pids} const & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sigterm_func\:checker_pids}
{\xe \v checker_pids\:sigterm_func}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void checker_pids::sigterm_func (int  {\i s}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 120} of file {\b checker_pids.cpp}.}\par
}
{\xe \v StoppingChildren\:checker_pids}
{\xe \v checker_pids\:StoppingChildren}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void checker_pids::StoppingChildren ()}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b checker_pids.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _dead\:checker_pids}
{\xe \v checker_pids\:_dead}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b checker_struct} checker_pids::_dead{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 48} of file {\b checker_pids.h}.}\par
}
{\xe \v _forker\:checker_pids}
{\xe \v checker_pids\:_forker}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool checker_pids::_forker \{false\}{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 51} of file {\b checker_pids.h}.}\par
}
{\xe \v _me\:checker_pids}
{\xe \v checker_pids\:_me}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b checker_pids} * checker_pids::_me \{nullptr\}{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b checker_pids.h}.}\par
}
{\xe \v _p_run\:checker_pids}
{\xe \v checker_pids\:_p_run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr< {\b keep_running_flags} > checker_pids::_p_run = std::make_shared<{\b keep_running_flags}>(){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b checker_pids.h}.}\par
}
{\xe \v _pids\:checker_pids}
{\xe \v checker_pids\:_pids}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<{\b checker_struct}> checker_pids::_pids{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b checker_pids.h}.}\par
}
{\xe \v _previousInterruptHandler_int\:checker_pids}
{\xe \v checker_pids\:_previousInterruptHandler_int}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sighandler_t checker_pids::_previousInterruptHandler_int \{nullptr\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 54} of file {\b checker_pids.h}.}\par
}
{\xe \v _previousInterruptHandler_term\:checker_pids}
{\xe \v checker_pids\:_previousInterruptHandler_term}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sighandler_t checker_pids::_previousInterruptHandler_term \{nullptr\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 56} of file {\b checker_pids.h}.}\par
}
{\xe \v _previousInterruptHandler_usr1\:checker_pids}
{\xe \v checker_pids\:_previousInterruptHandler_usr1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sighandler_t checker_pids::_previousInterruptHandler_usr1 \{nullptr\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 55} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b checker_pids.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b checker_pids.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
checker_struct Struct Reference\par \pard\plain 
{\tc\tcl2 \v checker_struct}
{\xe \v checker_struct}
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
\par
{
{\f2 #include <checker_pids.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::function< int()> {\b _caller}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
time_t {\b _last_fork} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pid_t {\b _pid} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b _procname}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Process struct \par
}{
Definition at line {\b 27} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _caller\:checker_struct}
{\xe \v checker_struct\:_caller}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::function<int()> checker_struct::_caller}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b checker_pids.h}.}\par
}
{\xe \v _last_fork\:checker_struct}
{\xe \v checker_struct\:_last_fork}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
time_t checker_struct::_last_fork \{0\}}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 30} of file {\b checker_pids.h}.}\par
}
{\xe \v _pid\:checker_struct}
{\xe \v checker_struct\:_pid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pid_t checker_struct::_pid \{0\}}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b checker_pids.h}.}\par
}
{\xe \v _procname\:checker_struct}
{\xe \v checker_struct\:_procname}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string checker_struct::_procname}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b checker_pids.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
connection Struct Reference\par \pard\plain 
{\tc\tcl2 \v connection}
{\xe \v connection}
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\par
{
{\f2 #include <connections.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b next_info} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b nthread} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b status} \{{\b st_free}\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sd} \{-1\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
sockaddr_in {\b sockaddr} \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
time_t {\b entry} \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
time_t {\b last_op} \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\b num_ops} \{0\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Connection struct. Keep sd, status, nthread, sockaddr_in, entry, last_op and num_ops. \par
}{
Definition at line {\b 17} of file {\b connections.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v entry\:connection}
{\xe \v connection\:entry}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
time_t connection::entry \{\}}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b connections.h}.}\par
}
{\xe \v last_op\:connection}
{\xe \v connection\:last_op}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
time_t connection::last_op \{\}}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b connections.h}.}\par
}
{\xe \v next_info\:connection}
{\xe \v connection\:next_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connection::next_info \{0\}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b connections.h}.}\par
}
{\xe \v nthread\:connection}
{\xe \v connection\:nthread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connection::nthread \{0\}}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b connections.h}.}\par
}
{\xe \v num_ops\:connection}
{\xe \v connection\:num_ops}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long connection::num_ops \{0\}}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b connections.h}.}\par
}
{\xe \v sd\:connection}
{\xe \v connection\:sd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connection::sd \{-1\}}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b connections.h}.}\par
}
{\xe \v sockaddr\:connection}
{\xe \v connection\:sockaddr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sockaddr_in connection::sockaddr \{\}}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b connections.h}.}\par
}
{\xe \v status\:connection}
{\xe \v connection\:status}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connection::status \{{\b st_free}\}}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b connections.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b connections.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
connections Class Reference\par \pard\plain 
{\tc\tcl2 \v connections}
{\xe \v connections}
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
\par
{
{\f2 #include <connections.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b connections} (int MaxConnections, int NumThreads)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mark_obsolete} (int idx)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b delete_obsolete} (int idx)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b clean_repeated_ip} (sockaddr_in *ppal, {\b Semaphore} &sem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b register_new_conn} (int nthread, int sd, sockaddr_in s_in, {\b Semaphore} &sem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b unregister_conn} (int idx, {\b Semaphore} &sem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b ending_operation} (int idx, {\b Semaphore} &sem, {\b connection} &cur_conn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b check_obsolete} (int idx_con, {\b Semaphore} &sem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_all_connections_done} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b initialized} \{false\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b first_free} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b nThreads} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b MaxConn} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b connection} * {\b current_connections} \{nullptr\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Connections class. \par
}{
Definition at line {\b 31} of file {\b connections.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v connections\:connections}
{\xe \v connections\:connections}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
connections::connections (int  {\i MaxConnections}, int  {\i NumThreads})}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
connections Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i MaxConnections} \cell }{Max number of connections. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i NumThreads} \cell }{= Number of thread pairs running \cell }
{\row }
}
}{
Definition at line {\b 3} of file {\b connections.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v check_obsolete\:connections}
{\xe \v connections\:check_obsolete}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::check_obsolete (int  {\i idx_con}, {\b Semaphore} &  {\i sem})}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
if connection[idx_con] is obsolete marks it as st_obsolete=2.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i idx} \cell }{Index on connection array \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sem} \cell }{{\b Semaphore} to lock to avoid data races. \cell }
{\row }
}
}{
Definition at line {\b 123} of file {\b connections.cpp}.}\par
}
{\xe \v clean_repeated_ip\:connections}
{\xe \v connections\:clean_repeated_ip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::clean_repeated_ip (sockaddr_in *  {\i ppal}, {\b Semaphore} &  {\i sem})}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Clean repeated IP in connection array.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i ppal} \cell }{sockaddr_in data (IP:port) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sem} \cell }{{\b Semaphore} to lock to avoid data races. \cell }
{\row }
}
}{
Definition at line {\b 65} of file {\b connections.cpp}.}\par
}
{\xe \v delete_obsolete\:connections}
{\xe \v connections\:delete_obsolete}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void connections::delete_obsolete (int  {\i idx})}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 33} of file {\b connections.cpp}.}\par
}
{\xe \v ending_operation\:connections}
{\xe \v connections\:ending_operation}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::ending_operation (int  {\i idx}, {\b Semaphore} &  {\i sem}, {\b connection} &  {\i cur_conn})}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets connection operation info: add 1 to operation counter, gets time\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i idx} \cell }{Index on connection array \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sem} \cell }{{\b Semaphore} to lock to avoid data races. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cur_conn} \cell }{Gets connection struct of connection array (idx position) \cell }
{\row }
}
}{
Definition at line {\b 40} of file {\b connections.cpp}.}\par
}
{\xe \v is_all_connections_done\:connections}
{\xe \v connections\:is_all_connections_done}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool connections::is_all_connections_done (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 96} of file {\b connections.h}.}\par
}
{\xe \v mark_obsolete\:connections}
{\xe \v connections\:mark_obsolete}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void connections::mark_obsolete (int  {\i idx})}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b connections.cpp}.}\par
}
{\xe \v register_new_conn\:connections}
{\xe \v connections\:register_new_conn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::register_new_conn (int  {\i nthread}, int  {\i sd}, sockaddr_in  {\i s_in}, {\b Semaphore} &  {\i sem})}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Registers new connection on array.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nthread} \cell }{Thread pair idx \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sd} \cell }{{\b Socket} descriptor \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s_in} \cell }{sockaddr_in info \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sem} \cell }{{\b Semaphore} to lock to avoid data races. \cell }
{\row }
}
}{
Definition at line {\b 95} of file {\b connections.cpp}.}\par
}
{\xe \v unregister_conn\:connections}
{\xe \v connections\:unregister_conn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::unregister_conn (int  {\i idx}, {\b Semaphore} &  {\i sem})}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Unregisters connection on array.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i idx} \cell }{Index on connection array \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sem} \cell }{{\b Semaphore} to lock to avoid data races. \cell }
{\row }
}
}{
Definition at line {\b 143} of file {\b connections.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v current_connections\:connections}
{\xe \v connections\:current_connections}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b connection}* connections::current_connections \{nullptr\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b connections.h}.}\par
}
{\xe \v first_free\:connections}
{\xe \v connections\:first_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::first_free \{0\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 33} of file {\b connections.h}.}\par
}
{\xe \v initialized\:connections}
{\xe \v connections\:initialized}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool connections::initialized \{false\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b connections.h}.}\par
}
{\xe \v MaxConn\:connections}
{\xe \v connections\:MaxConn}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::MaxConn \{0\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 35} of file {\b connections.h}.}\par
}
{\xe \v nThreads\:connections}
{\xe \v connections\:nThreads}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int connections::nThreads \{0\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 34} of file {\b connections.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b connections.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b connections.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
dispatch_cfg Struct Reference\par \pard\plain 
{\tc\tcl2 \v dispatch_cfg}
{\xe \v dispatch_cfg}
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
\par
{
{\f2 #include <dispatch_cfg.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b NumDispatch}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b IP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Port}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b NumThreads}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b TuxCliProg}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b TuxCliSetup}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b LogLevel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b MaxConnections}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b StopTimeout}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b IpcFile}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::ostream & {\b operator<<} (std::ostream &os, const {\b dispatch_cfg} &v)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Dispatcher} configuration \par
}{
Definition at line {\b 37} of file {\b dispatch_cfg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v operator<<\:dispatch_cfg}
{\xe \v dispatch_cfg\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::ostream & operator<< (std::ostream &  {\i os}, const {\b dispatch_cfg} &  {\i v}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 49} of file {\b dispatch_cfg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v IP\:dispatch_cfg}
{\xe \v dispatch_cfg\:IP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string dispatch_cfg::IP}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 39} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v IpcFile\:dispatch_cfg}
{\xe \v dispatch_cfg\:IpcFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string dispatch_cfg::IpcFile}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v LogLevel\:dispatch_cfg}
{\xe \v dispatch_cfg\:LogLevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int dispatch_cfg::LogLevel}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v MaxConnections\:dispatch_cfg}
{\xe \v dispatch_cfg\:MaxConnections}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int dispatch_cfg::MaxConnections}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v NumDispatch\:dispatch_cfg}
{\xe \v dispatch_cfg\:NumDispatch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int dispatch_cfg::NumDispatch}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v NumThreads\:dispatch_cfg}
{\xe \v dispatch_cfg\:NumThreads}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int dispatch_cfg::NumThreads}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v Port\:dispatch_cfg}
{\xe \v dispatch_cfg\:Port}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int dispatch_cfg::Port}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v StopTimeout\:dispatch_cfg}
{\xe \v dispatch_cfg\:StopTimeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int dispatch_cfg::StopTimeout}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v TuxCliProg\:dispatch_cfg}
{\xe \v dispatch_cfg\:TuxCliProg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string dispatch_cfg::TuxCliProg}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 42} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v TuxCliSetup\:dispatch_cfg}
{\xe \v dispatch_cfg\:TuxCliSetup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string dispatch_cfg::TuxCliSetup}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b dispatch_cfg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b dispatch_cfg.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Dispatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v Dispatcher}
{\xe \v Dispatcher}
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
\par
{
{\f2 #include <dispatcher.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dispatcher} ()=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dispatcher} ({\b dispatch_cfg} cfg, std::shared_ptr< {\b keep_running_flags} > shpt_keep_running)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Dispatcher} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dispatcher} (const {\b Dispatcher} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dispatcher} & {\b operator=} (const {\b Dispatcher} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dispatcher} ({\b Dispatcher} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dispatcher} & {\b operator=} ({\b Dispatcher} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Launch_All_Threads} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Prepare_Server_Socket} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b IPC_Setting_Up} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Accept_Thread} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Assign_connection_to_thread_pair} (int th_id, {\b socket_data_t} *sd_info)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Accept_by_Select} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Ending_all_threads} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b LessCharged} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b LaunchTuxCli} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b operator()} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b dispatch_cfg} {\b _config}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b thread_pair} > {\b _v_thread_pair}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b keep_running_flags} > {\b _sharedptr_keep_running}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b Semaphore} > {\b _shpt_semIPCfile}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b SharedMemory} > {\b _shpt_shmIPCfile}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Socket} {\b _server_socket}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b connections} > {\b _p_cur_connections}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b MessageQueue} > {\b _shpt_Common_Msg_Queue}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b SharedMemory} > {\b _shpt_shmAllowedIPs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b allowed_ips} * {\b _allowed_ips}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b MessageQueue} > {\b _msg_queues}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 27} of file {\b dispatcher.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Dispatcher\:Dispatcher}
{\xe \v Dispatcher\:Dispatcher}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Dispatcher::Dispatcher (){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Dispatcher\:Dispatcher}
{\xe \v Dispatcher\:Dispatcher}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Dispatcher::Dispatcher ({\b dispatch_cfg}  {\i cfg}, std::shared_ptr< {\b keep_running_flags} >  {\i shpt_keep_running})}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 3} of file {\b dispatcher.cpp}.}\par
}
{\xe \v ~Dispatcher\:Dispatcher}
{\xe \v Dispatcher\:~Dispatcher}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Dispatcher::~Dispatcher ()}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b dispatcher.cpp}.}\par
}
{\xe \v Dispatcher\:Dispatcher}
{\xe \v Dispatcher\:Dispatcher}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Dispatcher::Dispatcher (const {\b Dispatcher} &  {\i other})}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 414} of file {\b dispatcher.cpp}.}\par
}
{\xe \v Dispatcher\:Dispatcher}
{\xe \v Dispatcher\:Dispatcher}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Dispatcher::Dispatcher ({\b Dispatcher} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 430} of file {\b dispatcher.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Accept_by_Select\:Dispatcher}
{\xe \v Dispatcher\:Accept_by_Select}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Dispatcher::Accept_by_Select ()}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 88} of file {\b dispatcher.cpp}.}\par
}
{\xe \v Accept_Thread\:Dispatcher}
{\xe \v Dispatcher\:Accept_Thread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Dispatcher::Accept_Thread ()}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 114} of file {\b dispatcher.cpp}.}\par
}
{\xe \v Assign_connection_to_thread_pair\:Dispatcher}
{\xe \v Dispatcher\:Assign_connection_to_thread_pair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Dispatcher::Assign_connection_to_thread_pair (int  {\i th_id}, {\b socket_data_t} *  {\i sd_info})}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 244} of file {\b dispatcher.cpp}.}\par
}
{\xe \v Ending_all_threads\:Dispatcher}
{\xe \v Dispatcher\:Ending_all_threads}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Dispatcher::Ending_all_threads ()}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 202} of file {\b dispatcher.cpp}.}\par
}
{\xe \v IPC_Setting_Up\:Dispatcher}
{\xe \v Dispatcher\:IPC_Setting_Up}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Dispatcher::IPC_Setting_Up ()}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 288} of file {\b dispatcher.cpp}.}\par
}
{\xe \v Launch_All_Threads\:Dispatcher}
{\xe \v Dispatcher\:Launch_All_Threads}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Dispatcher::Launch_All_Threads ()}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b dispatcher.cpp}.}\par
}
{\xe \v LaunchTuxCli\:Dispatcher}
{\xe \v Dispatcher\:LaunchTuxCli}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Dispatcher::LaunchTuxCli ()}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 255} of file {\b dispatcher.cpp}.}\par
}
{\xe \v LessCharged\:Dispatcher}
{\xe \v Dispatcher\:LessCharged}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Dispatcher::LessCharged ()}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 273} of file {\b dispatcher.cpp}.}\par
}
{\xe \v operator bool\:Dispatcher}
{\xe \v Dispatcher\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Dispatcher::operator bool ()}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 283} of file {\b dispatcher.cpp}.}\par
}
{\xe \v operator()\:Dispatcher}
{\xe \v Dispatcher\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Dispatcher::operator() ()}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 485} of file {\b dispatcher.cpp}.}\par
}
{\xe \v operator=\:Dispatcher}
{\xe \v Dispatcher\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Dispatcher} & Dispatcher::operator= (const {\b Dispatcher} &  {\i other})}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 446} of file {\b dispatcher.cpp}.}\par
}
{\xe \v operator=\:Dispatcher}
{\xe \v Dispatcher\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Dispatcher} & Dispatcher::operator= ({\b Dispatcher} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 466} of file {\b dispatcher.cpp}.}\par
}
{\xe \v Prepare_Server_Socket\:Dispatcher}
{\xe \v Dispatcher\:Prepare_Server_Socket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Dispatcher::Prepare_Server_Socket ()}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b dispatcher.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _allowed_ips\:Dispatcher}
{\xe \v Dispatcher\:_allowed_ips}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b allowed_ips}* Dispatcher::_allowed_ips{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 48} of file {\b dispatcher.h}.}\par
}
{\xe \v _config\:Dispatcher}
{\xe \v Dispatcher\:_config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b dispatch_cfg} Dispatcher::_config{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b dispatcher.h}.}\par
}
{\xe \v _msg_queues\:Dispatcher}
{\xe \v Dispatcher\:_msg_queues}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<{\b MessageQueue}> Dispatcher::_msg_queues{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b dispatcher.h}.}\par
}
{\xe \v _p_cur_connections\:Dispatcher}
{\xe \v Dispatcher\:_p_cur_connections}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b connections}> Dispatcher::_p_cur_connections{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b dispatcher.h}.}\par
}
{\xe \v _server_socket\:Dispatcher}
{\xe \v Dispatcher\:_server_socket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Socket} Dispatcher::_server_socket{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b dispatcher.h}.}\par
}
{\xe \v _sharedptr_keep_running\:Dispatcher}
{\xe \v Dispatcher\:_sharedptr_keep_running}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b keep_running_flags}> Dispatcher::_sharedptr_keep_running{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b dispatcher.h}.}\par
}
{\xe \v _shpt_Common_Msg_Queue\:Dispatcher}
{\xe \v Dispatcher\:_shpt_Common_Msg_Queue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b MessageQueue}> Dispatcher::_shpt_Common_Msg_Queue{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b dispatcher.h}.}\par
}
{\xe \v _shpt_semIPCfile\:Dispatcher}
{\xe \v Dispatcher\:_shpt_semIPCfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b Semaphore}> Dispatcher::_shpt_semIPCfile{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 34} of file {\b dispatcher.h}.}\par
}
{\xe \v _shpt_shmAllowedIPs\:Dispatcher}
{\xe \v Dispatcher\:_shpt_shmAllowedIPs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b SharedMemory}> Dispatcher::_shpt_shmAllowedIPs{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b dispatcher.h}.}\par
}
{\xe \v _shpt_shmIPCfile\:Dispatcher}
{\xe \v Dispatcher\:_shpt_shmIPCfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b SharedMemory}> Dispatcher::_shpt_shmIPCfile{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b dispatcher.h}.}\par
}
{\xe \v _v_thread_pair\:Dispatcher}
{\xe \v Dispatcher\:_v_thread_pair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<{\b thread_pair}> Dispatcher::_v_thread_pair{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 30} of file {\b dispatcher.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b dispatcher.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b dispatcher.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GetCfgFile Class Reference\par \pard\plain 
{\tc\tcl2 \v GetCfgFile}
{\xe \v GetCfgFile}
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
\par
{
{\f2 #include <getcfgfile.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GetCfgFile} (std::string file, bool createdir=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~GetCfgFile} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b save_cfg_file} (const Json::Value json)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const Json::Value & {\b get_json} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_file_dir} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_file_name} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b ExtractFileName} (const std::string &s)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b ExtractFileDir} (const std::string &s)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b _filename}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b _file_dir}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b _readed} \{false\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b _saved} \{false\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Json::Value {\b _m_json}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 28} of file {\b getcfgfile.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v GetCfgFile\:GetCfgFile}
{\xe \v GetCfgFile\:GetCfgFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GetCfgFile::GetCfgFile (std::string  {\i file}, bool  {\i createdir} = {\f2 false})}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b getcfgfile.cpp}.}\par
}
{\xe \v ~GetCfgFile\:GetCfgFile}
{\xe \v GetCfgFile\:~GetCfgFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GetCfgFile::~GetCfgFile (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ExtractFileDir\:GetCfgFile}
{\xe \v GetCfgFile\:ExtractFileDir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string GetCfgFile::ExtractFileDir (const std::string &  {\i s}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 15} of file {\b getcfgfile.cpp}.}\par
}
{\xe \v ExtractFileName\:GetCfgFile}
{\xe \v GetCfgFile\:ExtractFileName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string GetCfgFile::ExtractFileName (const std::string &  {\i s}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b getcfgfile.cpp}.}\par
}
{\xe \v get_file_dir\:GetCfgFile}
{\xe \v GetCfgFile\:get_file_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string GetCfgFile::get_file_dir (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b getcfgfile.h}.}\par
}
{\xe \v get_file_name\:GetCfgFile}
{\xe \v GetCfgFile\:get_file_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string GetCfgFile::get_file_name (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b getcfgfile.h}.}\par
}
{\xe \v get_json\:GetCfgFile}
{\xe \v GetCfgFile\:get_json}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const Json::Value & GetCfgFile::get_json () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 35} of file {\b getcfgfile.h}.}\par
}
{\xe \v operator bool\:GetCfgFile}
{\xe \v GetCfgFile\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GetCfgFile::operator bool () const}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 58} of file {\b getcfgfile.cpp}.}\par
}
{\xe \v save_cfg_file\:GetCfgFile}
{\xe \v GetCfgFile\:save_cfg_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GetCfgFile::save_cfg_file (const Json::Value  {\i json})}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b getcfgfile.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _file_dir\:GetCfgFile}
{\xe \v GetCfgFile\:_file_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string GetCfgFile::_file_dir{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b getcfgfile.h}.}\par
}
{\xe \v _filename\:GetCfgFile}
{\xe \v GetCfgFile\:_filename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string GetCfgFile::_filename{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b getcfgfile.h}.}\par
}
{\xe \v _m_json\:GetCfgFile}
{\xe \v GetCfgFile\:_m_json}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Json::Value GetCfgFile::_m_json{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 48} of file {\b getcfgfile.h}.}\par
}
{\xe \v _readed\:GetCfgFile}
{\xe \v GetCfgFile\:_readed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool GetCfgFile::_readed \{false\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b getcfgfile.h}.}\par
}
{\xe \v _saved\:GetCfgFile}
{\xe \v GetCfgFile\:_saved}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool GetCfgFile::_saved \{false\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b getcfgfile.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b getcfgfile.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b getcfgfile.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ipc Class Reference\par \pard\plain 
{\tc\tcl2 \v Ipc}
{\xe \v Ipc}
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
\par
{
{\f2 #include <ipclib.h>}}\par
Inheritance diagram for Ipc:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classIpc.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} (key_t key, bool deleteOnExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b EnableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b DisableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getkey} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getid} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getflags} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getDeleteOnExit} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setkey} (key_t key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setid} (int id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setok} (bool ok)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setflags} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b _key} \{IPC_PRIVATE\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _id} \{-1\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b _deleteOnExit} \{false\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _flags} \{0666\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b _ok} \{false\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Common IPC object ({\b ipclib.h}) \par
}{
Definition at line {\b 32} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Ipc\:Ipc}
{\xe \v Ipc\:Ipc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Ipc::Ipc (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Ipc\:Ipc}
{\xe \v Ipc\:Ipc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Ipc::Ipc (key_t  {\i key}, bool  {\i deleteOnExit}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Ipc} Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{(default key=IPC_PRIVATE) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deleteOnExit} \cell }{= ( false = don't remove semaphore on destruction. true = remove it) \cell }
{\row }
}
}{
Definition at line {\b 48} of file {\b ipclib.h}.}\par
}
{\xe \v Ipc\:Ipc}
{\xe \v Ipc\:Ipc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Ipc::Ipc ({\b Ipc} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Ipc\:Ipc}
{\xe \v Ipc\:Ipc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Ipc::Ipc ({\b Ipc} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Ipc\:Ipc}
{\xe \v Ipc\:~Ipc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual Ipc::~Ipc (){\f2 [virtual]}, {\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v DisableDelete\:Ipc}
{\xe \v Ipc\:DisableDelete}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Ipc::DisableDelete (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 59} of file {\b ipclib.h}.}\par
}
{\xe \v EnableDelete\:Ipc}
{\xe \v Ipc\:EnableDelete}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Ipc::EnableDelete (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 56} of file {\b ipclib.h}.}\par
}
{\xe \v getDeleteOnExit\:Ipc}
{\xe \v Ipc\:getDeleteOnExit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
key_t Ipc::getDeleteOnExit () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 71} of file {\b ipclib.h}.}\par
}
{\xe \v getflags\:Ipc}
{\xe \v Ipc\:getflags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Ipc::getflags () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 68} of file {\b ipclib.h}.}\par
}
{\xe \v getid\:Ipc}
{\xe \v Ipc\:getid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Ipc::getid () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 65} of file {\b ipclib.h}.}\par
}
{\xe \v getkey\:Ipc}
{\xe \v Ipc\:getkey}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
key_t Ipc::getkey () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 62} of file {\b ipclib.h}.}\par
}
{\xe \v operator bool\:Ipc}
{\xe \v Ipc\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual Ipc::operator bool () const{\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 86} of file {\b ipclib.h}.}\par
}
{\xe \v operator=\:Ipc}
{\xe \v Ipc\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Ipc} & Ipc::operator= ({\b Ipc} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:Ipc}
{\xe \v Ipc\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Ipc} & Ipc::operator= ({\b Ipc} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setflags\:Ipc}
{\xe \v Ipc\:setflags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Ipc::setflags (int  {\i flags}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 83} of file {\b ipclib.h}.}\par
}
{\xe \v setid\:Ipc}
{\xe \v Ipc\:setid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Ipc::setid (int  {\i id}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 77} of file {\b ipclib.h}.}\par
}
{\xe \v setkey\:Ipc}
{\xe \v Ipc\:setkey}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Ipc::setkey (key_t  {\i key}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 74} of file {\b ipclib.h}.}\par
}
{\xe \v setok\:Ipc}
{\xe \v Ipc\:setok}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Ipc::setok (bool  {\i ok}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 80} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _deleteOnExit\:Ipc}
{\xe \v Ipc\:_deleteOnExit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Ipc::_deleteOnExit \{false\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b ipclib.h}.}\par
}
{\xe \v _flags\:Ipc}
{\xe \v Ipc\:_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Ipc::_flags \{0666\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b ipclib.h}.}\par
}
{\xe \v _id\:Ipc}
{\xe \v Ipc\:_id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Ipc::_id \{-1\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 35} of file {\b ipclib.h}.}\par
}
{\xe \v _key\:Ipc}
{\xe \v Ipc\:_key}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
key_t Ipc::_key \{IPC_PRIVATE\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 34} of file {\b ipclib.h}.}\par
}
{\xe \v _ok\:Ipc}
{\xe \v Ipc\:_ok}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Ipc::_ok \{false\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
keep_running_flags Struct Reference\par \pard\plain 
{\tc\tcl2 \v keep_running_flags}
{\xe \v keep_running_flags}
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
\par
{
{\f2 #include <checker_pids.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b keep_running_flags} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~keep_running_flags} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::atomic< bool > {\b _keep_accepting} \{true\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::atomic< bool > {\b _keep_working} \{true\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 35} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v keep_running_flags\:keep_running_flags}
{\xe \v keep_running_flags\:keep_running_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
keep_running_flags::keep_running_flags (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 39} of file {\b checker_pids.h}.}\par
}
{\xe \v ~keep_running_flags\:keep_running_flags}
{\xe \v keep_running_flags\:~keep_running_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
keep_running_flags::~keep_running_flags (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _keep_accepting\:keep_running_flags}
{\xe \v keep_running_flags\:_keep_accepting}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::atomic<bool> keep_running_flags::_keep_accepting \{true\}}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b checker_pids.h}.}\par
}
{\xe \v _keep_working\:keep_running_flags}
{\xe \v keep_running_flags\:_keep_working}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::atomic<bool> keep_running_flags::_keep_working \{true\}}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b checker_pids.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b checker_pids.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MessageQueue Class Reference\par \pard\plain 
{\tc\tcl2 \v MessageQueue}
{\xe \v MessageQueue}
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
\par
{
{\f2 #include <ipclib.h>}}\par
Inheritance diagram for MessageQueue:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classMessageQueue.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} (const key_t key, bool deleteOnExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} (int msgid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} ({\b MessageQueue} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} ({\b MessageQueue} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} & {\b operator=} ({\b MessageQueue} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} & {\b operator=} ({\b MessageQueue} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~MessageQueue} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b send} ({\b protomsg::st_protomsg} *p_protomsg, std::string &pdata)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b rcv} ({\b protomsg::st_protomsg} *p_protomsg, std::string &pdata)\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b Ipc}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} (key_t key, bool deleteOnExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b EnableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b DisableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getkey} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getid} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getflags} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getDeleteOnExit} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setkey} (key_t key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setid} (int id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setok} (bool ok)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setflags} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_stat} (int msgid)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
msqid_ds {\b _st}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _size}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Message Queue IPC ({\b ipclib.h}) \par
}{
Definition at line {\b 197} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v MessageQueue\:MessageQueue}
{\xe \v MessageQueue\:MessageQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MessageQueue::MessageQueue (const key_t  {\i key}, bool  {\i deleteOnExit})}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b MessageQueue} Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{(default IPC_PRIVATE) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deleteOnExit} \cell }{= false (don't remove semaphore on destruction. true = remove it) \cell }
{\row }
}
}{
Definition at line {\b 320} of file {\b ipclib.cpp}.}\par
}
{\xe \v MessageQueue\:MessageQueue}
{\xe \v MessageQueue\:MessageQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MessageQueue::MessageQueue (int  {\i msgid})}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b MessageQueue} Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i msgid} \cell }{Id for an existing {\b MessageQueue} \cell }
{\row }
}
}{
Definition at line {\b 251} of file {\b ipclib.cpp}.}\par
}
{\xe \v MessageQueue\:MessageQueue}
{\xe \v MessageQueue\:MessageQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MessageQueue::MessageQueue (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageQueue\:MessageQueue}
{\xe \v MessageQueue\:MessageQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MessageQueue::MessageQueue ({\b MessageQueue} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageQueue\:MessageQueue}
{\xe \v MessageQueue\:MessageQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MessageQueue::MessageQueue ({\b MessageQueue} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~MessageQueue\:MessageQueue}
{\xe \v MessageQueue\:~MessageQueue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
MessageQueue::~MessageQueue ()}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 363} of file {\b ipclib.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_stat\:MessageQueue}
{\xe \v MessageQueue\:get_stat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MessageQueue::get_stat (int  {\i msgid}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 246} of file {\b ipclib.cpp}.}\par
}
{\xe \v operator=\:MessageQueue}
{\xe \v MessageQueue\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageQueue} & MessageQueue::operator= ({\b MessageQueue} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:MessageQueue}
{\xe \v MessageQueue\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageQueue} & MessageQueue::operator= ({\b MessageQueue} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rcv\:MessageQueue}
{\xe \v MessageQueue\:rcv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MessageQueue::rcv ({\b protomsg::st_protomsg} *  {\i p_protomsg}, std::string &  {\i pdata})}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 294} of file {\b ipclib.cpp}.}\par
}
{\xe \v send\:MessageQueue}
{\xe \v MessageQueue\:send}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MessageQueue::send ({\b protomsg::st_protomsg} *  {\i p_protomsg}, std::string &  {\i pdata})}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 269} of file {\b ipclib.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _size\:MessageQueue}
{\xe \v MessageQueue\:_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int MessageQueue::_size{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 200} of file {\b ipclib.h}.}\par
}
{\xe \v _st\:MessageQueue}
{\xe \v MessageQueue\:_st}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
msqid_ds MessageQueue::_st{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 199} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Semaphore Class Reference\par \pard\plain 
{\tc\tcl2 \v Semaphore}
{\xe \v Semaphore}
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
\par
{
{\f2 #include <ipclib.h>}}\par
Inheritance diagram for Semaphore:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classSemaphore.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Semaphore} (const key_t key, const int nsems, const int sem_val, bool deleteOnExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Semaphore} (int semid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Semaphore} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Semaphore} ({\b Semaphore} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Semaphore} ({\b Semaphore} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Semaphore} & {\b operator=} ({\b Semaphore} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Semaphore} & {\b operator=} ({\b Semaphore} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Semaphore} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Lock} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Unlock} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b Ipc}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} (key_t key, bool deleteOnExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b EnableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b DisableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getkey} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getid} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getflags} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getDeleteOnExit} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setkey} (key_t key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setid} (int id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setok} (bool ok)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setflags} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b set} (const int op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_stat} (int semid)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _nsems}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< int > {\b _sem_val}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct sembuf {\b _sop}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b semun} {\b _st}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b LOCK} = -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b UNLOCK} = 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Semaphore} Object IPC ({\b ipclib.h}) \par
}{
Definition at line {\b 107} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Semaphore\:Semaphore}
{\xe \v Semaphore\:Semaphore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Semaphore::Semaphore (const key_t  {\i key}, const int  {\i nsems}, const int  {\i sem_val}, bool  {\i deleteOnExit})}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Semaphore} Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{(default IPC_PRIVATE) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nsems} \cell }{=1 Number of semaphores \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i sem_val} \cell }{=1 Sempahore value \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deleteOnExit} \cell }{= false (don't remove semaphore on destruction. true = remove it) \cell }
{\row }
}
}{
Definition at line {\b 41} of file {\b ipclib.cpp}.}\par
}
{\xe \v Semaphore\:Semaphore}
{\xe \v Semaphore\:Semaphore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Semaphore::Semaphore (int  {\i semid})}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Semaphore} Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i semid} \cell }{Id for an existing {\b Semaphore} \cell }
{\row }
}
}{
Definition at line {\b 10} of file {\b ipclib.cpp}.}\par
}
{\xe \v Semaphore\:Semaphore}
{\xe \v Semaphore\:Semaphore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Semaphore::Semaphore (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Semaphore\:Semaphore}
{\xe \v Semaphore\:Semaphore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Semaphore::Semaphore ({\b Semaphore} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Semaphore\:Semaphore}
{\xe \v Semaphore\:Semaphore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Semaphore::Semaphore ({\b Semaphore} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Semaphore\:Semaphore}
{\xe \v Semaphore\:~Semaphore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Semaphore::~Semaphore ()}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 125} of file {\b ipclib.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_stat\:Semaphore}
{\xe \v Semaphore\:get_stat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Semaphore::get_stat (int  {\i semid}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b ipclib.cpp}.}\par
}
{\xe \v Lock\:Semaphore}
{\xe \v Semaphore\:Lock}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Semaphore::Lock (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 145} of file {\b ipclib.h}.}\par
}
{\xe \v operator=\:Semaphore}
{\xe \v Semaphore\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Semaphore} & Semaphore::operator= ({\b Semaphore} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:Semaphore}
{\xe \v Semaphore\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Semaphore} & Semaphore::operator= ({\b Semaphore} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v set\:Semaphore}
{\xe \v Semaphore\:set}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Semaphore::set (const int  {\i op}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 98} of file {\b ipclib.cpp}.}\par
}
{\xe \v Unlock\:Semaphore}
{\xe \v Semaphore\:Unlock}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Semaphore::Unlock (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 148} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _nsems\:Semaphore}
{\xe \v Semaphore\:_nsems}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Semaphore::_nsems{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 109} of file {\b ipclib.h}.}\par
}
{\xe \v _sem_val\:Semaphore}
{\xe \v Semaphore\:_sem_val}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<int> Semaphore::_sem_val{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 110} of file {\b ipclib.h}.}\par
}
{\xe \v _sop\:Semaphore}
{\xe \v Semaphore\:_sop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct sembuf Semaphore::_sop{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 111} of file {\b ipclib.h}.}\par
}
{\xe \v _st\:Semaphore}
{\xe \v Semaphore\:_st}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b semun} Semaphore::_st{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 112} of file {\b ipclib.h}.}\par
}
{\xe \v LOCK\:Semaphore}
{\xe \v Semaphore\:LOCK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int Semaphore::LOCK = -1{\f2 [static]}, {\f2 [constexpr]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 113} of file {\b ipclib.h}.}\par
}
{\xe \v UNLOCK\:Semaphore}
{\xe \v Semaphore\:UNLOCK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int Semaphore::UNLOCK = 1{\f2 [static]}, {\f2 [constexpr]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 114} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
semun Union Reference\par \pard\plain 
{\tc\tcl2 \v semun}
{\xe \v semun}
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
\par
{
{\f2 #include <ipclib.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b val}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct semid_ds * {\b buf}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned short int * {\b array}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct seminfo * {\b __buf}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 95} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v __buf\:semun}
{\xe \v semun\:__buf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct seminfo* semun::__buf}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 99} of file {\b ipclib.h}.}\par
}
{\xe \v array\:semun}
{\xe \v semun\:array}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned short int* semun::array}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 98} of file {\b ipclib.h}.}\par
}
{\xe \v buf\:semun}
{\xe \v semun\:buf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct semid_ds* semun::buf}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 97} of file {\b ipclib.h}.}\par
}
{\xe \v val\:semun}
{\xe \v semun\:val}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int semun::val}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 96} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this union was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SharedMemory Class Reference\par \pard\plain 
{\tc\tcl2 \v SharedMemory}
{\xe \v SharedMemory}
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
\par
{
{\f2 #include <ipclib.h>}}\par
Inheritance diagram for SharedMemory:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classSharedMemory.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SharedMemory} (const key_t key, int size, bool deleteOnExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SharedMemory} (int shmid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SharedMemory} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SharedMemory} ({\b SharedMemory} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SharedMemory} ({\b SharedMemory} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SharedMemory} & {\b operator=} ({\b SharedMemory} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SharedMemory} & {\b operator=} ({\b SharedMemory} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~SharedMemory} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void * {\b getaddr} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_nattach} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b Ipc}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} (key_t key, bool deleteOnExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} const &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ipc} & {\b operator=} ({\b Ipc} &&)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Ipc} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b EnableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b DisableDelete} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getkey} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getid} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getflags} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
key_t {\b getDeleteOnExit} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setkey} (key_t key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setid} (int id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setok} (bool ok)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setflags} (int flags)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_stat} (int shmid)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void * {\b _shmaddr} \{nullptr\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _size} \{4\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
shmid_ds {\b _st}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Shared Memory Object IPC ({\b ipclib.h}) \par
}{
Definition at line {\b 155} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v SharedMemory\:SharedMemory}
{\xe \v SharedMemory\:SharedMemory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SharedMemory::SharedMemory (const key_t  {\i key}, int  {\i size}, bool  {\i deleteOnExit})}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b SharedMemory} Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i key} \cell }{(default IPC_PRIVATE) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i size} \cell }{Memory size \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deleteOnExit} \cell }{= false (don't remove semaphore on destruction. true = remove it) \cell }
{\row }
}
}{
Definition at line {\b 181} of file {\b ipclib.cpp}.}\par
}
{\xe \v SharedMemory\:SharedMemory}
{\xe \v SharedMemory\:SharedMemory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SharedMemory::SharedMemory (int  {\i shmid})}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b SharedMemory} Constructor\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i shmid} \cell }{Id for an existing {\b SharedMemory} \cell }
{\row }
}
}{
Definition at line {\b 155} of file {\b ipclib.cpp}.}\par
}
{\xe \v SharedMemory\:SharedMemory}
{\xe \v SharedMemory\:SharedMemory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SharedMemory::SharedMemory (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SharedMemory\:SharedMemory}
{\xe \v SharedMemory\:SharedMemory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SharedMemory::SharedMemory ({\b SharedMemory} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SharedMemory\:SharedMemory}
{\xe \v SharedMemory\:SharedMemory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SharedMemory::SharedMemory ({\b SharedMemory} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~SharedMemory\:SharedMemory}
{\xe \v SharedMemory\:~SharedMemory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SharedMemory::~SharedMemory ()}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 221} of file {\b ipclib.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_nattach\:SharedMemory}
{\xe \v SharedMemory\:get_nattach}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int SharedMemory::get_nattach ()}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 145} of file {\b ipclib.cpp}.}\par
}
{\xe \v get_stat\:SharedMemory}
{\xe \v SharedMemory\:get_stat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int SharedMemory::get_stat (int  {\i shmid}){\f2 [private]}}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 140} of file {\b ipclib.cpp}.}\par
}
{\xe \v getaddr\:SharedMemory}
{\xe \v SharedMemory\:getaddr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void * SharedMemory::getaddr () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 188} of file {\b ipclib.h}.}\par
}
{\xe \v operator=\:SharedMemory}
{\xe \v SharedMemory\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b SharedMemory} & SharedMemory::operator= ({\b SharedMemory} && ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:SharedMemory}
{\xe \v SharedMemory\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b SharedMemory} & SharedMemory::operator= ({\b SharedMemory} const & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _shmaddr\:SharedMemory}
{\xe \v SharedMemory\:_shmaddr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void* SharedMemory::_shmaddr \{nullptr\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 157} of file {\b ipclib.h}.}\par
}
{\xe \v _size\:SharedMemory}
{\xe \v SharedMemory\:_size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int SharedMemory::_size \{4\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 158} of file {\b ipclib.h}.}\par
}
{\xe \v _st\:SharedMemory}
{\xe \v SharedMemory\:_st}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
shmid_ds SharedMemory::_st{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 159} of file {\b ipclib.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ipclib.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Socket Class Reference\par \pard\plain 
{\tc\tcl2 \v Socket}
{\xe \v Socket}
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
\par
{
{\f2 #include <Socket.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Socket} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Socket} (int domain, int type, int protocol)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bind} (std::string ip, std::string {\b port})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b connect} (std::string ip, std::string {\b port})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b listen} (int max_queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Socket} {\b accept} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_write} (std::string msg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_read} (std::string &buf, int len)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_safe_read} (std::string &buf, int len, int seconds)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_writeTo} (std::string msg, std::string ip, std::string {\b port})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_readFrom} (std::string &buf, int len, std::string ip, std::string {\b port})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_set_opt} (int level, int optname, void *optval)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_get_opt} (int level, int optname, void *optval)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b set_blocking} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b set_non_blocking} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b socket_shutdown} (int how)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b close} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b select} (std::vector< {\b Socket} > *reads, std::vector< {\b Socket} > *writes, std::vector< {\b Socket} > *exceptions, int seconds)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::string {\b ipFromHostName} (std::string hostname)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sock}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b address}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b port}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct addrinfo {\b address_info}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct sockaddr_storage {\b their_addr}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 26} of file {\b Socket.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Socket\:Socket}
{\xe \v Socket\:Socket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Socket::Socket ()}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b Socket.cpp}.}\par
}
{\xe \v Socket\:Socket}
{\xe \v Socket\:Socket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Socket::Socket (int  {\i domain}, int  {\i type}, int  {\i protocol})}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 15} of file {\b Socket.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v accept\:Socket}
{\xe \v Socket\:accept}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Socket} Socket::accept ()}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 113} of file {\b Socket.cpp}.}\par
}
{\xe \v bind\:Socket}
{\xe \v Socket\:bind}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::bind (std::string  {\i ip}, std::string  {\i port})}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b Socket.cpp}.}\par
}
{\xe \v close\:Socket}
{\xe \v Socket\:close}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Socket::close ()}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 279} of file {\b Socket.cpp}.}\par
}
{\xe \v connect\:Socket}
{\xe \v Socket\:connect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::connect (std::string  {\i ip}, std::string  {\i port})}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 67} of file {\b Socket.cpp}.}\par
}
{\xe \v ipFromHostName\:Socket}
{\xe \v Socket\:ipFromHostName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Socket::ipFromHostName (std::string  {\i hostname}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 360} of file {\b Socket.cpp}.}\par
}
{\xe \v listen\:Socket}
{\xe \v Socket\:listen}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::listen (int  {\i max_queue})}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 103} of file {\b Socket.cpp}.}\par
}
{\xe \v select\:Socket}
{\xe \v Socket\:select}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::select (std::vector< {\b Socket} > *  {\i reads}, std::vector< {\b Socket} > *  {\i writes}, std::vector< {\b Socket} > *  {\i exceptions}, int  {\i seconds}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 283} of file {\b Socket.cpp}.}\par
}
{\xe \v set_blocking\:Socket}
{\xe \v Socket\:set_blocking}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::set_blocking ()}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 240} of file {\b Socket.cpp}.}\par
}
{\xe \v set_non_blocking\:Socket}
{\xe \v Socket\:set_non_blocking}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::set_non_blocking ()}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 255} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_get_opt\:Socket}
{\xe \v Socket\:socket_get_opt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_get_opt (int  {\i level}, int  {\i optname}, void *  {\i optval})}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 230} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_read\:Socket}
{\xe \v Socket\:socket_read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_read (std::string &  {\i buf}, int  {\i len})}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 165} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_readFrom\:Socket}
{\xe \v Socket\:socket_readFrom}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_readFrom (std::string &  {\i buf}, int  {\i len}, std::string  {\i ip}, std::string  {\i port})}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 198} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_safe_read\:Socket}
{\xe \v Socket\:socket_safe_read}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_safe_read (std::string &  {\i buf}, int  {\i len}, int  {\i seconds})}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 146} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_set_opt\:Socket}
{\xe \v Socket\:socket_set_opt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_set_opt (int  {\i level}, int  {\i optname}, void *  {\i optval})}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 220} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_shutdown\:Socket}
{\xe \v Socket\:socket_shutdown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_shutdown (int  {\i how})}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 270} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_write\:Socket}
{\xe \v Socket\:socket_write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_write (std::string  {\i msg})}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 136} of file {\b Socket.cpp}.}\par
}
{\xe \v socket_writeTo\:Socket}
{\xe \v Socket\:socket_writeTo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::socket_writeTo (std::string  {\i msg}, std::string  {\i ip}, std::string  {\i port})}}
\par
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 176} of file {\b Socket.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v address\:Socket}
{\xe \v Socket\:address}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Socket::address}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 30} of file {\b Socket.h}.}\par
}
{\xe \v address_info\:Socket}
{\xe \v Socket\:address_info}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct addrinfo Socket::address_info}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b Socket.h}.}\par
}
{\xe \v port\:Socket}
{\xe \v Socket\:port}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Socket::port}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b Socket.h}.}\par
}
{\xe \v sock\:Socket}
{\xe \v Socket\:sock}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Socket::sock}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b Socket.h}.}\par
}
{\xe \v their_addr\:Socket}
{\xe \v Socket\:their_addr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct sockaddr_storage Socket::their_addr}}
\par
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 33} of file {\b Socket.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Socket.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Socket.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
socket_data_t Struct Reference\par \pard\plain 
{\tc\tcl2 \v socket_data_t}
{\xe \v socket_data_t}
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
\par
{
{\f2 #include <thread_pair.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator==} (const {\b socket_data_t} &c) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sd}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
sockaddr_in {\b sockaddr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b idx_con}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b rcvinfo}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 33} of file {\b thread_pair.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator==\:socket_data_t}
{\xe \v socket_data_t\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool socket_data_t::operator== (const {\b socket_data_t} &  {\i c}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 38} of file {\b thread_pair.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v idx_con\:socket_data_t}
{\xe \v socket_data_t\:idx_con}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int socket_data_t::idx_con}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b thread_pair.h}.}\par
}
{\xe \v rcvinfo\:socket_data_t}
{\xe \v socket_data_t\:rcvinfo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string socket_data_t::rcvinfo}}
\par
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 37} of file {\b thread_pair.h}.}\par
}
{\xe \v sd\:socket_data_t}
{\xe \v socket_data_t\:sd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int socket_data_t::sd}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 34} of file {\b thread_pair.h}.}\par
}
{\xe \v sockaddr\:socket_data_t}
{\xe \v socket_data_t\:sockaddr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sockaddr_in socket_data_t::sockaddr}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 35} of file {\b thread_pair.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b thread_pair.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
protomsg::st_protomsg Struct Reference\par \pard\plain 
{\tc\tcl2 \v protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg}
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
\par
{
{\f2 #include <protocol_msg.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
long {\b mtype} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b q_write} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b terf} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b terl} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b idx} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b guid} [10] \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b pid} [10] \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b aid} [8] \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b cabx} [8] \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b msg} [1] \{0\}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::ostream & {\b operator<<} (std::ostream &os, const {\b st_protomsg} &v)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 18} of file {\b protocol_msg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v operator<<\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::ostream & operator<< (std::ostream &  {\i os}, const {\b st_protomsg} &  {\i v}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 31} of file {\b protocol_msg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v aid\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:aid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char protomsg::st_protomsg::aid[8] \{0\}}}
\par
{\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b protocol_msg.h}.}\par
}
{\xe \v cabx\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:cabx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char protomsg::st_protomsg::cabx[8] \{0\}}}
\par
{\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b protocol_msg.h}.}\par
}
{\xe \v guid\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:guid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char protomsg::st_protomsg::guid[10] \{0\}}}
\par
{\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b protocol_msg.h}.}\par
}
{\xe \v idx\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:idx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int protomsg::st_protomsg::idx \{0\}}}
\par
{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b protocol_msg.h}.}\par
}
{\xe \v msg\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:msg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char protomsg::st_protomsg::msg[1] \{0\}}}
\par
{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b protocol_msg.h}.}\par
}
{\xe \v mtype\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:mtype}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
long protomsg::st_protomsg::mtype \{0\}}}
\par
{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b protocol_msg.h}.}\par
}
{\xe \v pid\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:pid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char protomsg::st_protomsg::pid[10] \{0\}}}
\par
{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b protocol_msg.h}.}\par
}
{\xe \v q_write\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:q_write}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int protomsg::st_protomsg::q_write \{0\}}}
\par
{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b protocol_msg.h}.}\par
}
{\xe \v terf\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:terf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int protomsg::st_protomsg::terf \{0\}}}
\par
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b protocol_msg.h}.}\par
}
{\xe \v terl\:protomsg::st_protomsg}
{\xe \v protomsg::st_protomsg\:terl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int protomsg::st_protomsg::terl \{0\}}}
\par
{\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b protocol_msg.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b protocol_msg.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
thread_pair Class Reference\par \pard\plain 
{\tc\tcl2 \v thread_pair}
{\xe \v thread_pair}
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
\par
{
{\f2 #include <thread_pair.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b thread_pair} ()=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b thread_pair} ({\b MessageQueue} write_queue_id, {\b MessageQueue} common_queue, int idx, std::shared_ptr< {\b keep_running_flags} > shpt_keep_running, std::shared_ptr< {\b connections} > shpt_conn, std::shared_ptr< {\b Semaphore} > shpt_sem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b thread_pair} (const {\b thread_pair} &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b thread_pair} ({\b thread_pair} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b thread_pair} & {\b operator=} (const {\b thread_pair} &)=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b thread_pair} & {\b operator=} ({\b thread_pair} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b reader_thread} (int idx_thp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b writer_thread} (int idx_thp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b add_sockdata} ({\b socket_data_t} sdt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b remove_sockdata} (const {\b socket_data_t} &sdt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_sockdata_list} (std::list< {\b socket_data_t} > &lsdt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_size_of_sock_list} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_read_pipe} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_write_pipe} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_id} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_idx} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} & {\b get_write_queue} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Prepare_Msg_Json_To_Send} ({\b protomsg::st_protomsg} &v_protomsg, std::string msg, Json::Value &json_msg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Attending_Read_Socket} ({\b socket_data_t} &sdt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b Getting_Json_Msg_Received} (std::string &msgin, {\b protomsg::st_protomsg} &v_protomsg, std::string &msgout)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::thread {\b th_r}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::thread {\b th_w}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _idx_thp} \{-1\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _pipe} [2] \{-1,-1\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} {\b _write_queue}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} {\b _common_queue}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::mutex {\b _accept_mutex}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::list< {\b socket_data_t} > {\b _sockdata}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b keep_running_flags} > {\b _sharedptr_keep_running}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b connections} > {\b _p_cur_connections}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::shared_ptr< {\b Semaphore} > {\b _shpt_semIPCfile}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 50} of file {\b thread_pair.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v thread_pair\:thread_pair}
{\xe \v thread_pair\:thread_pair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
thread_pair::thread_pair (){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v thread_pair\:thread_pair}
{\xe \v thread_pair\:thread_pair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
thread_pair::thread_pair ({\b MessageQueue}  {\i write_queue_id}, {\b MessageQueue}  {\i common_queue}, int  {\i idx}, std::shared_ptr< {\b keep_running_flags} >  {\i shpt_keep_running}, std::shared_ptr< {\b connections} >  {\i shpt_conn}, std::shared_ptr< {\b Semaphore} >  {\i shpt_sem})}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b thread_pair.cpp}.}\par
}
{\xe \v thread_pair\:thread_pair}
{\xe \v thread_pair\:thread_pair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
thread_pair::thread_pair (const {\b thread_pair} & ){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 76} of file {\b thread_pair.h}.}\par
}
{\xe \v thread_pair\:thread_pair}
{\xe \v thread_pair\:thread_pair}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
thread_pair::thread_pair ({\b thread_pair} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v add_sockdata\:thread_pair}
{\xe \v thread_pair\:add_sockdata}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::add_sockdata ({\b socket_data_t}  {\i sdt})}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 280} of file {\b thread_pair.cpp}.}\par
}
{\xe \v Attending_Read_Socket\:thread_pair}
{\xe \v thread_pair\:Attending_Read_Socket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void thread_pair::Attending_Read_Socket ({\b socket_data_t} &  {\i sdt})}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 33} of file {\b thread_pair.cpp}.}\par
}
{\xe \v get_id\:thread_pair}
{\xe \v thread_pair\:get_id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::get_id () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 91} of file {\b thread_pair.h}.}\par
}
{\xe \v get_idx\:thread_pair}
{\xe \v thread_pair\:get_idx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::get_idx () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 92} of file {\b thread_pair.h}.}\par
}
{\xe \v get_read_pipe\:thread_pair}
{\xe \v thread_pair\:get_read_pipe}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::get_read_pipe () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 89} of file {\b thread_pair.h}.}\par
}
{\xe \v get_size_of_sock_list\:thread_pair}
{\xe \v thread_pair\:get_size_of_sock_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::get_size_of_sock_list () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 88} of file {\b thread_pair.h}.}\par
}
{\xe \v get_sockdata_list\:thread_pair}
{\xe \v thread_pair\:get_sockdata_list}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::get_sockdata_list (std::list< {\b socket_data_t} > &  {\i lsdt})}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 308} of file {\b thread_pair.cpp}.}\par
}
{\xe \v get_write_pipe\:thread_pair}
{\xe \v thread_pair\:get_write_pipe}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::get_write_pipe () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 90} of file {\b thread_pair.h}.}\par
}
{\xe \v get_write_queue\:thread_pair}
{\xe \v thread_pair\:get_write_queue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageQueue} & thread_pair::get_write_queue (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 93} of file {\b thread_pair.h}.}\par
}
{\xe \v Getting_Json_Msg_Received\:thread_pair}
{\xe \v thread_pair\:Getting_Json_Msg_Received}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::Getting_Json_Msg_Received (std::string &  {\i msgin}, {\b protomsg::st_protomsg} &  {\i v_protomsg}, std::string &  {\i msgout})}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 93} of file {\b thread_pair.cpp}.}\par
}
{\xe \v operator=\:thread_pair}
{\xe \v thread_pair\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b thread_pair} & thread_pair::operator= (const {\b thread_pair} & ){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:thread_pair}
{\xe \v thread_pair\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b thread_pair} & thread_pair::operator= ({\b thread_pair} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Prepare_Msg_Json_To_Send\:thread_pair}
{\xe \v thread_pair\:Prepare_Msg_Json_To_Send}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void thread_pair::Prepare_Msg_Json_To_Send ({\b protomsg::st_protomsg} &  {\i v_protomsg}, std::string  {\i msg}, Json::Value &  {\i json_msg})}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 211} of file {\b thread_pair.cpp}.}\par
}
{\xe \v reader_thread\:thread_pair}
{\xe \v thread_pair\:reader_thread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void thread_pair::reader_thread (int  {\i idx_thp})}}
\par
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 122} of file {\b thread_pair.cpp}.}\par
}
{\xe \v remove_sockdata\:thread_pair}
{\xe \v thread_pair\:remove_sockdata}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::remove_sockdata (const {\b socket_data_t} &  {\i sdt})}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 290} of file {\b thread_pair.cpp}.}\par
}
{\xe \v writer_thread\:thread_pair}
{\xe \v thread_pair\:writer_thread}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void thread_pair::writer_thread (int  {\i idx_thp})}}
\par
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 222} of file {\b thread_pair.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v _accept_mutex\:thread_pair}
{\xe \v thread_pair\:_accept_mutex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::mutex thread_pair::_accept_mutex{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 61} of file {\b thread_pair.h}.}\par
}
{\xe \v _common_queue\:thread_pair}
{\xe \v thread_pair\:_common_queue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageQueue} thread_pair::_common_queue{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 60} of file {\b thread_pair.h}.}\par
}
{\xe \v _idx_thp\:thread_pair}
{\xe \v thread_pair\:_idx_thp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::_idx_thp \{-1\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 57} of file {\b thread_pair.h}.}\par
}
{\xe \v _p_cur_connections\:thread_pair}
{\xe \v thread_pair\:_p_cur_connections}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b connections}> thread_pair::_p_cur_connections{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 65} of file {\b thread_pair.h}.}\par
}
{\xe \v _pipe\:thread_pair}
{\xe \v thread_pair\:_pipe}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int thread_pair::_pipe[2] \{-1,-1\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 58} of file {\b thread_pair.h}.}\par
}
{\xe \v _sharedptr_keep_running\:thread_pair}
{\xe \v thread_pair\:_sharedptr_keep_running}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b keep_running_flags}> thread_pair::_sharedptr_keep_running{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 64} of file {\b thread_pair.h}.}\par
}
{\xe \v _shpt_semIPCfile\:thread_pair}
{\xe \v thread_pair\:_shpt_semIPCfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::shared_ptr<{\b Semaphore}> thread_pair::_shpt_semIPCfile{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 67} of file {\b thread_pair.h}.}\par
}
{\xe \v _sockdata\:thread_pair}
{\xe \v thread_pair\:_sockdata}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::list<{\b socket_data_t}> thread_pair::_sockdata{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 63} of file {\b thread_pair.h}.}\par
}
{\xe \v _write_queue\:thread_pair}
{\xe \v thread_pair\:_write_queue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageQueue} thread_pair::_write_queue{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 59} of file {\b thread_pair.h}.}\par
}
{\xe \v th_r\:thread_pair}
{\xe \v thread_pair\:th_r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::thread thread_pair::th_r}}
\par
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b thread_pair.h}.}\par
}
{\xe \v th_w\:thread_pair}
{\xe \v thread_pair\:th_w}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::thread thread_pair::th_w}}
\par
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 54} of file {\b thread_pair.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b thread_pair.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b thread_pair.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TuxClient Class Reference\par \pard\plain 
{\tc\tcl2 \v TuxClient}
{\xe \v TuxClient}
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TuxClient} (int idx, {\b MessageQueue} &queue)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b operator()} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b idx_cli} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageQueue} & {\b common_queue}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 38} of file {\b tuxcli_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v TuxClient\:TuxClient}
{\xe \v TuxClient\:TuxClient}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TuxClient::TuxClient (int  {\i idx}, {\b MessageQueue} &  {\i queue}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 43} of file {\b tuxcli_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator()\:TuxClient}
{\xe \v TuxClient\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int TuxClient::operator() ()}}
\par
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b tuxcli_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v common_queue\:TuxClient}
{\xe \v TuxClient\:common_queue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageQueue}& TuxClient::common_queue{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b tuxcli_main.cpp}.}\par
}
{\xe \v idx_cli\:TuxClient}
{\xe \v TuxClient\:idx_cli}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int TuxClient::idx_cli \{0\}{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b tuxcli_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b tuxcli_main.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/checker_pids.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/checker_pids.cpp}
{\xe \v src/checker_pids.cpp}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "checker_pids.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
checker_pids.cpp\par \pard\plain 
{\tc\tcl2 \v src/checker_pids.cpp}
{\xe \v src/checker_pids.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "checker_pids.h"}\par
00002 \par
00003 checker_pids* checker_pids::_me\{{\cf17 nullptr}\};\par
00004 {\cf18 bool} checker_pids::_forker\{{\cf17 false}\};\par
00005 std::shared_ptr<keep_running_flags> checker_pids::_p_run = std::make_shared<keep_running_flags>();\par
00006 \par
00007 {\cf18 void} checker_pids::StoppingChildren()\par
00008 \{\par
00009     LOG_DEBUG << {\cf22 "Sending signal to children!"};\par
00010     {\cf19 for}({\cf17 auto} &child : _pids)\par
00011     \{\par
00012         kill(child._pid, SIGUSR1);\par
00013     \}\par
00014 \}\par
00015 \par
00016 {\cf18 int} checker_pids::operator()()\par
00017 \{\par
00018     {\cf18 int} ret=0;\par
00019 \par
00020     _forker = {\cf17 true};       {\cf20 // Important to propagate signal to children and itself}\par
00021 \par
00022     {\cf19 if}(_pids.size() == 0)\par
00023     \{\par
00024         LOG_ERROR << {\cf22 "At least one functor is needed.!!"};\par
00025         {\cf19 return} 1;\par
00026     \}\par
00027     \par
00028     {\cf20 // Important to manage signal handler to kill children}\par
00029     _me = {\cf17 this};\par
00030 \par
00031     LOG_DEBUG << {\cf22 "Running checker_pids with "} << _pids.size() << {\cf22 " processes."};\par
00032     LOG_DEBUG << {\cf22 "_keep_accepting "} << _p_run->_keep_accepting << {\cf22 " : _keep_working "} << _p_run->_keep_working << {\cf22 " : _forker "} << _forker;\par
00033 \par
00034     {\cf17 using namespace }std::placeholders;    {\cf20 // adds visibility of _1, _2, _3,...}\par
00035 \par
00036     _previousInterruptHandler_int = signal(SIGINT, &checker_pids::sigterm_func);\par
00037     _previousInterruptHandler_usr1 = signal(SIGUSR1, &checker_pids::sigterm_func);\par
00038     _previousInterruptHandler_term = signal(SIGTERM, &checker_pids::sigterm_func);\par
00039 \par
00040     {\cf19 while}(_p_run->_keep_accepting.load()) \par
00041     \{\par
00042         time(&_dead._last_fork);\par
00043 \par
00044         {\cf19 for}({\cf17 auto} &process : _pids)\par
00045         \{\par
00046             {\cf19 if}( process._pid == _dead._pid ) \par
00047             \{\par
00048                 {\cf19 if}( process._pid != 0 && _dead._last_fork <= process._last_fork + 5 ) \par
00049                 \{\par
00050                     LOG_DEBUG << {\cf22 "_dead._last_fork <= process._last_fork + 5 "} << _dead._last_fork  << {\cf22 " <= "} << process._last_fork + 5;\par
00051 \par
00052                     LOG_DEBUG << {\cf22 "Process "} << process._procname << {\cf22 " (pid "} << process._pid << {\cf22 ") dead too quick. Stopping"};\par
00053                     raise(SIGTERM);\par
00054                     StoppingChildren();\par
00055                     {\cf19 break};\par
00056                 \}\par
00057 \par
00058                 process._last_fork = _dead._last_fork;\par
00059                 {\cf19 switch}( process._pid = fork() ) \par
00060                 \{\par
00061                     {\cf19 case} -1:\par
00062                         LOG_ERROR << {\cf22 "fork: "} << strerror(errno);\par
00063                         raise(SIGTERM);\par
00064                         StoppingChildren();\par
00065                         {\cf19 break};\par
00066                     \par
00067                     {\cf19 case} 0:                             {\cf20 // Child process}\par
00068                         _forker = {\cf17 false};                {\cf20 // I am not the forker, I am a child}\par
00069                         ret=process._caller();          {\cf20 // Call to functor - operator ()}\par
00070                         {\cf19 return} ret;\par
00071                         {\cf19 break};\par
00072 \par
00073                     {\cf19 default}:                               {\cf20 // Parent process}\par
00074                         LOG_DEBUG << process._procname << {\cf22 " launched with pid "} << process._pid;\par
00075                         {\cf19 break};\par
00076                 \}\par
00077                 {\cf19 if}(process._pid == -1)\par
00078                     {\cf19 break};\par
00079             \}\par
00080         \}\par
00081 \par
00082         LOG_DEBUG << {\cf22 "waiting - keep_accepting "} << _p_run->_keep_accepting;\par
00083 \par
00084         _dead._pid = wait(NULL);\par
00085         LOG_DEBUG << {\cf22 "wake-up - child dead "} << _dead._pid << {\cf22 "... keep_accepting "} << _p_run->_keep_accepting;\par
00086     \}\par
00087 \par
00088     \par
00089     {\cf18 bool} waiting = {\cf17 true};\par
00090     {\cf19 while} (waiting)\par
00091     \{\par
00092         {\cf17 auto} it_pid_alive = std::find_if(_pids.begin(), _pids.end(), [](checker_struct &ch)\{ return kill(ch._pid,0)!=-1;\});\par
00093         {\cf19 if}(it_pid_alive == _pids.end()) \{\par
00094             LOG_DEBUG << {\cf22 "All process dead!!"};\par
00095             waiting = {\cf17 false};\par
00096         \}\par
00097         {\cf19 else} \{\par
00098             LOG_DEBUG << {\cf22 "Still alive, waiting: "} << it_pid_alive->_pid;\par
00099             _dead._pid = wait(NULL);\par
00100             LOG_DEBUG << {\cf22 "_dead._pid:"} <<_dead._pid;\par
00101         \}\par
00102         std::this_thread::sleep_for(std::chrono::milliseconds(100));\par
00103     \}\par
00104 \par
00105     (void)signal(SIGINT,  _previousInterruptHandler_int);\par
00106     (void)signal(SIGUSR1, _previousInterruptHandler_usr1);\par
00107     (void)signal(SIGTERM, _previousInterruptHandler_term);\par
00108 \par
00109     LOG_DEBUG << {\cf22 "Ending checker_pids::operator() - _forker "} << _forker;\par
00110     {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(_forker);\par
00111 \}\par
00112 \par
00113 {\cf18 void} checker_pids::add(std::function<{\cf18 int}()> _call, std::string procname)\par
00114 \{ \par
00115     checker_struct checker\{_call,0,0,procname\};\par
00116     _pids.reserve(_pids.size()+1);\par
00117     _pids.emplace_back(checker);\par
00118 \}\par
00119 \par
00120 {\cf18 void} checker_pids::sigterm_func({\cf18 int} s) \par
00121 \{\par
00122     LOG_DEBUG << {\cf22 "Received signal "} << s << {\cf22 " : "} << strsignal(s) << \\\par
00123                  {\cf22 " _keep_accepting "} << _p_run->_keep_accepting << {\cf22 " : _forker "} << _forker;\par
00124     \par
00125     {\cf19 if}(_p_run->_keep_accepting && _forker) \par
00126     \{\par
00127         _p_run->_keep_accepting = {\cf17 false};\par
00128         {\cf19 if}(_me!={\cf17 nullptr}) \{\par
00129             _me->StoppingChildren();\par
00130 \par
00131             _me = {\cf17 nullptr};\par
00132         \}\par
00133     \}\par
00134 \par
00135     _p_run->_keep_accepting = {\cf17 false};\par
00136 \par
00137     LOG_DEBUG << {\cf22 "Received signal "} << s << {\cf22 " : "} << strsignal(s) << \\\par
00138                  {\cf22 " _keep_accepting "} << _p_run->_keep_accepting << {\cf22 " : _forker "} << _forker;\par
00139 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/checker_pids.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/checker_pids.h}
{\xe \v src/checker_pids.h}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <signal.h>}\par
{\f2 #include <sys/wait.h>}\par
{\f2 #include "common.h"}\par
{\f2 #include <vector>}\par
{\f2 #include <chrono>}\par
{\f2 #include <thread>}\par
{\f2 #include <string>}\par
{\f2 #include <functional>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <atomic>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b checker_struct}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b keep_running_flags}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b checker_pids}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
checker_pids.h\par \pard\plain 
{\tc\tcl2 \v src/checker_pids.h}
{\xe \v src/checker_pids.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef CHECKER_PIDS_H_}\par
00002 {\cf21 #define CHECKER_PIDS_H_}\par
00003 \par
00004 {\cf21 #ifdef  __cplusplus}\par
00005 {\cf17 extern} {\cf22 "C"} \{\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #include <signal.h>}\par
00009 {\cf21 #include <sys/wait.h>}\par
00010 \par
00011 {\cf21 #ifdef  __cplusplus}\par
00012 \}\par
00013 {\cf21 #endif}\par
00014 \par
00015 {\cf21 #include "common.h"}\par
00016 {\cf21 #include <vector>}\par
00017 {\cf21 #include <chrono>}\par
00018 {\cf21 #include <thread>}\par
00019 {\cf21 #include <string>}\par
00020 {\cf21 #include <functional>}\par
00021 {\cf21 #include <algorithm>}\par
00022 {\cf21 #include <atomic>}\par
00023 \par
00027 {\cf17 struct }checker_struct \par
00028 \{\par
00029     std::function<int()> _caller;       {\cf20 // Functor callback}\par
00030     time_t _last_fork\{0\};               {\cf20 // Time of last fork}\par
00031     pid_t  _pid\{0\};                     {\cf20 // pid of the process}\par
00032     std::string _procname;              {\cf20 // Process name}\par
00033 \};\par
00034 \par
00035 {\cf17 struct }keep_running_flags \par
00036 \{\par
00037     std::atomic<bool> _keep_accepting\{{\cf17 true}\};               {\cf20 // When true keeps AcceptThread accepting calls.}\par
00038     std::atomic<bool> _keep_working\{{\cf17 true}\};                 {\cf20 // When true keeps WriterThread sending last operations. }\par
00039     keep_running_flags()\{ LOG_DEBUG << {\cf22 "keep_running_flags Ctor"}; \}\par
00040     ~keep_running_flags()\{ LOG_DEBUG << {\cf22 "keep_running_flags Dtor"}; \}\par
00041 \};\par
00042 \par
00046 {\cf17 class }checker_pids final \{\par
00047     std::vector<checker_struct> _pids;      {\cf20 // Vector of processes}\par
00048     checker_struct _dead;                   {\cf20 // Gets dead process on wait()}\par
00049     \par
00050     {\cf17 static} std::shared_ptr<keep_running_flags> _p_run;      {\cf20 // Shared pointer to atomic bool variables}\par
00051     {\cf17 static} {\cf18 bool} _forker;                                    {\cf20 // Identifies which process is the forker.}\par
00052     {\cf17 static} checker_pids *_me;                               {\cf20 // Pointer to an existing instance.}\par
00053 \par
00054     sighandler_t _previousInterruptHandler_int\{{\cf17 nullptr}\};    {\cf20 // Signal handler for SIGINT}\par
00055     sighandler_t _previousInterruptHandler_usr1\{{\cf17 nullptr}\};   {\cf20 // Signal handler for SIGUSR1}\par
00056     sighandler_t _previousInterruptHandler_term\{{\cf17 nullptr}\};   {\cf20 // Signal handler for SIGTERM}\par
00057 \par
00058 {\cf17 public}:\par
00059     \par
00060     {\cf20 // Static signal handler.}\par
00061     {\cf17 static} {\cf18 void} sigterm_func({\cf18 int} s);\par
00062 \par
00063     checker_pids() = {\cf19 default};\par
00064     checker_pids(checker_pids {\cf17 const} &) = {\cf17 delete};\par
00065     checker_pids(checker_pids &&) = {\cf17 delete};\par
00066     checker_pids& operator=(checker_pids {\cf17 const} &) = {\cf17 delete};\par
00067     checker_pids& operator=(checker_pids &&) = {\cf17 delete};\par
00068 \par
00069     ~checker_pids()\{ LOG_DEBUG << {\cf22 "Destructor checker_pids"}; \}\par
00070 \par
00071     {\cf20 // Adds a new process (functor callback and process name)}\par
00072     {\cf18 void} add(std::function<{\cf18 int}()> _call, std::string procname);\par
00073 \par
00074     {\cf20 // Clears all _pics vector.}\par
00075     {\cf20 //void clear()\{ _pids.clear(); \}   // Temporal solution to clean up all shared_ptr to IPC's of Dispatcher Object}\par
00076 \par
00077     {\cf20 // Sends a SIGUSR1 to children processes. }\par
00078     {\cf18 void} StoppingChildren();\par
00079 \par
00080     {\cf20 // Gets shared pointer to atomic flags to keep_accepting and keep_working variables. }\par
00081     std::shared_ptr<keep_running_flags> get_run_flags(){\cf17  const }\{ {\cf19 return} _p_run; \}\par
00082 \par
00083     {\cf20 // Launch and keep working all processes. }\par
00084     {\cf18 int} operator()();\par
00085 \};\par
00086 \par
00087 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/client_main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/client_main.cpp}
{\xe \v src/client_main.cpp}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <memory>}\par
{\f2 #include <map>}\par
{\f2 #include <json/json.h>}\par
{\f2 #include "common.h"}\par
{\f2 #include "Socket.h"}\par
{\f2 #include "protocol_msg.h"}\par
{\f2 #include "plog/Initializers/RollingFileInitializer.h"}\par
{\f2 #include "plog/Initializers/ConsoleInitializer.h"}\par
{\f2 #include <signal.h>}\par
{\f2 #include <sys/wait.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b LOGLEVEL}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sigterm_func} (int s)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Prepare_Msg_Json_To_Send} ({\b protomsg::st_protomsg} &v_protomsg, string msg, Json::Value &json_msg)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b loglevel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto {\b keep_accepting} = true\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v LOGLEVEL\:client_main.cpp}
{\xe \v client_main.cpp\:LOGLEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define LOGLEVEL}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b client_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:client_main.cpp}
{\xe \v client_main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 56} of file {\b client_main.cpp}.}\par
}
{\xe \v Prepare_Msg_Json_To_Send\:client_main.cpp}
{\xe \v client_main.cpp\:Prepare_Msg_Json_To_Send}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Prepare_Msg_Json_To_Send ({\b protomsg::st_protomsg} &  {\i v_protomsg}, string  {\i msg}, Json::Value &  {\i json_msg})}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b client_main.cpp}.}\par
}
{\xe \v sigterm_func\:client_main.cpp}
{\xe \v client_main.cpp\:sigterm_func}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sigterm_func (int  {\i s})}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 34} of file {\b client_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v keep_accepting\:client_main.cpp}
{\xe \v client_main.cpp\:keep_accepting}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto keep_accepting = true}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b client_main.cpp}.}\par
}
{\xe \v loglevel\:client_main.cpp}
{\xe \v client_main.cpp\:loglevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int loglevel}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 6} of file {\b client_main.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
client_main.cpp\par \pard\plain 
{\tc\tcl2 \v src/client_main.cpp}
{\xe \v src/client_main.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /***************************************}\par
00002 {\cf20  * GLOBAL VARS - IN COMMON.H}\par
00003 {\cf20  ***************************************/}\par
00004 {\cf21 #if !defined LOGLEVEL}\par
00005 {\cf21 #define LOGLEVEL}\par
00006 {\cf18 int} loglevel;\par
00007 {\cf21 #endif}\par
00008 \par
00009 {\cf21 #include <memory>}\par
00010 {\cf21 #include <map>}\par
00011 {\cf21 #include <json/json.h>}\par
00012 \par
00013 {\cf21 #include "common.h"}\par
00014 {\cf21 #include "Socket.h"}\par
00015 {\cf21 #include "protocol_msg.h"}\par
00016 {\cf21 #include "plog/Initializers/RollingFileInitializer.h"}\par
00017 {\cf21 #include "plog/Initializers/ConsoleInitializer.h"}\par
00018 \par
00019 {\cf21 #ifdef  __cplusplus}\par
00020 {\cf17 extern} {\cf22 "C"} \{\par
00021 {\cf21 #endif}\par
00022 \par
00023 {\cf21 #include <signal.h>}\par
00024 {\cf21 #include <sys/wait.h>}\par
00025 \par
00026 {\cf21 #ifdef  __cplusplus}\par
00027 \}\par
00028 {\cf21 #endif}\par
00029 \par
00030 {\cf17 using namespace }std;\par
00031 \par
00032 {\cf17 auto} keep_accepting = {\cf17 true};\par
00033 \par
00034 {\cf18 void} sigterm_func({\cf18 int} s) \par
00035 \{\par
00036     LOG_DEBUG << {\cf22 "Received signal "} << s << {\cf22 " : "} << strsignal(s) << \\\par
00037                  {\cf22 " keep_accepting "} << keep_accepting;\par
00038 \par
00039     keep_accepting = {\cf17 false};\par
00040 \par
00041     LOG_DEBUG << {\cf22 "Received signal "} << s << {\cf22 " : "} << strsignal(s) << \\\par
00042                  {\cf22 " keep_accepting "} << keep_accepting;\par
00043 \}\par
00044 \par
00045 {\cf18 void} Prepare_Msg_Json_To_Send(protomsg::st_protomsg &v_protomsg, {\cf18 string} msg, Json::Value &json_msg)\par
00046 \{\par
00047     json_msg[{\cf22 "TERF"}] = v_protomsg.terf;\par
00048     json_msg[{\cf22 "TERL"}] = v_protomsg.terl;\par
00049     json_msg[{\cf22 "GUID"}] = std::string(v_protomsg.guid);\par
00050     json_msg[{\cf22 "PID"}] = std::string(v_protomsg.pid);\par
00051     json_msg[{\cf22 "AID"}] = std::string(v_protomsg.aid);\par
00052     json_msg[{\cf22 "CABX"}] = std::string(v_protomsg.cabx);\par
00053     json_msg[{\cf22 "MSG"}] = msg;\par
00054 \}\par
00055 \par
00056 {\cf18 int} main()\par
00057 \{\par
00058     {\cf20 // TO DO }\par
00059     {\cf20 // Get level of log from file config. Now it is only DEBUG.}\par
00060     {\cf17 static} plog::ConsoleAppender<plog::TxtFormatter> consoleAppender;\par
00061     loglevel=plog::verbose;\par
00062     plog::init(plog::verbose, &consoleAppender);\par
00063 \par
00064     protomsg::st_protomsg v_protomsg;\par
00065     std::string msg_to_send, msgout;\par
00066     Json::Value json_msg;\par
00067 \par
00068     LOG_DEBUG << {\cf22 "CLIENT_main START!!"};\par
00069 \par
00070     {\cf17 auto} previousInterruptHandler_int = signal(SIGINT, sigterm_func);\par
00071     {\cf17 auto} previousInterruptHandler_usr1 = signal(SIGUSR1, sigterm_func);\par
00072     {\cf17 auto} previousInterruptHandler_term = signal(SIGTERM, sigterm_func);\par
00073 \par
00074     {\cf18 string} ip = Socket::ipFromHostName({\cf22 "localhost"}); {\cf20 //Get ip addres from hostname}\par
00075     {\cf18 string} port = {\cf22 "9000"}; \par
00076     Socket *sock = {\cf17 new} Socket(AF_INET,SOCK_STREAM,0);  {\cf20 //AF_INET (Internet mode) SOCK_STREAM (TCP mode) 0 (Protocol any)}\par
00077 \par
00078     sock->connect(ip, port); {\cf20 //Connect to localhost}\par
00079 \par
00080     msg_to_send = {\cf22 "Well, this is the first message going and coming."};\par
00081 \par
00082     v_protomsg.terf = 1000;\par
00083     v_protomsg.terl = 3000;\par
00084     strcpy(v_protomsg.guid,{\cf22 "SOMEGUID"});\par
00085     strcpy(v_protomsg.pid, {\cf22 "somepid"});\par
00086     strcpy(v_protomsg.aid, {\cf22 "400200"});\par
00087     strcpy(v_protomsg.cabx,{\cf22 "400201"});\par
00088 \par
00089     Prepare_Msg_Json_To_Send(v_protomsg, msg_to_send, json_msg);\par
00090 \par
00091     stringstream ss;\par
00092     \par
00093     {\cf18 string} field;\par
00094     \par
00095     ss << json_msg;\par
00096     \par
00097     {\cf19 while} (getline(ss, field))  {\cf20 // Cortamos campos ...}\par
00098         msgout += field;\par
00099     \par
00100     LOG_DEBUG << {\cf22 "Sending msgout: "} << msgout; \par
00101     \par
00102     sock->socket_write(msgout);\par
00103 \par
00104     {\cf18 int} seconds = 10;{\cf20 //Wait 10 second for response}\par
00105 \par
00106     vector<Socket> reads(1);\par
00107 \par
00108     reads[0] = *sock;\par
00109 \par
00110     {\cf20 //Socket::select waits until sock reveives some input (for example the answer from google.com)}\par
00111     {\cf19 if}(sock->select(&reads, NULL, NULL, seconds) < 1)\par
00112     \{\par
00113         {\cf20 //Something went wrong}\par
00114         LOG_ERROR << {\cf22 "Error on select: "} << errno << {\cf22 " : "} << strerror(errno);\par
00115     \}\par
00116     {\cf19 else}\par
00117     \{\par
00118         {\cf18 string} buffer;\par
00119         sock->socket_read(buffer, 2048);{\cf20 //Read 1024 bytes of the answer}\par
00120         LOG_DEBUG << {\cf22 "Response: "} << buffer;\par
00121     \}\par
00122 \par
00123     LOG_DEBUG << {\cf22 "Ending CLIENT_main"};\par
00124     \par
00125     (void)signal(SIGINT, previousInterruptHandler_int);\par
00126     (void)signal(SIGUSR1, previousInterruptHandler_usr1);\par
00127     (void)signal(SIGTERM, previousInterruptHandler_term);\par
00128 \par
00129     {\cf19 return} 0;\par
00130 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/common.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/common.h}
{\xe \v src/common.h}
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "plog/Log.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b loglevel}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v loglevel\:common.h}
{\xe \v common.h\:loglevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int loglevel{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 6} of file {\b client_main.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
common.h\par \pard\plain 
{\tc\tcl2 \v src/common.h}
{\xe \v src/common.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef COMMON_H_}\par
00002 {\cf21 #define COMMON_H_}\par
00003 \par
00004 {\cf21 #include <iostream>}   \par
00005 {\cf21 #include "plog/Log.h"} \par
00006 \par
00007 {\cf21 #if !defined LOGLEVEL}\par
00008 {\cf17 extern} {\cf18 int} loglevel;\par
00009 {\cf21 #endif}\par
00010 \par
00011 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/connections.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/connections.cpp}
{\xe \v src/connections.cpp}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "connections.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
connections.cpp\par \pard\plain 
{\tc\tcl2 \v src/connections.cpp}
{\xe \v src/connections.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "connections.h"}\par
00002 \par
00003 connections::connections({\cf18 int} MaxConnections, {\cf18 int} NumThreads)\par
00004 \{\par
00005     LOG_DEBUG << {\cf22 "connections Ctor - Creating "} << NumThreads << {\cf22 " queues, "} << MaxConnections << {\cf22 " connections."};\par
00006     nThreads = NumThreads;\par
00007     MaxConn = MaxConnections;\par
00008 \par
00009     current_connections = {\cf17 reinterpret_cast<}connection *{\cf17 >}({\cf17 this}+1);\par
00010 \par
00011     memset(({\cf18 void} *)current_connections, 0, {\cf17 sizeof}(connection)*MaxConn);\par
00012 \par
00013     first_free = 0;\par
00014 \par
00015     {\cf19 for}({\cf18 int} i=0; i < MaxConn-1; i++) \{\par
00016       current_connections[i].next_info = i+1;\par
00017     \}\par
00018   \par
00019     current_connections[MaxConn-1].next_info = -1;\par
00020 \par
00021     initialized = {\cf17 true};\par
00022  \}\par
00023 \par
00024 {\cf18 void} connections::mark_obsolete({\cf18 int} idx)\par
00025 \{\par
00026   {\cf18 int} next,prev;\par
00027   {\cf18 int} ind;\par
00028 \par
00029   this->current_connections[idx].status = st_obsolete;\par
00030 \par
00031 \}\par
00032 \par
00033 {\cf18 void} connections::delete_obsolete({\cf18 int} idx) \par
00034 \{\par
00035   memset(&(current_connections[idx]), 0, {\cf17 sizeof}(connection));\par
00036   this->current_connections[idx].next_info = this->first_free;\par
00037   this->first_free = idx;\par
00038 \}\par
00039 \par
00040 {\cf18 int} connections::ending_operation({\cf18 int} idx, Semaphore &sem, connection &cur_conn)\par
00041 \{\par
00042   {\cf19 if}( idx < 0 || idx >= MaxConn)\par
00043     {\cf19 return} -1;\par
00044 \par
00045   sem.Lock();  \par
00046 \par
00047   cur_conn = this->current_connections[idx];\par
00048 \par
00049   {\cf19 if}( this->current_connections[idx].status != st_ready )\par
00050   \{\par
00051     sem.Unlock();\par
00052     {\cf19 return} -2;\par
00053   \}\par
00054 \par
00055   time( &(this->current_connections[idx].last_op));\par
00056   this->current_connections[idx].num_ops++;\par
00057 \par
00058   cur_conn = this->current_connections[idx];\par
00059 \par
00060   sem.Unlock();\par
00061 \par
00062   {\cf19 return} 0;\par
00063 \}\par
00064 \par
00065 {\cf18 int} connections::clean_repeated_ip(sockaddr_in *ppal, Semaphore &sem)\par
00066 \{\par
00067   {\cf18 int} nThread = -1;\par
00068 \par
00069   {\cf19 for}({\cf18 int} i=0; i < MaxConn-1; i++) \par
00070   \{\par
00071     {\cf19 switch}(current_connections[i].status) \par
00072     \{\par
00073       {\cf19 case} 2:   {\cf20 /* Sinchronized, lets see ... */}\par
00074       {\cf19 case} 1:   {\cf20 /* Not sinchronized, lets see ... */}\par
00075           {\cf19 if}((ppal->sin_addr.s_addr==current_connections[i].sockaddr.sin_addr.s_addr) && \par
00076              (ppal->sin_port==current_connections[i].sockaddr.sin_port)) \par
00077         \{\par
00078           sem.Lock();\par
00079           \par
00080           nThread = current_connections[i].nthread;\par
00081               mark_obsolete(i);\par
00082           \par
00083           sem.Unlock();             \par
00084           \}\par
00085           {\cf19 break};\par
00086       {\cf19 case} 3: {\cf20 /* ya marcado, pasar de el */}\par
00087       {\cf19 case} 0: {\cf20 /* vacio, pasar de el */}\par
00088       {\cf19 default}:\par
00089           {\cf19 break};\par
00090     \}\par
00091   \}\par
00092   {\cf19 return} nThread;\par
00093 \}\par
00094 \par
00095 {\cf18 int} connections::register_new_conn({\cf18 int} nthread, {\cf18 int} sd, sockaddr_in s_in, Semaphore &sem)\par
00096 \{\par
00097   {\cf18 int} idx = -1;\par
00098   \par
00099   sem.Lock();\par
00100 \par
00101   {\cf19 if}(first_free==-1) \par
00102   \{\par
00103     sem.Unlock();\par
00104     {\cf19 return} idx;  \par
00105   \}\par
00106 \par
00107   idx = first_free;\par
00108   first_free = current_connections[idx].next_info;\par
00109   \par
00110   memset(&current_connections[idx], 0, {\cf17 sizeof}(connection));\par
00111 \par
00112   current_connections[idx].status = st_ready;\par
00113   current_connections[idx].next_info = -1;\par
00114   current_connections[idx].nthread = nthread;\par
00115   current_connections[idx].sd = sd;\par
00116   memcpy(&(current_connections[idx].sockaddr), &s_in, {\cf17 sizeof}({\cf17 struct} sockaddr_in));\par
00117   time(&current_connections[idx].entry);\par
00118 \par
00119   sem.Unlock();\par
00120   {\cf19 return} idx;\par
00121 \}\par
00122 \par
00123 {\cf18 int} connections::check_obsolete({\cf18 int} idx_con, Semaphore &sem)\par
00124 \{\par
00125   {\cf19 if}( idx_con < 0 || idx_con >= MaxConn )\par
00126     {\cf19 return} -1;\par
00127 \par
00128   {\cf19 if}(current_connections[idx_con].status == st_obsolete ) \par
00129   \{\par
00130     sem.Lock();\par
00131 \par
00132     delete_obsolete(idx_con);\par
00133     \par
00134     sem.Unlock();\par
00135 \par
00136     {\cf19 return} 1;\par
00137   \}\par
00138 \par
00139   {\cf19 return} 0;\par
00140 \}\par
00141 \par
00142 \par
00143 {\cf18 int} connections::unregister_conn({\cf18 int} idx, Semaphore &sem)\par
00144 \{\par
00145   sem.Lock();\par
00146     \par
00147   {\cf19 if}(current_connections[idx].status == st_ready ) \{\par
00148       mark_obsolete(idx);\par
00149   \}\par
00150 \par
00151   delete_obsolete(idx);\par
00152 \par
00153   sem.Unlock();\par
00154 \par
00155   {\cf19 return} 1;\par
00156 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/connections.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/connections.h}
{\xe \v src/connections.h}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "common.h"}\par
{\f2 #include <sys/socket.h>}\par
{\f2 #include <netinet/in.h>}\par
{\f2 #include <string>}\par
{\f2 #include <algorithm>}\par
{\f2 #include "ipclib.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b connection}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b connections}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr int {\b st_free} \{0\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr int {\b st_ready} \{2\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr int {\b st_obsolete} \{3\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v st_free\:connections.h}
{\xe \v connections.h\:st_free}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int st_free \{0\}{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 11} of file {\b connections.h}.}\par
}
{\xe \v st_obsolete\:connections.h}
{\xe \v connections.h\:st_obsolete}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int st_obsolete \{3\}{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b connections.h}.}\par
}
{\xe \v st_ready\:connections.h}
{\xe \v connections.h\:st_ready}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int st_ready \{2\}{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b connections.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
connections.h\par \pard\plain 
{\tc\tcl2 \v src/connections.h}
{\xe \v src/connections.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef CONNECTIONS_H}\par
00002 {\cf21 #define CONNECTIONS_H}\par
00003 \par
00004 {\cf21 #include "common.h"}\par
00005 {\cf21 #include <sys/socket.h>}\par
00006 {\cf21 #include <netinet/in.h>}\par
00007 {\cf21 #include <string>}\par
00008 {\cf21 #include <algorithm>}\par
00009 {\cf21 #include "ipclib.h"}\par
00010 \par
00011 {\cf17 constexpr} {\cf18 int} st_free\{0\};\par
00012 {\cf17 constexpr} {\cf18 int} st_ready\{2\};\par
00013 {\cf17 constexpr} {\cf18 int} st_obsolete\{3\};\par
00017 {\cf17 struct }connection\{\par
00018     {\cf18 int} next_info\{0\};               {\cf20 // Next free connection}\par
00019     {\cf18 int} nthread\{0\};                 {\cf20 // idx of thread pair.}\par
00020     {\cf18 int} status\{st_free\};            {\cf20 // connection status }\par
00021     {\cf18 int} sd\{-1\};                     {\cf20 // Socket descriptor}\par
00022     sockaddr_in sockaddr\{\};         {\cf20 // IP:port info}\par
00023     time_t entry\{\};                 {\cf20 // time of 1st operation entry}\par
00024     time_t last_op\{\};               {\cf20 // time of last operation.}\par
00025     {\cf18 long} num_ops\{0\};                {\cf20 // Number of processed operations. }\par
00026 \};\par
00027 \par
00031 {\cf17 class }connections\{\par
00032     {\cf18 bool} initialized\{{\cf17 false}\};                {\cf20 // Is it initialized?}\par
00033     {\cf18 int} first_free\{0\};                      {\cf20 // First free connection entry. }\par
00034     {\cf18 int} nThreads\{0\};                        {\cf20 // Number of thread pairs running. }\par
00035     {\cf18 int} MaxConn\{0\};                         {\cf20 // Max number of connections. }\par
00036     connection *current_connections\{{\cf17 nullptr}\};   {\cf20 // Pointer to the connection array.}\par
00037 \par
00038 {\cf17 public}:\par
00045     connections({\cf18 int} MaxConnections, {\cf18 int} NumThreads);\par
00046     \par
00047     {\cf20 // Marks a connection as obsolete (st_obsolete=3) on the idx position of the connection array}\par
00048     {\cf18 void} mark_obsolete({\cf18 int} idx);\par
00049     \par
00050     {\cf20 // Marks a connection as free (st_obsolete=3) on the idx position of the connection array}\par
00051     {\cf18 void} delete_obsolete({\cf18 int} idx);\par
00052    \par
00059     {\cf18 int} clean_repeated_ip(sockaddr_in *ppal, Semaphore &sem);\par
00060    \par
00069     {\cf18 int} register_new_conn({\cf18 int} nthread, {\cf18 int} sd, sockaddr_in s_in, Semaphore &sem);\par
00070    \par
00077     {\cf18 int} unregister_conn({\cf18 int} idx, Semaphore &sem);\par
00078     \par
00086     {\cf18 int} ending_operation({\cf18 int} idx, Semaphore &sem, connection &cur_conn);\par
00087     \par
00094     {\cf18 int} check_obsolete({\cf18 int} idx_con, Semaphore &sem);\par
00095 \par
00096     {\cf18 bool} is_all_connections_done() \{ \par
00097         {\cf19 return} !std::any_of(&(current_connections[0]),&(current_connections[MaxConn-1]),[](connection c)\{{\cf19 return} c.status==st_ready;\} );\par
00098     \}\par
00099 \};\par
00100     \par
00101 \par
00102 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dispatch_cfg.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/dispatch_cfg.cpp}
{\xe \v src/dispatch_cfg.cpp}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "dispatch_cfg.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
dispatch_cfg.cpp\par \pard\plain 
{\tc\tcl2 \v src/dispatch_cfg.cpp}
{\xe \v src/dispatch_cfg.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "dispatch_cfg.h"}\par
00002 \par
00003 {\cf17 using namespace }std;\par
00004 \par
00005 {\cf18 void} all_dispatch_cfg::load_all_info()\par
00006 \{\par
00007     {\cf18 int} num_disp = getNumDispatchers();\par
00008     \par
00009     PLOG_DEBUG_IF(loglevel) << {\cf22 "Total dispatchers "} << num_disp;\par
00010 \par
00011     {\cf19 for}({\cf18 int} i=1; i < (num_disp+1); i++) \par
00012     \{\par
00013         std::string dispatchXX;\par
00014 \par
00015         {\cf19 if}(i<10)\par
00016             dispatchXX=string({\cf22 "dispatch0"}) + to_string(i);\par
00017         {\cf19 else}\par
00018             dispatchXX=string({\cf22 "dispatch"}) + to_string(i);\par
00019 \par
00020         {\cf17 auto} IP=getDispatcherXX_IP(dispatchXX.c_str());\par
00021         {\cf17 auto} Port=getDispatcherXX_Port(dispatchXX.c_str());\par
00022         {\cf17 auto} NumThreads=getDispatcherXX_NumThreads(dispatchXX.c_str());\par
00023         {\cf17 auto} TuxCliProg=getDispatcherXX_TuxCliProg(dispatchXX.c_str());\par
00024         {\cf17 auto} TuxCliSetup=getDispatcherXX_TuxCliSetup(dispatchXX.c_str());\par
00025         {\cf17 auto} LogLevel=getDispatcherXX_LogLevel(dispatchXX.c_str());\par
00026         {\cf17 auto} MaxConnections=getDispatcherXX_MaxConnections(dispatchXX.c_str());\par
00027         {\cf17 auto} StopTimeout=getDispatcherXX_StopTimeout(dispatchXX.c_str());\par
00028         {\cf17 auto} IpcFile=getDispatcherXX_IpcFile(dispatchXX.c_str());\par
00029         dispatch_cfg d=\{i,IP,Port,NumThreads,TuxCliProg,TuxCliSetup,LogLevel,MaxConnections,StopTimeout,IpcFile\};\par
00030         dispatchers_cfg.emplace_back(d);\par
00031         PLOG_DEBUG_IF(loglevel) << {\cf22 "Processed "} << num_disp; \par
00032         loaded={\cf17 true};\par
00033         NumDispatchers = i;\par
00034     \}\par
00035 \par
00036 \}\par
00037 \par
00038 {\cf18 void} all_dispatch_cfg::create_cfg_values({\cf18 string} file_dir)\par
00039 \{\par
00040     PLOG_DEBUG_IF(loglevel) << {\cf22 "Creating config file..."};\par
00041     _m_json.clear();\par
00042     {\cf17 const} std::string dispatch01\{{\cf22 "dispatch01"}\};\par
00043     {\cf20 //auto const dispatch01 = "dispatch01";}\par
00044 \par
00045     _m_json[FIELD_NOTE]    = {\cf22 "Default Configuration File (auto-created)"};\par
00046     _m_json[FIELD_VERSION] = CFGFILE_VERSION;\par
00047     _m_json[FIELD_NUMDISPATCHERS] = 1;\par
00048     _m_json[dispatch01.c_str()][FIELD_IP] = DEFAULT_IP;\par
00049     _m_json[dispatch01.c_str()][FIELD_PORT] = DEFAULT_PORT;\par
00050     _m_json[dispatch01.c_str()][FIELD_NUMTHREADS] = DEFAULT_NUMTHREADS;\par
00051     _m_json[dispatch01.c_str()][FIELD_TUXCLIPROG] = file_dir + DEFAULT_TUXCLIPROG;\par
00052     _m_json[dispatch01.c_str()][FIELD_TUXCLISETUP] = file_dir + DEFAULT_TUXCLISETUP;\par
00053     _m_json[dispatch01.c_str()][FIELD_LOGLEVEL] = plog::warning;\par
00054     _m_json[dispatch01.c_str()][FIELD_MAXCONN] = DEFAULT_MAXCONN;\par
00055     _m_json[dispatch01.c_str()][FIELD_STOPTIMEOUT] = DEFAULT_STOPTIMEOUT;             \par
00056     _m_json[dispatch01.c_str()][FIELD_IPCFILE] = file_dir + DEFAULT_IPCFILE + dispatch01;\par
00057 \}\par
00058 \par
00059 {\cf18 int} all_dispatch_cfg::getNumDispatchers(){\cf17  const}\par
00060 {\cf17 }\{\par
00061     {\cf19 return} _m_json[{\cf22 "2_NumDispatchers"}].asInt();\par
00062 \}\par
00063 \par
00064 {\cf17 const} {\cf18 char}* all_dispatch_cfg::getDispatcherXX_IP({\cf17 const} std::string dispatchXX){\cf17  const}\par
00065 {\cf17 }\{\par
00066     {\cf19 return} _m_json[dispatchXX][{\cf22 "IP"}].asCString();\par
00067 \}\par
00068 \par
00069 {\cf18 int} all_dispatch_cfg::getDispatcherXX_Port({\cf17 const} std::string dispatchXX){\cf17  const}\par
00070 {\cf17 }\{\par
00071     {\cf19 return} _m_json[dispatchXX][{\cf22 "Port"}].asInt();\par
00072 \}\par
00073 \par
00074 {\cf18 int} all_dispatch_cfg::getDispatcherXX_NumThreads({\cf17 const} std::string dispatchXX){\cf17  const}\par
00075 {\cf17 }\{\par
00076     {\cf19 return} _m_json[dispatchXX][{\cf22 "NumThreads"}].asInt();\par
00077 \}\par
00078 \par
00079 {\cf17 const} {\cf18 char}* all_dispatch_cfg::getDispatcherXX_TuxCliProg({\cf17 const} std::string dispatchXX){\cf17  const}\par
00080 {\cf17 }\{\par
00081     {\cf19 return} _m_json[dispatchXX][{\cf22 "TuxCliProg"}].asCString();\par
00082 \}\par
00083 \par
00084 {\cf17 const} {\cf18 char}* all_dispatch_cfg::getDispatcherXX_TuxCliSetup({\cf17 const} std::string dispatchXX){\cf17  const}\par
00085 {\cf17 }\{\par
00086     {\cf19 return} _m_json[dispatchXX][{\cf22 "TuxCliSetup"}].asCString();\par
00087 \}\par
00088 \par
00089 {\cf18 int} all_dispatch_cfg::getDispatcherXX_LogLevel({\cf17 const} std::string dispatchXX){\cf17  const}\par
00090 {\cf17 }\{\par
00091     {\cf19 return} _m_json[dispatchXX][{\cf22 "LogLevel"}].asInt();\par
00092 \}\par
00093 \par
00094 {\cf18 int} all_dispatch_cfg::getDispatcherXX_MaxConnections({\cf17 const} std::string dispatchXX){\cf17  const}\par
00095 {\cf17 }\{\par
00096     {\cf19 return} _m_json[dispatchXX][{\cf22 "MaxConnections"}].asInt();\par
00097 \}\par
00098 \par
00099 {\cf18 int} all_dispatch_cfg::getDispatcherXX_StopTimeout({\cf17 const} std::string dispatchXX){\cf17  const}\par
00100 {\cf17 }\{\par
00101     {\cf19 return} _m_json[dispatchXX][{\cf22 "StopTimeout"}].asInt();\par
00102 \}\par
00103 \par
00104 {\cf17 const} {\cf18 char}* all_dispatch_cfg::getDispatcherXX_IpcFile({\cf17 const} std::string dispatchXX){\cf17  const}\par
00105 {\cf17 }\{\par
00106     {\cf19 return} _m_json[dispatchXX][{\cf22 "IpcFile"}].asCString();\par
00107 \}\par
00108 \par
00109 {\cf18 void} all_dispatch_cfg::show_all_config()\par
00110 \{\par
00111     PLOG_DEBUG  << {\cf22 "----------------------------------------------------------"};\par
00112     PLOG_DEBUG  << {\cf22 "CONFIG FILE: "};\par
00113     {\cf19 for}({\cf17 auto} v : dispatchers_cfg)\par
00114     \{\par
00115         PLOG_DEBUG  << v;\par
00116     \}\par
00117     PLOG_DEBUG  << {\cf22 "----------------------------------------------------------"};\par
00118 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dispatch_cfg.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/dispatch_cfg.h}
{\xe \v src/dispatch_cfg.h}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "common.h"}\par
{\f2 #include <vector>}\par
{\f2 #include <json/json.h>}\par
{\f2 #include <json/value.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b dispatch_cfg}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b all_dispatch_cfg}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_IP} = "127.0.0.1"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_PORT} = 9000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_NUMTHREADS} = 20\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_TUXCLIPROG} = "/TuxCliProg"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_TUXCLISETUP} = "/TuxCliSetup"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_MAXCONN} = 1500\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_STOPTIMEOUT} = 30\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b DEFAULT_IPCFILE} = "/ipcfile_"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_NOTE} = "1_Note"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_VERSION} = "1_Version"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_NUMDISPATCHERS} = "2_NumDispatchers"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_IP} = "IP"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_PORT} = "Port"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_NUMTHREADS} = "NumThreads"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_TUXCLIPROG} = "TuxCliProg"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_TUXCLISETUP} = "TuxCliSetup"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_LOGLEVEL} = "LogLevel"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_MAXCONN} = "MaxConnections"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_STOPTIMEOUT} = "StopTimeout"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b FIELD_IPCFILE} = "IpcFile"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b CFGFILE_VERSION} = 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v CFGFILE_VERSION\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:CFGFILE_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int CFGFILE_VERSION = 1{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 32} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_IP\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_IP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_IP = "127.0.0.1"s}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 10} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_IPCFILE\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_IPCFILE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_IPCFILE = "/ipcfile_"s}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_MAXCONN\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_MAXCONN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_MAXCONN = 1500}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 15} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_NUMTHREADS\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_NUMTHREADS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_NUMTHREADS = 20}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_PORT\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_PORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_PORT = 9000}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 11} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_STOPTIMEOUT\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_STOPTIMEOUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_STOPTIMEOUT = 30}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 16} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_TUXCLIPROG\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_TUXCLIPROG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_TUXCLIPROG = "/TuxCliProg"s}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v DEFAULT_TUXCLISETUP\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:DEFAULT_TUXCLISETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const DEFAULT_TUXCLISETUP = "/TuxCliSetup"s}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 14} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_IP\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_IP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_IP = "IP"s}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 22} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_IPCFILE\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_IPCFILE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_IPCFILE = "IpcFile"s}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 30} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_LOGLEVEL\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_LOGLEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_LOGLEVEL = "LogLevel"s}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 27} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_MAXCONN\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_MAXCONN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_MAXCONN = "MaxConnections"s}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 28} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_NOTE\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_NOTE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_NOTE = "1_Note"s}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_NUMDISPATCHERS\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_NUMDISPATCHERS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_NUMDISPATCHERS = "2_NumDispatchers"s}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_NUMTHREADS\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_NUMTHREADS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_NUMTHREADS = "NumThreads"s}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 24} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_PORT\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_PORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_PORT = "Port"s}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_STOPTIMEOUT\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_STOPTIMEOUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_STOPTIMEOUT = "StopTimeout"s}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 29} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_TUXCLIPROG\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_TUXCLIPROG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_TUXCLIPROG = "TuxCliProg"s}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_TUXCLISETUP\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_TUXCLISETUP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_TUXCLISETUP = "TuxCliSetup"s}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 26} of file {\b dispatch_cfg.h}.}\par
}
{\xe \v FIELD_VERSION\:dispatch_cfg.h}
{\xe \v dispatch_cfg.h\:FIELD_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const FIELD_VERSION = "1_Version"s}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 20} of file {\b dispatch_cfg.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
dispatch_cfg.h\par \pard\plain 
{\tc\tcl2 \v src/dispatch_cfg.h}
{\xe \v src/dispatch_cfg.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef DISPATCH_CFG_H}\par
00002 {\cf21 #define DISPATCH_CFG_H}\par
00003 \par
00004 {\cf21 #include "common.h"}\par
00005 {\cf21 #include <vector>}\par
00006 {\cf21 #include <json/json.h>}\par
00007 {\cf21 #include <json/value.h>}\par
00008 \par
00009 {\cf17 using namespace }std::string_literals;\par
00010 {\cf17 auto} {\cf17 const} DEFAULT_IP = {\cf22 "127.0.0.1"}s;\par
00011 {\cf17 auto} {\cf17 const} DEFAULT_PORT = 9000; \par
00012 {\cf17 auto} {\cf17 const} DEFAULT_NUMTHREADS = 20;\par
00013 {\cf17 auto} {\cf17 const} DEFAULT_TUXCLIPROG = {\cf22 "/TuxCliProg"}s;\par
00014 {\cf17 auto} {\cf17 const} DEFAULT_TUXCLISETUP = {\cf22 "/TuxCliSetup"}s;\par
00015 {\cf17 auto} {\cf17 const} DEFAULT_MAXCONN = 1500;\par
00016 {\cf17 auto} {\cf17 const} DEFAULT_STOPTIMEOUT = 30;\par
00017 {\cf17 auto} {\cf17 const} DEFAULT_IPCFILE = {\cf22 "/ipcfile_"}s;\par
00018 \par
00019 {\cf17 auto} {\cf17 const} FIELD_NOTE = {\cf22 "1_Note"}s;\par
00020 {\cf17 auto} {\cf17 const} FIELD_VERSION = {\cf22 "1_Version"}s;\par
00021 {\cf17 auto} {\cf17 const} FIELD_NUMDISPATCHERS = {\cf22 "2_NumDispatchers"}s;\par
00022 {\cf17 auto} {\cf17 const} FIELD_IP = {\cf22 "IP"}s;\par
00023 {\cf17 auto} {\cf17 const} FIELD_PORT = {\cf22 "Port"}s;\par
00024 {\cf17 auto} {\cf17 const} FIELD_NUMTHREADS = {\cf22 "NumThreads"}s;\par
00025 {\cf17 auto} {\cf17 const} FIELD_TUXCLIPROG = {\cf22 "TuxCliProg"}s;\par
00026 {\cf17 auto} {\cf17 const} FIELD_TUXCLISETUP = {\cf22 "TuxCliSetup"}s;\par
00027 {\cf17 auto} {\cf17 const} FIELD_LOGLEVEL = {\cf22 "LogLevel"}s;\par
00028 {\cf17 auto} {\cf17 const} FIELD_MAXCONN = {\cf22 "MaxConnections"}s;\par
00029 {\cf17 auto} {\cf17 const} FIELD_STOPTIMEOUT = {\cf22 "StopTimeout"}s;\par
00030 {\cf17 auto} {\cf17 const} FIELD_IPCFILE = {\cf22 "IpcFile"}s;\par
00031 \par
00032 {\cf17 static} {\cf17 constexpr} {\cf18 int} CFGFILE_VERSION = 1;\par
00033 \par
00037 {\cf17 struct }dispatch_cfg \{\par
00038     {\cf18 int} NumDispatch;                {\cf20 // Number of dispatcher}\par
00039     std::string IP;                 {\cf20 // IP of dispatcher}\par
00040     {\cf18 int} Port;                       {\cf20 // Port of dispatcher}\par
00041     {\cf18 int} NumThreads;                 {\cf20 // Number of threads pair to run concurrently}\par
00042     std::string TuxCliProg;         {\cf20 // Transactional Client program.}\par
00043     std::string TuxCliSetup;        {\cf20 // Transactional Client configuration file. }\par
00044     {\cf18 int} LogLevel;                   {\cf20 // Level of log.}\par
00045     {\cf18 int} MaxConnections;             {\cf20 // Number of max connections.}\par
00046     {\cf18 int} StopTimeout;                {\cf20 // Wait until there are no st_ready running on connection array. }\par
00047     std::string IpcFile;            {\cf20 // IPC file path for this dispatcher.}\par
00048 \par
00049     {\cf17 friend} std::ostream& operator<<( std::ostream& os, {\cf17 const} dispatch_cfg& v )\par
00050     \{\par
00051         os << v.NumDispatch << {\cf22 ":"} << v.IP << {\cf22 ":"} << v.Port << {\cf22 ":"} << v.NumThreads << {\cf22 ":"} << v.TuxCliProg << {\cf22 ":"} << \\\par
00052             v.TuxCliSetup << {\cf22 ":"} << v.LogLevel << {\cf22 ":"} << v.MaxConnections << {\cf22 ":"} << v.StopTimeout << {\cf22 ":"} << v.IpcFile;\par
00053         {\cf19 return} os;\par
00054     \}\par
00055 \};\par
00056 \par
00060 {\cf17 class }all_dispatch_cfg final\par
00061 \{\par
00062     Json::Value _m_json;\par
00063     {\cf18 int} NumDispatchers\{0\};                              {\cf20 // Number of Dispatchers}\par
00064     std::vector<dispatch_cfg> dispatchers_cfg;          {\cf20 // Vector of all configuration dispatcher}\par
00065     {\cf18 bool} loaded\{{\cf17 false}\};                                 {\cf20 // true=loaded false=not loaded}\par
00066     {\cf18 int}         getNumDispatchers() {\cf17 const};\par
00067     {\cf17 const} {\cf18 char}* getDispatcherXX_IP({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00068     {\cf18 int}         getDispatcherXX_Port({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00069     {\cf18 int}         getDispatcherXX_NumThreads({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00070     {\cf17 const} {\cf18 char}* getDispatcherXX_TuxCliProg({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00071     {\cf17 const} {\cf18 char}* getDispatcherXX_TuxCliSetup({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00072     {\cf18 int}         getDispatcherXX_LogLevel({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00073     {\cf18 int}         getDispatcherXX_MaxConnections({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00074     {\cf18 int}         getDispatcherXX_StopTimeout({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00075     {\cf17 const} {\cf18 char}* getDispatcherXX_IpcFile({\cf17 const} std::string dispatchXX) {\cf17 const};\par
00076     \par
00077 {\cf17 public}:\par
00078     all_dispatch_cfg() = {\cf17 delete};\par
00079     {\cf17 explicit} all_dispatch_cfg({\cf17 const} Json::Value json):_m_json\{json\}\{ load_all_info();\}\par
00080     all_dispatch_cfg(all_dispatch_cfg {\cf17 const} &) = {\cf17 delete};\par
00081     all_dispatch_cfg(all_dispatch_cfg &&) = {\cf17 delete};\par
00082     all_dispatch_cfg& operator=(all_dispatch_cfg {\cf17 const} &) = {\cf17 delete};\par
00083     all_dispatch_cfg& operator=(all_dispatch_cfg &&) = {\cf17 delete};\par
00084     ~all_dispatch_cfg() = {\cf19 default};\par
00085     \par
00086     {\cf20 // Gets all json values}\par
00087     {\cf17 const} Json::Value &get_json(){\cf17  const }\{ {\cf19 return} _m_json;\}\par
00088     {\cf20 // Load all configuration file}\par
00089     {\cf18 void} load_all_info();\par
00090     {\cf20 // Creates a default dispatcher configuration file }\par
00091     {\cf18 void} create_cfg_values(std::string file_dir);\par
00092     {\cf20 // Returns true if configuration file is correctly loaded, false otherwise. }\par
00093     {\cf17 operator} bool(){\cf17  const }\{{\cf19 return} loaded == {\cf17 true};\}\par
00094     {\cf20 // Log all configuration file }\par
00095     {\cf18 void} show_all_config();\par
00096     {\cf20 // Gets number of dispatchers loaded on configuration file}\par
00097     {\cf18 int} get_num_dispatchers(){\cf17  const }\{ {\cf19 return} NumDispatchers;\}\par
00098     {\cf20 // Gets dispatch_cfg struct vector. }\par
00099     std::vector<dispatch_cfg> &get_all_dispatch_info()\{ {\cf19 return} dispatchers_cfg;\}\par
00100 \};\par
00101 \par
00102 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dispatch_main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/dispatch_main.cpp}
{\xe \v src/dispatch_main.cpp}
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "common.h"}\par
{\f2 #include "ipclib.h"}\par
{\f2 #include "getcfgfile.h"}\par
{\f2 #include "dispatch_cfg.h"}\par
{\f2 #include "dispatcher.h"}\par
{\f2 #include "checker_pids.h"}\par
{\f2 #include "Socket.h"}\par
{\f2 #include "plog/Initializers/RollingFileInitializer.h"}\par
{\f2 #include "plog/Initializers/ConsoleInitializer.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b LOGLEVEL}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b RunOnBackground} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sigsegv_func} (int s)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b loglevel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto const {\b CFGFILE_PATH} = getpwuid(getuid()) -> pw_dir + "/.dispatch/config.json"s\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
sighandler_t {\b _previousInterruptHandler_sigsegv}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v LOGLEVEL\:dispatch_main.cpp}
{\xe \v dispatch_main.cpp\:LOGLEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define LOGLEVEL}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b dispatch_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:dispatch_main.cpp}
{\xe \v dispatch_main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b dispatch_main.cpp}.}\par
}
{\xe \v RunOnBackground\:dispatch_main.cpp}
{\xe \v dispatch_main.cpp\:RunOnBackground}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int RunOnBackground ()}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b dispatch_main.cpp}.}\par
}
{\xe \v sigsegv_func\:dispatch_main.cpp}
{\xe \v dispatch_main.cpp\:sigsegv_func}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sigsegv_func (int  {\i s})}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 47} of file {\b dispatch_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v _previousInterruptHandler_sigsegv\:dispatch_main.cpp}
{\xe \v dispatch_main.cpp\:_previousInterruptHandler_sigsegv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
sighandler_t _previousInterruptHandler_sigsegv}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b dispatch_main.cpp}.}\par
}
{\xe \v CFGFILE_PATH\:dispatch_main.cpp}
{\xe \v dispatch_main.cpp\:CFGFILE_PATH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto const CFGFILE_PATH = getpwuid(getuid()) -> pw_dir + "/.dispatch/config.json"s}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 42} of file {\b dispatch_main.cpp}.}\par
}
{\xe \v loglevel\:dispatch_main.cpp}
{\xe \v dispatch_main.cpp\:loglevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int loglevel}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 6} of file {\b dispatch_main.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
dispatch_main.cpp\par \pard\plain 
{\tc\tcl2 \v src/dispatch_main.cpp}
{\xe \v src/dispatch_main.cpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /***************************************}\par
00002 {\cf20  * GLOBAL VARS - IN COMMON.H}\par
00003 {\cf20  ***************************************/}\par
00004 {\cf21 #if !defined LOGLEVEL}\par
00005 {\cf21 #define LOGLEVEL}\par
00006 {\cf18 int} loglevel;\par
00007 {\cf21 #endif}\par
00008 \par
00009 {\cf21 #include "common.h"}\par
00010 {\cf21 #include "ipclib.h"}\par
00011 {\cf21 #include "getcfgfile.h"}\par
00012 {\cf21 #include "dispatch_cfg.h"}\par
00013 {\cf21 #include "dispatcher.h"}\par
00014 {\cf21 #include "checker_pids.h"}\par
00015 {\cf21 #include "Socket.h"}\par
00016 {\cf21 #include "plog/Initializers/RollingFileInitializer.h"}\par
00017 {\cf21 #include "plog/Initializers/ConsoleInitializer.h"}\par
00018 \par
00019 {\cf17 using namespace }std;\par
00020 \par
00021 {\cf18 int} RunOnBackground() \par
00022 \{\par
00023     {\cf19 if} (getppid() != 1)     {\cf20 /* parent != init */}\par
00024     \{ \par
00025         setsid();\par
00026         {\cf19 switch}(fork()) \par
00027         \{\par
00028             {\cf19 case} 0:\par
00029                 close(STDIN_FILENO);   \par
00030                 {\cf19 return} 0;\par
00031             {\cf19 case} -1:\par
00032                 LOG_ERROR << {\cf22 "fork background: "} << strerror(errno);\par
00033                 {\cf19 return} -1;\par
00034             {\cf19 default}:\par
00035                 exit(0);\par
00036         \}\par
00037     \}\par
00038     {\cf19 return} 0;\par
00039 \}\par
00040 \par
00041 {\cf17 using namespace }std::string_literals;\par
00042 {\cf17 auto} {\cf17 const} CFGFILE_PATH = getpwuid(getuid()) -> pw_dir + {\cf22 "/.dispatch/config.json"}s;\par
00043 \par
00044 \par
00045 {\cf20 // It helps to realize about COREDUMPS}\par
00046 sighandler_t _previousInterruptHandler_sigsegv;\par
00047 {\cf18 void} sigsegv_func({\cf18 int} s) \par
00048 \{\par
00049     LOG_DEBUG << {\cf22 "Received signal "} << s << {\cf22 " : "} << strsignal(s) << {\cf22 " ERROR: "} << strerror(errno);\par
00050     (void)signal(SIGSEGV, _previousInterruptHandler_sigsegv);\par
00051 \}\par
00052 \par
00053 {\cf18 int} main()\par
00054 \{\par
00055     {\cf18 int} ret;\par
00056     {\cf20 // TO DO }\par
00057     {\cf20 // Get level of log from file config. Now it is only DEBUG.}\par
00058     {\cf17 static} plog::ConsoleAppender<plog::TxtFormatter> consoleAppender;\par
00059     loglevel=plog::verbose;\par
00060     plog::init(plog::verbose, &consoleAppender);\par
00061 \par
00062     _previousInterruptHandler_sigsegv = signal(SIGSEGV, sigsegv_func);\par
00063 \par
00064     GetCfgFile f_config(CFGFILE_PATH,{\cf17 true});  {\cf20 // Create directory if it doesn't exist.}\par
00065 \par
00066     all_dispatch_cfg cfg(f_config.get_json());\par
00067 \par
00068     {\cf20 // Error reading config file or bad json format}\par
00069     {\cf19 if}(!f_config || !cfg)\par
00070     \{\par
00071         cfg.create_cfg_values(f_config.get_file_dir());\par
00072         f_config.save_cfg_file(cfg.get_json());\par
00073         cfg.load_all_info();\par
00074     \}\par
00075     \par
00076     cfg.show_all_config();\par
00077 \par
00078     {\cf19 if}( RunOnBackground() < 0 )\par
00079     \{\par
00080         LOG_ERROR << {\cf22 "Can not run on background!"};\par
00081         {\cf19 return} -1;\par
00082     \}\par
00083 \par
00084     LOG_DEBUG << {\cf22 "Running on background, parent pid = "} << getppid();\par
00085 \par
00086     {\cf20 // Object that perform fork for each functor on its vector. }\par
00087     {\cf17 auto} checking_pids = make_shared<checker_pids>();\par
00088 \par
00089     {\cf20 // Config every dispatcher:}\par
00090 \par
00091     vector<Dispatcher> v_dispatchers;\par
00092 \par
00093     v_dispatchers.reserve(cfg.get_num_dispatchers());\par
00094 \par
00095  \par
00096     {\cf19 for}({\cf17 auto} &config : cfg.get_all_dispatch_info())\par
00097     \{\par
00098        v_dispatchers.emplace_back(config,checking_pids->get_run_flags());\par
00099     \}\par
00100 \par
00101     LOG_DEBUG << {\cf22 "Dispatcher vector ok! Prepare checker_pids..."};\par
00102 \par
00103     {\cf20 // Prepare for fork() and checking}\par
00104 \par
00105     {\cf19 for}({\cf17 auto} &dispat : v_dispatchers)\par
00106     \{\par
00107         checking_pids->add(dispat,{\cf22 "Dispatcher"});\par
00108     \}\par
00109 \par
00110     {\cf20 // Launching all dispatchers...     }\par
00111 \par
00112     ret=checking_pids->operator()();\par
00113 \par
00114 \par
00115     LOG_DEBUG << {\cf22 "Ending process main "} << ret;\par
00116 \par
00117     {\cf19 return} ret;\par
00118 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dispatcher.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/dispatcher.cpp}
{\xe \v src/dispatcher.cpp}
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "dispatcher.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
dispatcher.cpp\par \pard\plain 
{\tc\tcl2 \v src/dispatcher.cpp}
{\xe \v src/dispatcher.cpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "dispatcher.h"}\par
00002 \par
00003 Dispatcher::Dispatcher(dispatch_cfg cfg, std::shared_ptr<keep_running_flags> shpt_keep_running)\par
00004         :_config\{cfg\},\par
00005         _sharedptr_keep_running\{shpt_keep_running\}\par
00006 \{\par
00007     LOG_DEBUG << {\cf22 "CTOR: "} << {\cf17 this};\par
00008 \}\par
00009 {\cf20 /*}\par
00010 {\cf20 void Dispatcher::Show_All_Shared_Ptr()}\par
00011 {\cf20 \{}\par
00012 {\cf20     LOG_DEBUG << "Address: " << this;}\par
00013 {\cf20     LOG_DEBUG << "std::shared_ptr<keep_running_flags>:" << _sharedptr_keep_running.use_count();}\par
00014 {\cf20     LOG_DEBUG << "std::shared_ptr<Semaphore>:" << _shpt_semIPCfile.use_count();}\par
00015 {\cf20     LOG_DEBUG << "std::shared_ptr<SharedMemory>:" << _shpt_shmIPCfile.use_count();}\par
00016 {\cf20     LOG_DEBUG << "std::shared_ptr<connections>:" << _p_cur_connections.use_count();}\par
00017 {\cf20     LOG_DEBUG << "std::shared_ptr<MessageQueue>:" << _shpt_Common_Msg_Queue.use_count();}\par
00018 {\cf20     LOG_DEBUG << "std::shared_ptr<SharedMemory>:" << _shpt_shmAllowedIPs.use_count();}\par
00019 {\cf20     LOG_DEBUG << "std::shared_ptr<signal_synch>:" << _shpt_sigsyn.use_count();}\par
00020 {\cf20 \}}\par
00021 {\cf20 */}\par
00022 \par
00023 Dispatcher::~Dispatcher()\par
00024 \{ \par
00025     LOG_DEBUG << {\cf22 "DTOR: "} << {\cf17 this};\par
00026 \}\par
00027 \par
00028 {\cf18 void} Dispatcher::Launch_All_Threads()\par
00029 \{\par
00030     _v_thread_pair.reserve(_config.NumThreads);\par
00031     \par
00032     {\cf19 for}({\cf18 int} i=0; i<_config.NumThreads; i++) \{\par
00033         _v_thread_pair.emplace_back(_msg_queues[i], *_shpt_Common_Msg_Queue, i+1, \par
00034         _sharedptr_keep_running, _p_cur_connections, {\cf20 //_shpt_sigsyn, }\par
00035         _shpt_semIPCfile);\par
00036     \}\par
00037 \par
00038     LOG_DEBUG << {\cf22 "All Threads launched!! ---------------------------"};\par
00039 \}\par
00040 \par
00041 {\cf18 void} Dispatcher::Prepare_Server_Socket()\par
00042 \{\par
00043     {\cf20 //AF_INET (Internet mode) SOCK_STREAM (TCP mode) 0 (Protocol any)}\par
00044     _server_socket = Socket(AF_INET,SOCK_STREAM,0); \par
00045 \par
00046     {\cf20 //You can reuse the address and the port}\par
00047     {\cf18 int} optVal = 1;\par
00048     _server_socket.socket_set_opt(SOL_SOCKET, SO_REUSEADDR, &optVal); \par
00049     \par
00050     {\cf20 //Bind socket }\par
00051     _server_socket.bind(_config.IP, std::to_string(_config.Port)); \par
00052 \par
00053     {\cf20 //Start listening for incoming connections (10 => maximum of 10 Connections in Queue)}\par
00054     _server_socket.listen(10); \par
00055 \}\par
00056 \par
00057 {\cf20 // Discarted by the moment.}\par
00058 {\cf20 /*}\par
00059 {\cf20 void Dispatcher::Signal_Handler_For_Threads()}\par
00060 {\cf20 \{}\par
00061 {\cf20     //_shpt_sigsyn = std::make_shared<signal_synch>();}\par
00062 {\cf20 }\par
00063 {\cf20     sigemptyset(&_shpt_sigsyn->_sigset_new);}\par
00064 {\cf20     sigaddset(&_shpt_sigsyn->_sigset_new, SIGINT);}\par
00065 {\cf20     sigaddset(&_shpt_sigsyn->_sigset_new, SIGUSR1);}\par
00066 {\cf20     sigaddset(&_shpt_sigsyn->_sigset_new, SIGTERM);}\par
00067 {\cf20     pthread_sigmask(SIG_BLOCK, &_shpt_sigsyn->_sigset_new, &_shpt_sigsyn->_sigset_old);}\par
00068 {\cf20 }\par
00069 {\cf20     auto signal_handler = [this]() }\par
00070 {\cf20     \{}\par
00071 {\cf20         int signum = 0;}\par
00072 {\cf20         // wait until a signal is delivered:}\par
00073 {\cf20         LOG_DEBUG << "LAMBDA signal_handler" << std::endl;}\par
00074 {\cf20         sigwait(&_shpt_sigsyn->_sigset_new, &signum);}\par
00075 {\cf20         _sharedptr_keep_running->_keep_accepting.store(false);}\par
00076 {\cf20         _sharedptr_keep_running->_keep_working.store(false);}\par
00077 {\cf20         LOG_DEBUG << "signal_handler WEAK-UP - before notify_all" << std::endl;}\par
00078 {\cf20         // notify all waiting workers to check their predicate:}\par
00079 {\cf20         pthread_sigmask(SIG_SETMASK, &_shpt_sigsyn->_sigset_old, nullptr);}\par
00080 {\cf20         _shpt_sigsyn->_cv.notify_all();}\par
00081 {\cf20         return signum;}\par
00082 {\cf20     \};}\par
00083 {\cf20 }\par
00084 {\cf20     _shpt_sigsyn->_ft_signal_handler = std::async(std::launch::async, signal_handler);}\par
00085 {\cf20 \}}\par
00086 {\cf20 */} \par
00087 \par
00088 {\cf18 int} Dispatcher::Accept_by_Select()\par
00089 \{\par
00090     {\cf18 int} nfound;\par
00091     fd_set readfds;\par
00092 \par
00093     FD_ZERO(&readfds);\par
00094     {\cf18 int} n_sock_sel = 0;\par
00095       \par
00096     FD_SET(_server_socket.sock, &readfds);                \par
00097     n_sock_sel=(n_sock_sel>_server_socket.sock)? n_sock_sel : _server_socket.sock+1;\par
00098 \par
00099     if ((nfound = select(n_sock_sel,&readfds,0,0,0)) == -1) \par
00100     \{\par
00101         LOG_ERROR << {\cf22 "select failed!!"} << strerror(errno);\par
00102         {\cf19 return} 0;\par
00103     \}\par
00104     {\cf19 else} \{\par
00105         {\cf19 if} (FD_ISSET(_server_socket.sock,&readfds)) \par
00106         \{\par
00107             LOG_DEBUG << {\cf22 "New connection..."};\par
00108             {\cf19 return} 1;\par
00109         \}\par
00110     \}\par
00111     {\cf19 return} 0;\par
00112 \}\par
00113 \par
00114 {\cf18 int} Dispatcher::Accept_Thread()\par
00115 \{\par
00116     {\cf20 // Only father (checker_pids) can delete IPCS.}\par
00117 \par
00118     _shpt_shmIPCfile->DisableDelete();\par
00119     _shpt_semIPCfile->DisableDelete();\par
00120     _shpt_Common_Msg_Queue->DisableDelete();\par
00121     _shpt_shmAllowedIPs->DisableDelete();\par
00122 \par
00123     {\cf20 // Signal_Handler_For_Threads();}\par
00124 \par
00125     Launch_All_Threads();\par
00126 \par
00127     Prepare_Server_Socket();\par
00128     \par
00129     {\cf19 while}(_sharedptr_keep_running->_keep_accepting.load()) \par
00130     \{\par
00131 \par
00132         {\cf19 if}(Accept_by_Select()==0) {\cf20 // timeout or signal -> Check _keep_accepting...}\par
00133             {\cf19 continue};\par
00134 \par
00135         {\cf20 // Accept the incoming connection and creates a new Socket to the client}\par
00136         Socket newSocket = _server_socket.accept(); \par
00137         \par
00138         {\cf20 // Checks if IP is in Table.}\par
00139 \par
00140         {\cf20 // TO DO...}\par
00141 \par
00142 \par
00143         {\cf20 // Get all socket_data_t info:}\par
00144 \par
00145         socket_data_t sd_info;\par
00146         sd_info.sd = newSocket.sock;\par
00147         memcpy(&sd_info.sockaddr, newSocket.address_info.ai_addr,{\cf17 sizeof}({\cf17 struct} sockaddr_in));\par
00148 \par
00149         LOG_DEBUG << {\cf22 "Socket sd: "} << sd_info.sd << {\cf22 " IP:Port: "} << \par
00150                inet_ntoa(sd_info.sockaddr.sin_addr) << {\cf22 ":"} << ntohs(sd_info.sockaddr.sin_port);\par
00151 \par
00152         {\cf20 // Clean possible obsoletes.}\par
00153 \par
00154         {\cf18 int} nthread = _p_cur_connections->clean_repeated_ip(&sd_info.sockaddr, *_shpt_semIPCfile);\par
00155 \par
00156         {\cf20 // It currently exists, remove it. }\par
00157         {\cf19 if}(nthread >= 0)\par
00158         \{\par
00159             LOG_DEBUG << {\cf22 "Exists, then write to pipe for Reader Thread to remove it."}; \par
00160             {\cf20 // Send notification to pipe }\par
00161             write(_v_thread_pair[nthread].get_write_pipe(), {\cf17 static_cast<}{\cf17 const }{\cf18 void} *{\cf17 >}(protopipe::WEAKUP_PIPE), protopipe::LEN_PIPEMSG);\par
00162         \}\par
00163 \par
00164         {\cf20 // Get less charged.}\par
00165         {\cf18 int} th_id = LessCharged();\par
00166 \par
00167         LOG_DEBUG << {\cf22 "LessCharged: "} << th_id;\par
00168 \par
00169         {\cf19 if} ((sd_info.idx_con = _p_cur_connections->register_new_conn(th_id, sd_info.sd, sd_info.sockaddr, *_shpt_semIPCfile)) < 0)\par
00170         \{\par
00171             LOG_DEBUG << {\cf22 "Not possible to register_new_conn: "} << th_id;\par
00172             close(sd_info.sd);\par
00173             {\cf19 if}(sd_info.idx_con >= 0)\par
00174                 _p_cur_connections->unregister_conn(sd_info.idx_con, *_shpt_semIPCfile);\par
00175             {\cf19 continue};\par
00176         \}   \par
00177 \par
00178         {\cf20 // Assign sd to thread_pair...}\par
00179         {\cf19 if}(Assign_connection_to_thread_pair(th_id, &sd_info) < 0)\par
00180         \{\par
00181             LOG_DEBUG << {\cf22 "Not possible to Assign_connection_to_thread_pair: "} << th_id;\par
00182             close(sd_info.sd);\par
00183             {\cf19 if}(sd_info.idx_con >= 0)\par
00184                 _p_cur_connections->unregister_conn(sd_info.idx_con, *_shpt_semIPCfile);\par
00185         \}\par
00186         LOG_DEBUG << {\cf22 "End while, accepting again."};\par
00187     \}\par
00188 \par
00189     LOG_DEBUG << {\cf22 "Ending all reader and writer threads."};\par
00190 \par
00191 \par
00192     {\cf20 // wait for signal handler to complete}\par
00193     {\cf20 // int signal = _shpt_sigsyn->_ft_signal_handler.get();}\par
00194     {\cf20 // LOG_DEBUG << "ok   - RECEIVED SIGNAL FROM FUTURE _ft_signal_handler: " << signal << std::endl;}\par
00195 \par
00196     _server_socket.close();\par
00197 \par
00198     Ending_all_threads();\par
00199     {\cf19 return} 0;\par
00200 \}\par
00201 \par
00202 {\cf18 void} Dispatcher::Ending_all_threads()\par
00203 \{\par
00204     protomsg::st_protomsg v_protomsg;\par
00205     std::string st_end({\cf22 "1"});\par
00206     \par
00207     v_protomsg.mtype = protomsg::TYPE_ENDING_MSG;\par
00208 \par
00209     {\cf20 // STEP 1 - No accepting more connections and not reading more input messages (AcceptThread & Reader_Thread)}\par
00210     {\cf20 // _keep_accepting is currently FALSE because of signal. }\par
00211     {\cf19 for}({\cf17 auto} &tp : _v_thread_pair)\par
00212     \{\par
00213         {\cf20 // Send ENDING to pipe - for Reader_Threads to weakup and die. }\par
00214         write(tp.get_write_pipe(), {\cf17 static_cast<}{\cf17 const }{\cf18 void} *{\cf17 >}(protopipe::ENDING_PIPE), protopipe::LEN_PIPEMSG);\par
00215     \}\par
00216 \par
00217     {\cf19 while}(!_p_cur_connections->is_all_connections_done()) \par
00218     \{\par
00219         LOG_DEBUG << {\cf22 "Waiting all connections to receive pending operations..."};\par
00220         sleep(1);   {\cf20 // Wait a little bit...}\par
00221     \}\par
00222 \par
00223     LOG_DEBUG << {\cf22 "Now Writer Threads will be done!"};\par
00224     sleep(1);   {\cf20 // Wait a little bit...}\par
00225     _sharedptr_keep_running->_keep_working.store({\cf17 false});\par
00226 \par
00227     {\cf19 for}({\cf17 auto} &tp : _v_thread_pair)\par
00228     \{\par
00229         {\cf20 // Semd protomsg::TYPE_ENDING_MSG}\par
00230         tp.get_write_queue().send(&v_protomsg,st_end);\par
00231     \}\par
00232 \par
00233     {\cf19 for}({\cf17 auto} &tp : _v_thread_pair)\par
00234     \{\par
00235         {\cf19 if}(tp.th_r.joinable())\par
00236             tp.th_r.join();\par
00237         {\cf19 if}(tp.th_w.joinable())\par
00238             tp.th_w.join();\par
00239     \}\par
00240 \par
00241     LOG_DEBUG << {\cf22 "Ending_all_threads done!!"};\par
00242 \}\par
00243 \par
00244 {\cf18 int} Dispatcher::Assign_connection_to_thread_pair({\cf18 int} th_id, socket_data_t *sd_info)\par
00245 \{\par
00246     {\cf20 // TO DO - Check result or exceptions...}\par
00247     {\cf19 if} (_v_thread_pair[th_id].add_sockdata(*sd_info) < 0)\par
00248         {\cf19 return} -1;\par
00249 \par
00250     {\cf20 // Send WEAKUP_PIPE byte to notify there is a new connection...}\par
00251     write(_v_thread_pair[th_id].get_write_pipe(), &protopipe::WEAKUP_PIPE, protopipe::LEN_PIPEMSG);\par
00252     {\cf19 return} 0;\par
00253 \}\par
00254 \par
00255 {\cf18 int} Dispatcher::LaunchTuxCli() \par
00256 \{\par
00257     std::string prog(_config.TuxCliProg);\par
00258     std::string ipcfile(_config.IpcFile);\par
00259     std::string setup(_config.TuxCliSetup);\par
00260 \par
00261     LOG_DEBUG << {\cf22 "Launching: "} << prog; \par
00262     LOG_DEBUG << {\cf22 "     with: "} << ipcfile;\par
00263     LOG_DEBUG << {\cf22 "     with: "} << setup;\par
00264 \par
00265     execl(prog.c_str(), {\cf22 "Fork_TuxCli"} , ipcfile.c_str(), setup.c_str(), ({\cf18 char}*)0);\par
00266 \par
00267     LOG_ERROR << {\cf22 "error execl:"} << strerror(errno);\par
00268   \par
00269     {\cf19 return} -1;\par
00270 \par
00271 \}\par
00272 \par
00273 {\cf18 int} Dispatcher::LessCharged()\par
00274 \{\par
00275     {\cf20 // return less_charged;}\par
00276 \par
00277     {\cf17 auto} it_th = std::min_element(_v_thread_pair.begin(),_v_thread_pair.end(),\par
00278         [](thread_pair &a, thread_pair &b)\{ return a.get_size_of_sock_list() < b.get_size_of_sock_list();\}\par
00279         );\par
00280     {\cf19 return} it_th->get_idx();\par
00281 \}\par
00282 \par
00283 Dispatcher::operator bool()\par
00284 \{\par
00285     {\cf19 return} {\cf17 true};\par
00286 \}\par
00287 \par
00288 {\cf18 int} Dispatcher::IPC_Setting_Up()\par
00289 \{\par
00290     Json::Value ipcs_json;\par
00291     {\cf18 int} shm_conn_id=-1, sem_conn_id=-1, msg_common_id=-1, shm_ips_id=-1;\par
00292 \par
00293     GetCfgFile ipcfile(_config.IpcFile);\par
00294     {\cf19 if}(ipcfile)\par
00295     \{\par
00296         ipcs_json = ipcfile.get_json();\par
00297         sem_conn_id = ipcs_json[{\cf22 "sem_conn_id"}].asInt();\par
00298         shm_conn_id = ipcs_json[{\cf22 "shm_conn_id"}].asInt();\par
00299         msg_common_id = ipcs_json[{\cf22 "msg_common_id"}].asInt();\par
00300         shm_ips_id = ipcs_json[{\cf22 "shm_ips_id"}].asInt();\par
00301         \par
00302         {\cf20 // Try to get all info.}\par
00303         Semaphore sem(sem_conn_id);\par
00304         {\cf19 if}(sem) \{\par
00305             LOG_ERROR << {\cf22 "Semaphore created previously ("} << sem_conn_id << {\cf22 ") and it is running now. File: "} << ipcfile.get_file_name();\par
00306             {\cf19 return} -1;\par
00307         \}\par
00308         {\cf19 else} \{\par
00309             SharedMemory shm(shm_conn_id);\par
00310             {\cf19 if}(shm) \{\par
00311                 LOG_ERROR << {\cf22 "SharedMemory created previously ("} << shm_conn_id << {\cf22 ") and it is running now. File: "} << ipcfile.get_file_name();\par
00312                 {\cf19 return} -1;\par
00313             \}\par
00314             {\cf19 else} \{\par
00315                 MessageQueue msg(msg_common_id);\par
00316                 {\cf19 if}(msg) \{\par
00317                     LOG_ERROR << {\cf22 "MessageQueue created previously ("} << msg_common_id << {\cf22 ") and it is running now. File: "} << ipcfile.get_file_name();\par
00318                     {\cf19 return} -1;\par
00319                 \}\par
00320                 {\cf19 else} \{\par
00321                     SharedMemory shmip(shm_ips_id);\par
00322                     {\cf19 if}(shmip) \{\par
00323                         LOG_ERROR << {\cf22 "SharedMemory created previously ("} << shm_ips_id << {\cf22 ") and it is running now. File: "} << ipcfile.get_file_name();\par
00324                         {\cf19 return} -1;\par
00325                     \}\par
00326                     {\cf19 else} \{\par
00327                         LOG_DEBUG << {\cf22 "ipcfile obsolete, values (shm_conn_id,sem_conn_id): "} << shm_ips_id << {\cf22 ","} << sem_conn_id;            \par
00328                     \}\par
00329                 \}\par
00330             \}\par
00331         \}\par
00332     \}\par
00333 \par
00334     LOG_DEBUG << {\cf22 "Should be 0 (creating). shm_conn_id,sem_conn_id,msg_common_id,shm_ips_id:"} << \par
00335                 shm_conn_id << {\cf22 ","} << sem_conn_id << {\cf22 ","} << msg_common_id << {\cf22 ","} << shm_ips_id;\par
00336     \par
00337     _shpt_semIPCfile = std::make_shared<Semaphore>(IPC_PRIVATE, 1, 1, {\cf17 true});\par
00338 \par
00339     {\cf19 if}(!*_shpt_semIPCfile)\par
00340     \{\par
00341         LOG_ERROR << {\cf22 "Semaphore not created"};\par
00342         {\cf19 return} -1;\par
00343     \}\par
00344     \par
00345     _shpt_semIPCfile->Lock();\par
00346 \par
00347     {\cf20 //  Creating Shared Memory}\par
00348 \par
00349     {\cf18 int} shm_len = {\cf17 sizeof}(connections)+({\cf17 sizeof}(connection)*_config.MaxConnections)+({\cf17 sizeof}({\cf18 int})*_config.NumThreads);\par
00350 \par
00351     _shpt_shmIPCfile = std::make_shared<SharedMemory>(IPC_PRIVATE,shm_len, {\cf17 true});\par
00352 \par
00353     {\cf19 if}(!*_shpt_shmIPCfile) \par
00354     \{\par
00355         _shpt_semIPCfile->Unlock();   \par
00356         LOG_ERROR << {\cf22 "SharedMemory not created"};\par
00357         {\cf19 return} -1;\par
00358     \}\par
00359 \par
00360     {\cf20 // PLACEMENT NEW }\par
00361     {\cf20 // SHARED POINTER POINTING TO SHARED MEMORY: DELETER NEEDED: calls constructor and deleter on destruction}\par
00362     std::shared_ptr<connections> p_conn( {\cf17 new} (_shpt_shmIPCfile->getaddr()) connections(_config.MaxConnections, _config.NumThreads), \par
00363                 [](connections *p)\{ LOG_DEBUG << {\cf22 "connections own deleter: "}; \}\par
00364     );     \par
00365 \par
00366     _p_cur_connections = p_conn;\par
00367 \par
00368     _shpt_semIPCfile->Unlock();\par
00369     \par
00370     {\cf20 // STEP 2 - Common message queue }\par
00371 \par
00372     _shpt_Common_Msg_Queue = std::make_shared<MessageQueue>(IPC_PRIVATE,{\cf17 true});\par
00373 \par
00374     {\cf19 if}(!*_shpt_Common_Msg_Queue)\par
00375     \{\par
00376         {\cf19 return} -1;\par
00377     \}\par
00378   \par
00379     {\cf20 // STEP 3 - Allowed IP's - TO DO a better implementation (2 IP's by now)}\par
00380 \par
00381     shm_len = {\cf17 sizeof}(allowed_ips)*2;\par
00382 \par
00383     _shpt_shmAllowedIPs = std::make_shared<SharedMemory>(IPC_PRIVATE,shm_len, {\cf17 true});\par
00384 \par
00385     _allowed_ips = {\cf17 static_cast<}allowed_ips *{\cf17 >}(_shpt_shmAllowedIPs->getaddr());\par
00386 \par
00387     _allowed_ips[0].allowed = {\cf17 true};\par
00388     _allowed_ips[0].trace = {\cf17 false};\par
00389     inet_aton({\cf22 "127.0.0.1"}, &(_allowed_ips[0].ip));\par
00390     \par
00391     _allowed_ips[1].allowed = {\cf17 true};\par
00392     _allowed_ips[1].trace = {\cf17 false};\par
00393     inet_aton({\cf22 "127.0.1.1"}, &(_allowed_ips[1].ip));\par
00394 \par
00395     {\cf20 // Create write queues ...}\par
00396     _msg_queues.reserve(_config.NumThreads);\par
00397     {\cf19 for}({\cf18 int} i=0; i < _config.NumThreads; i++)\par
00398     \{\par
00399         _msg_queues.emplace_back(IPC_PRIVATE,{\cf17 false});\par
00400     \}\par
00401 \par
00402     {\cf20 // SAVE ON IPC FILE}\par
00403 \par
00404     ipcs_json[{\cf22 "shm_conn_id"}] = _shpt_shmIPCfile->getid();\par
00405     ipcs_json[{\cf22 "sem_conn_id"}] = _shpt_semIPCfile->getid();\par
00406     ipcs_json[{\cf22 "msg_common_id"}] = _shpt_Common_Msg_Queue->getid();\par
00407     ipcs_json[{\cf22 "shm_ips_id"}] = _shpt_shmAllowedIPs->getid();\par
00408     ipcfile.save_cfg_file(ipcs_json);\par
00409 \par
00410     {\cf19 return} 0;\par
00411 \}\par
00412 \par
00413 {\cf20 // Constructor de copia}\par
00414 Dispatcher::Dispatcher({\cf17 const} Dispatcher& other) : {\cf20 // _v_thread_pair(other._v_thread_pair),}\par
00415                                               _sharedptr_keep_running(other._sharedptr_keep_running),\par
00416                                               _shpt_semIPCfile(other._shpt_semIPCfile),\par
00417                                               _shpt_shmIPCfile(other._shpt_shmIPCfile),\par
00418                                               _config(other._config),\par
00419                                               _server_socket(other._server_socket),\par
00420                                               _p_cur_connections(other._p_cur_connections),\par
00421                                               _shpt_Common_Msg_Queue(other._shpt_Common_Msg_Queue),\par
00422                                               _shpt_shmAllowedIPs(other._shpt_shmAllowedIPs),\par
00423                                               _allowed_ips(other._allowed_ips)\par
00424                                               {\cf20 //_shpt_sigsyn(other._shpt_sigsyn)}\par
00425 \{\par
00426     LOG_DEBUG << {\cf22 "Copy Ctor: "} << {\cf17 this};\par
00427 \}\par
00428 \par
00429 {\cf20 // Constructor de movimiento}\par
00430 Dispatcher::Dispatcher(Dispatcher&& other) noexcept : {\cf20 //_v_thread_pair(std::move(other._v_thread_pair)),}\par
00431                                                _sharedptr_keep_running(std::move(other._sharedptr_keep_running)),\par
00432                                                _shpt_semIPCfile(std::move(other._shpt_semIPCfile)),\par
00433                                                _shpt_shmIPCfile(std::move(other._shpt_shmIPCfile)),\par
00434                                                _config(std::move(other._config)),\par
00435                                                _server_socket(std::move(other._server_socket)),\par
00436                                                _p_cur_connections(std::move(other._p_cur_connections)),\par
00437                                                _shpt_Common_Msg_Queue(std::move(other._shpt_Common_Msg_Queue)),\par
00438                                                _shpt_shmAllowedIPs(std::move(other._shpt_shmAllowedIPs)),\par
00439                                                _allowed_ips(std::move(other._allowed_ips))\par
00440                                                {\cf20 //_shpt_sigsyn(std::move(other._shpt_sigsyn))}\par
00441 \{\par
00442     LOG_DEBUG << {\cf22 "Move Ctor: "} << {\cf17 this};\par
00443 \}\par
00444 \par
00445 {\cf20 // Operador de asignaci\'F3n por copia}\par
00446 Dispatcher& Dispatcher::operator=({\cf17 const} Dispatcher& other)\par
00447 \{\par
00448     LOG_DEBUG << {\cf22 "Assignment Operator: "} << {\cf17 this};\par
00449     {\cf19 if} ({\cf17 this} != &other) \{\par
00450         {\cf20 //_v_thread_pair = other._v_thread_pair;}\par
00451         _sharedptr_keep_running = other._sharedptr_keep_running;\par
00452         _shpt_semIPCfile = other._shpt_semIPCfile;\par
00453         _shpt_shmIPCfile = other._shpt_shmIPCfile;\par
00454         _config = other._config;\par
00455         _server_socket = other._server_socket;\par
00456         _p_cur_connections = other._p_cur_connections;\par
00457         _shpt_Common_Msg_Queue = other._shpt_Common_Msg_Queue;\par
00458         _shpt_shmAllowedIPs = other._shpt_shmAllowedIPs;\par
00459         _allowed_ips = other._allowed_ips;\par
00460         {\cf20 // _shpt_sigsyn = other._shpt_sigsyn;}\par
00461     \}\par
00462     {\cf19 return} *{\cf17 this};\par
00463 \}\par
00464 \par
00465 {\cf20 // Operador de asignaci\'F3n por movimiento}\par
00466 Dispatcher& Dispatcher::operator=(Dispatcher&& other) {\cf17 noexcept}\par
00467 \{\par
00468     LOG_DEBUG << {\cf22 "Movement Assignment Operator: "} << {\cf17 this};\par
00469     {\cf19 if} ({\cf17 this} != &other) \{\par
00470         {\cf20 //_v_thread_pair = std::move(other._v_thread_pair);}\par
00471         _sharedptr_keep_running = std::move(other._sharedptr_keep_running);\par
00472         _shpt_semIPCfile = std::move(other._shpt_semIPCfile);\par
00473         _shpt_shmIPCfile = std::move(other._shpt_shmIPCfile);\par
00474         _config = std::move(other._config);\par
00475         _server_socket = std::move(other._server_socket);\par
00476         _p_cur_connections = std::move(other._p_cur_connections);\par
00477         _shpt_Common_Msg_Queue = std::move(other._shpt_Common_Msg_Queue);\par
00478         _shpt_shmAllowedIPs = std::move(other._shpt_shmAllowedIPs);\par
00479         _allowed_ips = std::move(other._allowed_ips);\par
00480         {\cf20 // _shpt_sigsyn = std::move(other._shpt_sigsyn);}\par
00481     \}\par
00482     {\cf19 return} *{\cf17 this};\par
00483 \}\par
00484 \par
00485 {\cf18 int} Dispatcher::operator()()\par
00486 \{\par
00487     LOG_DEBUG << {\cf22 "Dispatcher Operator "} << _config.NumDispatch;\par
00488     \par
00489     {\cf20 // STEP 1 - Create all IPCs }\par
00490 \par
00491     {\cf19 if}(IPC_Setting_Up() < 0)\par
00492         {\cf19 return} -1;\par
00493     \par
00494     {\cf20 // STEP 2 - LaunchTuxCli and Accept_Thread...}\par
00495 \par
00496     checker_pids chk_procs;\par
00497     \par
00498     chk_procs.add(std::bind(&Dispatcher::LaunchTuxCli, {\cf17 this}),{\cf22 "LaunchTuxCli"});\par
00499 \par
00500     chk_procs.add(std::bind(&Dispatcher::Accept_Thread, {\cf17 this}),{\cf22 "Accept_Thread"});\par
00501 \par
00502     LOG_DEBUG << {\cf22 "Attached to Connections: "} << _shpt_shmIPCfile->get_nattach();\par
00503 \par
00504     {\cf20 // Launching all processes... }\par
00505     {\cf18 int} ret=chk_procs();\par
00506 \par
00507     {\cf19 if}(ret) {\cf20 // forker = 1 --> delete all resources...}\par
00508     \{\par
00509         LOG_DEBUG << {\cf22 "EnableDelete all"};\par
00510         _shpt_shmIPCfile->EnableDelete();\par
00511         _shpt_semIPCfile->EnableDelete();\par
00512         _shpt_Common_Msg_Queue->EnableDelete();\par
00513         _shpt_shmAllowedIPs->EnableDelete();\par
00514         LOG_DEBUG_IF(loglevel) << {\cf22 "EnableDelete all queues: "};   \par
00515         {\cf19 for}({\cf18 int} i=0; i < _config.NumThreads; i++)\par
00516         \{\par
00517             _msg_queues[i].EnableDelete();\par
00518         \}\par
00519     \}\par
00520     {\cf19 else} \{\par
00521         LOG_DEBUG << {\cf22 "No delete all. Keep all."};\par
00522     \}\par
00523     \par
00524     LOG_DEBUG << {\cf22 "Ending operator()"};\par
00525     {\cf19 return} ret;\par
00526 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/dispatcher.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/dispatcher.h}
{\xe \v src/dispatcher.h}
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <sys/socket.h>}\par
{\f2 #include <netinet/in.h>}\par
{\f2 #include <json/json.h>}\par
{\f2 #include <json/value.h>}\par
{\f2 #include <memory>}\par
{\f2 #include "common.h"}\par
{\f2 #include "dispatch_cfg.h"}\par
{\f2 #include "checker_pids.h"}\par
{\f2 #include "Socket.h"}\par
{\f2 #include "connections.h"}\par
{\f2 #include "getcfgfile.h"}\par
{\f2 #include "ipclib.h"}\par
{\f2 #include "thread_pair.h"}\par
{\f2 #include "protocol_msg.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b allowed_ips}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Dispatcher}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
dispatcher.h\par \pard\plain 
{\tc\tcl2 \v src/dispatcher.h}
{\xe \v src/dispatcher.h}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef DISPATCHER_H}\par
00002 {\cf21 #define DISPATCHER_H}\par
00003 \par
00004 {\cf21 #include <sys/socket.h>}\par
00005 {\cf21 #include <netinet/in.h>}\par
00006 {\cf21 #include <json/json.h>}\par
00007 {\cf21 #include <json/value.h>}\par
00008 {\cf21 #include <memory>}\par
00009 \par
00010 {\cf21 #include "common.h"}\par
00011 {\cf21 #include "dispatch_cfg.h"}\par
00012 {\cf21 #include "checker_pids.h"}\par
00013 {\cf21 #include "Socket.h"}\par
00014 {\cf21 #include "connections.h"}\par
00015 {\cf21 #include "getcfgfile.h"}\par
00016 {\cf21 #include "ipclib.h"}\par
00017 {\cf21 #include "thread_pair.h"}\par
00018 {\cf21 #include "protocol_msg.h"}\par
00019 \par
00020 {\cf17 struct }allowed_ips\par
00021 \{\par
00022     {\cf18 bool} trace\{{\cf17 false}\};\par
00023     {\cf18 bool} allowed\{{\cf17 true}\};\par
00024     in_addr ip;\par
00025 \};\par
00026 \par
00027 {\cf17 class }Dispatcher \{\par
00028     dispatch_cfg _config;\par
00029 \par
00030     std::vector<thread_pair> _v_thread_pair;\par
00031 \par
00032     std::shared_ptr<keep_running_flags> _sharedptr_keep_running;\par
00033 \par
00034     std::shared_ptr<Semaphore> _shpt_semIPCfile;\par
00035 \par
00036     std::shared_ptr<SharedMemory> _shpt_shmIPCfile;\par
00037 \par
00038     Socket _server_socket;\par
00039     {\cf20 // Shared Connections between dispatcher and tuxclients}\par
00040     std::shared_ptr<connections> _p_cur_connections;\par
00041 \par
00042     {\cf20 // Common message queue - All receiving messages go here. }\par
00043     std::shared_ptr<MessageQueue> _shpt_Common_Msg_Queue;\par
00044     \par
00045     {\cf20 // Allowed IP's - Used by Accept_Thread (mainly), Reader and Writer for logging purposes. }\par
00046     {\cf20 // Sempahore not needed.}\par
00047     std::shared_ptr<SharedMemory> _shpt_shmAllowedIPs;\par
00048     allowed_ips *_allowed_ips;\par
00049 \par
00050     std::vector<MessageQueue> _msg_queues;\par
00051     {\cf20 //std::shared_ptr<signal_synch> _shpt_sigsyn;}\par
00052 \par
00053 {\cf17 public}:\par
00054     Dispatcher() = {\cf17 delete};\par
00055     Dispatcher(dispatch_cfg cfg, std::shared_ptr<keep_running_flags> shpt_keep_running);\par
00056     ~Dispatcher();\par
00057 \par
00058     {\cf20 // Constructor de copia}\par
00059     Dispatcher({\cf17 const} Dispatcher& other);\par
00060 \par
00061     {\cf20 // Operador de asignaci\'F3n por copia}\par
00062     Dispatcher& operator=({\cf17 const} Dispatcher& other);\par
00063 \par
00064     {\cf20 // Constructor de movimiento}\par
00065     Dispatcher(Dispatcher&& other) {\cf17 noexcept};\par
00066 \par
00067     {\cf20 // Operador de asignaci\'F3n por movimiento}\par
00068     Dispatcher& operator=(Dispatcher&& other) {\cf17 noexcept};\par
00069     \par
00070     {\cf18 void} Launch_All_Threads();\par
00071     {\cf18 void} Prepare_Server_Socket();\par
00072     {\cf20 // void Signal_Handler_For_Threads();}\par
00073     {\cf18 int} IPC_Setting_Up();\par
00074     {\cf18 int} Accept_Thread();\par
00075     {\cf18 int} Assign_connection_to_thread_pair({\cf18 int} th_id, socket_data_t *sd_info);\par
00076     {\cf18 int} Accept_by_Select();\par
00077     {\cf18 void} Ending_all_threads();\par
00078     {\cf20 //void Show_All_Shared_Ptr();}\par
00079 \par
00080     {\cf18 int} LessCharged();\par
00081     {\cf18 int} LaunchTuxCli();\par
00082     {\cf17 operator} bool();\par
00083     {\cf18 int} operator()();\par
00084 \};\par
00085 \par
00086 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/getcfgfile.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/getcfgfile.cpp}
{\xe \v src/getcfgfile.cpp}
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "getcfgfile.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
getcfgfile.cpp\par \pard\plain 
{\tc\tcl2 \v src/getcfgfile.cpp}
{\xe \v src/getcfgfile.cpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "getcfgfile.h"}\par
00002 \par
00003 {\cf17 using namespace }std;\par
00004 \par
00005 {\cf18 string} GetCfgFile::ExtractFileName({\cf17 const} {\cf18 string}& s) \par
00006 \{\par
00007    {\cf18 size_t} i = s.rfind(sep, s.length());\par
00008    {\cf19 if} (i != string::npos) \{\par
00009       {\cf19 return}(s.substr(i+1, s.length() - i));\par
00010    \}\par
00011 \par
00012    {\cf19 return}({\cf22 ""});\par
00013 \}\par
00014 \par
00015 {\cf18 string} GetCfgFile::ExtractFileDir({\cf17 const} {\cf18 string}& s) \par
00016 \{\par
00017    {\cf18 size_t} i = s.rfind(sep, s.length());\par
00018    {\cf19 if} (i != string::npos) \{\par
00019       {\cf19 return}(s.substr(0, i));\par
00020    \}\par
00021 \par
00022    {\cf19 return}({\cf22 ""});\par
00023 \}\par
00024 \par
00025 GetCfgFile::GetCfgFile(std::string file, {\cf18 bool} createdir)\par
00026         :_filename\{file\}\par
00027 \{\par
00028     {\cf19 if}(createdir) \par
00029     \{\par
00030         _file_dir = ExtractFileDir(_filename);\par
00031         {\cf20 // ensure that .dispatch directory exists}\par
00032         mkdir(_file_dir.c_str(), S_IRWXU | S_IRWXG | S_IRWXO);\par
00033     \}\par
00034 \par
00035     std::ifstream cfgfile(_filename);\par
00036 \par
00037     {\cf19 if} (cfgfile.good())\par
00038     \{\par
00039         {\cf19 try}\par
00040         \{\par
00041             cfgfile >> _m_json;\par
00042             cfgfile.close();\par
00043 \par
00044             _readed = {\cf17 true};\par
00045 \par
00046         \}\par
00047         {\cf19 catch} (std::exception {\cf17 const}& exc) {\cf20 // Json::exception is std::exception in the reader.h}\par
00048         \{\par
00049             PLOG_ERROR << {\cf22 "Config file found: "} << _filename << {\cf22 "\\nbut it's corrupted: "} << exc.what();\par
00050         \}\par
00051     \}\par
00052     {\cf19 else}\par
00053     \{\par
00054         PLOG_DEBUG_IF(loglevel) << {\cf22 "Config file not found: "} << _filename << endl;\par
00055     \}\par
00056 \}\par
00057 \par
00058 GetCfgFile::operator bool(){\cf17  const }\par
00059 {\cf17 }\{\par
00060     {\cf19 return} _readed == {\cf17 true};\par
00061 \}\par
00062 \par
00063 \par
00064 {\cf18 void} GetCfgFile::save_cfg_file({\cf17 const} Json::Value json)\par
00065 \{\par
00066     _m_json = json;\par
00067 \par
00068     PLOG_DEBUG_IF(loglevel) << __func__ ;\par
00069 \par
00070     std::ofstream cfgfile_new(_filename);\par
00071     cfgfile_new << _m_json;\par
00072     cfgfile_new.flush();\par
00073     cfgfile_new.close();\par
00074     _saved = {\cf17 true};\par
00075 \par
00076     PLOG_DEBUG_IF(loglevel) << {\cf22 "Config file saved in "} << _filename << {\cf22 "."};\par
00077 \}\par
00078 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/getcfgfile.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/getcfgfile.h}
{\xe \v src/getcfgfile.h}
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <sys/stat.h>}\par
{\f2 #include <pwd.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include "common.h"}\par
{\f2 #include <vector>}\par
{\f2 #include <json/json.h>}\par
{\f2 #include <json/value.h>}\par
{\f2 #include <fstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GetCfgFile}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr char {\b sep} = '/'\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v sep\:getcfgfile.h}
{\xe \v getcfgfile.h\:sep}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr char sep = '/'{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 19} of file {\b getcfgfile.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
getcfgfile.h\par \pard\plain 
{\tc\tcl2 \v src/getcfgfile.h}
{\xe \v src/getcfgfile.h}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef GETCFGFILE_H}\par
00002 {\cf21 #define GETCFGFILE_H}\par
00003 \par
00004 {\cf21 #ifdef  __cplusplus}\par
00005 {\cf17 extern} {\cf22 "C"} \{\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #include <sys/stat.h>}\par
00009 {\cf21 #include <pwd.h>}\par
00010 {\cf21 #include <unistd.h>}\par
00011 \par
00012 {\cf21 #ifdef  __cplusplus}\par
00013 \}\par
00014 {\cf21 #endif}\par
00015 \par
00016 {\cf21 #ifdef _WIN32}\par
00017    {\cf17 constexpr} {\cf18 char} sep = {\cf23 '\\\\'};\par
00018 {\cf21 #else}\par
00019    {\cf17 constexpr} {\cf18 char} sep = {\cf23 '/'};\par
00020 {\cf21 #endif}\par
00021 \par
00022 {\cf21 #include "common.h"}\par
00023 {\cf21 #include <vector>}\par
00024 {\cf21 #include <json/json.h>}\par
00025 {\cf21 #include <json/value.h>}\par
00026 {\cf21 #include <fstream>}\par
00027 \par
00028 {\cf17 class }GetCfgFile \par
00029 \{\par
00030 {\cf17 public}:\par
00031     GetCfgFile(std::string file, {\cf18 bool} createdir = {\cf17 false});\par
00032     ~GetCfgFile() = {\cf19 default};\par
00033 \par
00034     {\cf18 void} save_cfg_file({\cf17 const} Json::Value json);\par
00035     {\cf17 const} Json::Value &get_json(){\cf17  const }\{ {\cf19 return} _m_json;\};\par
00036     std::string get_file_dir() \{{\cf19 return} _file_dir;\};\par
00037     std::string get_file_name() \{{\cf19 return} _filename;\};\par
00038     {\cf17 operator} bool() {\cf17 const};\par
00039 \par
00040 {\cf17 private}:\par
00041     std::string ExtractFileName({\cf17 const} std::string& s);\par
00042     std::string ExtractFileDir({\cf17 const} std::string& s); \par
00043 \par
00044     std::string _filename;\par
00045     std::string _file_dir;\par
00046     {\cf18 bool} _readed\{{\cf17 false}\};\par
00047     {\cf18 bool} _saved\{{\cf17 false}\};\par
00048     Json::Value _m_json;\par
00049 \};\par
00050 \par
00051 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/ipclib.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/ipclib.cpp}
{\xe \v src/ipclib.cpp}
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ipclib.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ipclib.cpp\par \pard\plain 
{\tc\tcl2 \v src/ipclib.cpp}
{\xe \v src/ipclib.cpp}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "ipclib.h"}\par
00002 \par
00003 {\cf17 using namespace }std;\par
00004 \par
00005 {\cf18 int} Semaphore::get_stat({\cf18 int} semid)\par
00006 \{\par
00007     {\cf19 return} semctl(semid, 0, IPC_STAT, _st);\par
00008 \}\par
00009 \par
00010 Semaphore::Semaphore({\cf18 int} semid):Ipc\{IPC_PRIVATE,false\}\par
00011 \{\par
00012     {\cf19 if} (get_stat(semid) < 0) \par
00013     \{\par
00014         LOG_ERROR << {\cf22 "semctl: "} << strerror(errno);\par
00015         setok({\cf17 false});\par
00016     \}\par
00017     {\cf19 else} \{\par
00018         setid(semid);\par
00019         setok({\cf17 true});\par
00020         setflags(_st.buf->sem_perm.mode);\par
00021         setkey(_st.buf->sem_perm.__key);\par
00022         _nsems = _st.buf->sem_nsems;\par
00023         _sem_val.clear();\par
00024         _sem_val.reserve(_nsems);\par
00025         {\cf18 int} sem_val;\par
00026         {\cf19 for}({\cf18 int} i=0; i < _nsems; i++) \par
00027         \{\par
00028             {\cf19 if} ((sem_val = semctl(semid,i,GETVAL)) < 0) \par
00029             \{\par
00030                 LOG_ERROR  << {\cf22 "Can't init queue semaphore"};\par
00031                 setok({\cf17 false});\par
00032                 _sem_val.clear();\par
00033                 {\cf19 break};\par
00034             \}\par
00035             {\cf19 else}\par
00036                 _sem_val.emplace_back(sem_val);\par
00037         \}\par
00038     \}\par
00039 \}\par
00040 \par
00041 Semaphore::Semaphore({\cf17 const} key_t key, {\cf17 const} {\cf18 int} nsems, {\cf17 const} {\cf18 int} sem_val,  {\cf18 bool} deleteOnExit):\par
00042         Ipc\{key,deleteOnExit\}\par
00043 \{\par
00044     {\cf18 int} flags = getflags();\par
00045     {\cf18 int} {\cf18 id} = semget(key,nsems,flags);\par
00046 \par
00047     {\cf19 if} ({\cf18 id} < 0) \par
00048     \{\par
00049         PLOG_DEBUG_IF(loglevel) << {\cf22 "semget fail!"};\par
00050         {\cf19 switch}(errno) \{\par
00051         {\cf19 case} ENOENT:\par
00052             flags |= IPC_CREAT | IPC_EXCL | 0666;\par
00053             {\cf19 if} (({\cf18 id} = semget(key,nsems,flags)) < 0) \{\par
00054                 LOG_ERROR << {\cf22 "semget: "} << strerror(errno);\par
00055             \}\par
00056             {\cf19 else} \{\par
00057                 {\cf19 for} ({\cf18 int} i = 0; i < nsems; i++) \{\par
00058                     {\cf19 if} (semctl({\cf18 id},i,SETVAL,sem_val)) \{\par
00059                         LOG_ERROR  << {\cf22 "Can't init queue semaphore"};\par
00060                     \}\par
00061                 \}\par
00062                 setok({\cf17 true});\par
00063                 LOG_DEBUG_IF(loglevel) << {\cf22 "Semaphore created!"};\par
00064             \}\par
00065             {\cf19 break};\par
00066 \par
00067         {\cf19 case} EINVAL: LOG_ERROR << {\cf22 "EINVAL: "} << strerror(errno); {\cf19 break};\par
00068         {\cf19 case} EACCES: LOG_ERROR << {\cf22 "EACCES: "} << strerror(errno); {\cf19 break};\par
00069         {\cf19 case} ENOSPC: LOG_ERROR << {\cf22 "ENOSPC: "} << strerror(errno); {\cf19 break};\par
00070         {\cf19 case} EEXIST: LOG_ERROR << {\cf22 "EEXIST: "} << strerror(errno); {\cf19 break};\par
00071         \}\par
00072     \}   \par
00073     {\cf19 else} \{\par
00074         {\cf19 if} (key == IPC_PRIVATE) \par
00075         \{\par
00076             {\cf19 for} ({\cf18 int} i = 0; i < nsems; i++) \par
00077             \{\par
00078                 {\cf19 if} (semctl({\cf18 id},i,SETVAL,sem_val)) \par
00079                 \{\par
00080                     LOG_ERROR << {\cf22 "Can't init queue semaphore"};\par
00081                 \}\par
00082             \}\par
00083         \}\par
00084         setok({\cf17 true});\par
00085         LOG_DEBUG_IF(loglevel) << {\cf22 "Semaphore adquired: "} << getid();\par
00086     \}\par
00087 \par
00088     {\cf19 if}(*{\cf17 this})\par
00089     \{\par
00090         setid({\cf18 id});\par
00091         setflags(flags);\par
00092         setkey(key);\par
00093         _sem_val.assign(nsems,sem_val);             {\cf20 // 7 ints with a value of 100}\par
00094         _nsems = nsems;\par
00095     \}\par
00096 \}\par
00097 \par
00098 {\cf18 int} Semaphore::set({\cf17 const} {\cf18 int} op)\par
00099 \{\par
00100     {\cf19 if}(*{\cf17 this})\par
00101     \{\par
00102         _sop.sem_num = 0;\par
00103         _sop.sem_op = op;\par
00104         _sop.sem_flg = SEM_UNDO;\par
00105 \par
00106         errno = 0;\par
00107         {\cf19 while} (semop (getid(), &_sop, 1) == -1)\par
00108         \{\par
00109             {\cf19 if}(EINTR == errno)\par
00110             \{\par
00111                 errno = 0;\par
00112             \}\par
00113             {\cf19 else}\par
00114             \{\par
00115                 LOG_ERROR << {\cf22 "semop: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00116                 {\cf19 return} -1;\par
00117             \}\par
00118         \}\par
00119         {\cf19 return} 1;\par
00120     \}\par
00121     {\cf19 else}\par
00122         {\cf19 return} -1;\par
00123 \}\par
00124 \par
00125 Semaphore::~Semaphore()\par
00126 \{\par
00127     {\cf19 if}(*{\cf17 this})\par
00128     \{\par
00129         {\cf19 if}(getDeleteOnExit())\par
00130         \{\par
00131             LOG_DEBUG_IF(loglevel) << {\cf22 "Removing semaphore "} << getid();\par
00132             {\cf19 if} (semctl (getid(), 0, IPC_RMID) == -1)\par
00133             \{\par
00134                 LOG_ERROR << {\cf22 "semctl: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00135             \}\par
00136         \}\par
00137     \}\par
00138 \}\par
00139 \par
00140 {\cf18 int} SharedMemory::get_stat({\cf18 int} shmid)\par
00141 \{\par
00142     {\cf19 return} shmctl(shmid, IPC_STAT, &_st);\par
00143 \}\par
00144 \par
00145 {\cf18 int} SharedMemory::get_nattach()\par
00146 \{\par
00147     {\cf19 if} (get_stat(getid()) < 0) \{\par
00148         LOG_ERROR << {\cf22 "shmctl: "} << strerror(errno);\par
00149         {\cf19 return} -1;\par
00150     \}\par
00151     {\cf19 else}\par
00152         {\cf19 return} {\cf17 static_cast<}{\cf18 int}{\cf17 >}(_st.shm_nattch);\par
00153 \}\par
00154 \par
00155 SharedMemory::SharedMemory({\cf18 int} shmid):Ipc\{IPC_PRIVATE,false\}\par
00156 \{\par
00157     {\cf19 if} (get_stat(shmid) < 0) \par
00158     \{\par
00159         LOG_ERROR << {\cf22 "shmctl: "} << strerror(errno);\par
00160         setok({\cf17 false});\par
00161     \}\par
00162     {\cf19 else} \{\par
00163         setok({\cf17 true});\par
00164         {\cf19 if} ((_shmaddr = shmat(getid(), NULL, 0)) == NULL) \{\par
00165             LOG_ERROR << {\cf22 "shmat: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00166             setok({\cf17 false});\par
00167         \}\par
00168         {\cf20 //PLOG_DEBUG_IF(loglevel) << "SharedMemory Ctor getid() " << getid() << " _flags " << _flags << " _size " << _size;}\par
00169     \}\par
00170     {\cf19 if}(*{\cf17 this})\par
00171     \{\par
00172         setid(shmid);\par
00173         setflags(_st.shm_perm.mode);\par
00174         setkey(_st.shm_perm.__key);\par
00175         _size = _st.shm_segsz;\par
00176     \}\par
00177    \par
00178 \}\par
00179 \par
00180 \par
00181 SharedMemory::SharedMemory({\cf17 const} key_t key, {\cf18 int} size,{\cf18 bool} deleteOnExit):\par
00182         Ipc\{key,deleteOnExit\}\par
00183 \{\par
00184     {\cf18 int} flags = getflags();\par
00185     {\cf18 int} {\cf18 id} = shmget(key, size, flags);\par
00186 \par
00187    {\cf19 if} ( {\cf18 id}  < 0)\par
00188    \{\par
00189         {\cf19 if} (errno == ENOENT) \par
00190         \{\par
00191             flags |= IPC_CREAT;\par
00192             {\cf18 id} = shmget(key, size, flags);\par
00193             {\cf19 if} ({\cf18 id} < 0) \par
00194             \{\par
00195                 LOG_ERROR << {\cf22 "shmget: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00196             \}\par
00197             {\cf19 else} \{\par
00198                 setok({\cf17 true});\par
00199             \}\par
00200         \}\par
00201     \}\par
00202     {\cf19 else} \{\par
00203         setok({\cf17 true});\par
00204     \}\par
00205 \par
00206     {\cf19 if}(*{\cf17 this})\par
00207     \{\par
00208         setid({\cf18 id});\par
00209         setflags(flags);\par
00210         setkey(key);\par
00211 \par
00212         {\cf19 if} ((_shmaddr = shmat(getid(), NULL, 0)) == NULL) \{\par
00213             LOG_ERROR << {\cf22 "shmat: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00214             setok({\cf17 false});\par
00215         \}\par
00216         {\cf19 else}\par
00217             LOG_DEBUG_IF(loglevel) << {\cf22 "SharedMemory Created & Attached: "} << getid();\par
00218     \}\par
00219 \}\par
00220 \par
00221 SharedMemory::~SharedMemory()\par
00222 \{\par
00223     {\cf19 if}(*{\cf17 this} && _shmaddr) \par
00224     \{\par
00225         {\cf19 if}(getDeleteOnExit())\par
00226         \{\par
00227             LOG_DEBUG_IF(loglevel) << {\cf22 "Detaching SharedMemory "} << getid();\par
00228 \par
00229             {\cf19 if} (shmdt(_shmaddr)==-1) \par
00230             \{\par
00231                 LOG_ERROR << {\cf22 "shmdt: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00232             \}\par
00233             {\cf19 else} \par
00234             \{\par
00235                 LOG_DEBUG_IF(loglevel) << {\cf22 "Removing SharedMemory "} << getid();\par
00236                 {\cf19 if} (shmctl(getid(),IPC_RMID,0)) \par
00237                 \{\par
00238                     LOG_ERROR << {\cf22 "shmctl: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00239                 \}\par
00240             \}\par
00241         \}\par
00242    \}\par
00243 \par
00244 \}\par
00245 \par
00246 {\cf18 int} MessageQueue::get_stat({\cf18 int} msgid)\par
00247 \{\par
00248     {\cf19 return} msgctl(msgid, IPC_STAT, &_st);\par
00249 \}\par
00250 \par
00251 MessageQueue::MessageQueue({\cf18 int} msgid):Ipc\{IPC_PRIVATE,false\}\par
00252 \{\par
00253     {\cf19 if} ( get_stat(msgid) < 0) \par
00254     \{\par
00255         LOG_ERROR << {\cf22 "msgctl: "} << strerror(errno);\par
00256         setok({\cf17 false});\par
00257     \}\par
00258     {\cf19 else} \{\par
00259         setok({\cf17 true});\par
00260         setid(msgid);\par
00261         setflags(_st.msg_perm.mode);\par
00262         setkey(_st.msg_perm.__key);\par
00263         _size = _st.msg_qbytes;\par
00264 \par
00265         {\cf20 // PLOG_DEBUG_IF(loglevel) << "MessageQueue connected getid() " << getid() << " _flags " << _flags << " _size " << _size;}\par
00266     \}\par
00267 \}\par
00268 \par
00269 {\cf18 int} MessageQueue::send(protomsg::st_protomsg *p_protomsg, std::string &pdata)\par
00270 \{\par
00271     {\cf19 if}(*{\cf17 this})\par
00272     \{\par
00273         {\cf18 int} nbytes = {\cf17 sizeof}(protomsg::st_protomsg)+pdata.size();\par
00274         std::unique_ptr<protomsg::st_protomsg> p_qmsg2((protomsg::st_protomsg*) ::operator {\cf17 new} (nbytes));\par
00275 \par
00276         memcpy(p_qmsg2.get(), p_protomsg, {\cf17 sizeof}(protomsg::st_protomsg));\par
00277         strcpy(p_qmsg2->msg, pdata.c_str());\par
00278 \par
00279         {\cf19 if} (msgsnd(getid(), {\cf17 reinterpret_cast<}{\cf18 void} *{\cf17 >}(p_qmsg2.get()), nbytes - {\cf17 sizeof}({\cf18 long}), 0) < 0) \par
00280         \{\par
00281             PLOG_ERROR << {\cf22 "msgsnd: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00282             {\cf19 return} 0;\par
00283         \}\par
00284         {\cf19 else} \par
00285             {\cf19 return} 1;\par
00286     \}\par
00287     {\cf19 else} \par
00288     \{\par
00289         PLOG_ERROR << {\cf22 "send: "} << getid() << {\cf22 " NOT OK!!"};\par
00290     \}\par
00291     {\cf19 return} 0;\par
00292 \}\par
00293 \par
00294 {\cf18 int} MessageQueue::rcv(protomsg::st_protomsg *p_protomsg, std::string &pdata)\par
00295 \{\par
00296     {\cf19 if}(*{\cf17 this}) \par
00297     \{\par
00298         {\cf18 int} msgbytes;\par
00299         std::unique_ptr<protomsg::st_protomsg> p_qmsg2((protomsg::st_protomsg*) ::operator {\cf17 new} ({\cf17 sizeof}(protomsg::st_protomsg)+protomsg::MAX_MSG_SIZE));\par
00300         protomsg::st_protomsg *p= p_qmsg2.get();\par
00301 \par
00302         {\cf19 if} ((msgbytes = msgrcv(getid(), ({\cf18 void} *) p, protomsg::MAX_MSG_SIZE , 0, 0)) < 0) \{\par
00303             PLOG_ERROR << {\cf22 "msgrcv: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00304             {\cf19 return} 0;\par
00305         \}\par
00306         {\cf19 else} \{\par
00307             PLOG_DEBUG_IF(loglevel) << {\cf22 "msg("} << msgbytes << {\cf22 "):"} << p_qmsg2->msg << {\cf22 ""};\par
00308             memcpy(p_protomsg, p, {\cf17 sizeof}(protomsg::st_protomsg)-1);\par
00309             pdata = std::string(p->msg);\par
00310             {\cf19 return} 1;\par
00311         \}\par
00312     \}\par
00313     {\cf19 else} \par
00314     \{\par
00315         PLOG_ERROR << {\cf22 "send: "} << getid() << {\cf22 " NOT OK!!"};\par
00316     \}\par
00317     {\cf19 return} 0;\par
00318 \}\par
00319 \par
00320 MessageQueue::MessageQueue({\cf17 const} key_t key, {\cf18 bool} deleteOnExit):\par
00321         Ipc\{key,deleteOnExit\}\par
00322 \{\par
00323     {\cf17 struct }msqid_ds qstatus;\par
00324     {\cf18 int} flags=getflags();\par
00325     {\cf18 int} {\cf18 id} = msgget(key,flags);\par
00326 \par
00327     {\cf19 if} ({\cf18 id} < 0) \par
00328     \{\par
00329         {\cf19 if} (errno == ENOENT) \par
00330         \{\par
00331             flags |= IPC_CREAT;\par
00332             {\cf19 if} (({\cf18 id} = msgget(key,flags)) < 0) \{\par
00333                 LOG_ERROR << {\cf22 "msgget: "} << strerror(errno);\par
00334             \}\par
00335             {\cf19 else} \{\par
00336                 {\cf19 if} (msgctl({\cf18 id},IPC_STAT,&qstatus) < 0) \{\par
00337                     LOG_ERROR << {\cf22 "msgctl IPC_STAT: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00338                 \}\par
00339                 {\cf19 else} \{\par
00340                     LOG_DEBUG << {\cf22 "msg_qbytes:"} << qstatus.msg_qbytes;\par
00341                     setok({\cf17 true});\par
00342                 \}\par
00343             \}\par
00344         \}\par
00345         {\cf19 else}\par
00346         \{\par
00347             LOG_ERROR << {\cf22 "msgget: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00348         \}\par
00349     \} \par
00350     {\cf19 else} \{\par
00351         setok({\cf17 true});\par
00352         LOG_DEBUG_IF(loglevel) << {\cf22 "MessageQueue Created: "} << getid();\par
00353     \}\par
00354 \par
00355     {\cf19 if}(*{\cf17 this})\par
00356     \{\par
00357         setid({\cf18 id});\par
00358         setflags(flags);\par
00359         setkey(key);\par
00360     \}\par
00361 \}\par
00362 \par
00363 MessageQueue::~MessageQueue()\par
00364 \{\par
00365     {\cf19 if}(*{\cf17 this})\par
00366     \{\par
00367         {\cf19 if}(getDeleteOnExit())\par
00368         \{\par
00369             LOG_DEBUG_IF(loglevel) << {\cf22 "Removing MessageQueue "} << getid();\par
00370             {\cf19 if} (msgctl(getid(),0,IPC_RMID))\par
00371             \{\par
00372                 LOG_ERROR << {\cf22 "msgctl: "} << strerror(errno) << {\cf22 ":"} << getid();\par
00373             \}\par
00374         \}\par
00375     \}\par
00376 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/ipclib.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/ipclib.h}
{\xe \v src/ipclib.h}
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "common.h"}\par
{\f2 #include "protocol_msg.h"}\par
{\f2 #include <string>}\par
{\f2 #include <memory>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <sys/types.h>}\par
{\f2 #include <sys/stat.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <errno.h>}\par
{\f2 #include <sys/ipc.h>}\par
{\f2 #include <sys/shm.h>}\par
{\f2 #include <sys/msg.h>}\par
{\f2 #include <sys/sem.h>}\par
{\f2 #include <sys/wait.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Ipc}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
union {\b semun}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Semaphore}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b SharedMemory}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b MessageQueue}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ipclib.h\par \pard\plain 
{\tc\tcl2 \v src/ipclib.h}
{\xe \v src/ipclib.h}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef IPCLIB_H_}\par
00002 {\cf21 #define IPCLIB_H_}\par
00003 \par
00004 {\cf21 #include "common.h"}\par
00005 {\cf21 #include "protocol_msg.h"}\par
00006 {\cf21 #include <string>}\par
00007 {\cf21 #include <memory>}\par
00008 \par
00009 {\cf21 #ifdef  __cplusplus}\par
00010 {\cf17 extern} {\cf22 "C"} \{\par
00011 {\cf21 #endif}\par
00012 \par
00013 {\cf21 #include <stdio.h>}\par
00014 {\cf21 #include <sys/types.h>}\par
00015 {\cf21 #include <sys/stat.h>}\par
00016 {\cf21 #include <string.h>}\par
00017 {\cf21 #include <errno.h>}\par
00018 {\cf21 #include <sys/ipc.h>}\par
00019 {\cf21 #include <sys/shm.h>}\par
00020 {\cf21 #include <sys/msg.h>}\par
00021 {\cf21 #include <sys/sem.h>}\par
00022 {\cf21 #include <sys/wait.h>}\par
00023 \par
00024 {\cf21 #ifdef  __cplusplus}\par
00025 \}\par
00026 {\cf21 #endif}\par
00027 \par
00028 \par
00032 {\cf17 class }Ipc \par
00033 \{\par
00034     key_t _key\{IPC_PRIVATE\};        {\cf20 // Key used to connect/create.}\par
00035     {\cf18 int} _id\{-1\};                    {\cf20 // ID}\par
00036     {\cf18 bool} _deleteOnExit\{{\cf17 false}\};      {\cf20 // Flag to delete on exit}\par
00037     {\cf18 int} _flags\{0666\};               {\cf20 // Flags on connect/create}\par
00038     {\cf18 bool} _ok\{{\cf17 false}\};                {\cf20 // Flag true=operative Ipc, false=no operative Ipc}\par
00039 \par
00040 {\cf17 public}:\par
00041     Ipc() = {\cf19 default};\par
00048     {\cf17 explicit} Ipc(key_t key, {\cf18 bool} deleteOnExit):_key\{key\},_deleteOnExit\{deleteOnExit\}\{\}\par
00049     Ipc(Ipc {\cf17 const} &) = {\cf19 default};\par
00050     Ipc(Ipc &&) = {\cf19 default};\par
00051     Ipc& operator=(Ipc {\cf17 const} &) = {\cf19 default};\par
00052     Ipc& operator=(Ipc &&) = {\cf19 default};\par
00053     {\cf17 virtual} ~Ipc() = {\cf19 default};\par
00054 \par
00055     {\cf20 // Enable delete IPC on exit.}\par
00056     {\cf18 void} EnableDelete() \{   _deleteOnExit = {\cf17 true}; \}     \par
00057     \par
00058     {\cf20 // Disable delete IPC on exit.}\par
00059     {\cf18 void} DisableDelete() \{  _deleteOnExit = {\cf17 false}; \}\par
00060 \par
00061     {\cf20 // Get key id}\par
00062     key_t getkey(){\cf17  const }\{ {\cf19 return} _key; \}\par
00063 \par
00064     {\cf20 // Get id}\par
00065     {\cf18 int} getid(){\cf17  const }\{ {\cf19 return} _id; \}\par
00066 \par
00067     {\cf20 // Get flgas}\par
00068     {\cf18 int} getflags(){\cf17  const }\{ {\cf19 return} _flags; \}\par
00069 \par
00070     {\cf20 // Get deleteOnExit}\par
00071     key_t getDeleteOnExit(){\cf17  const }\{ {\cf19 return} _deleteOnExit; \}\par
00072 \par
00073     {\cf20 // Set key id}\par
00074     {\cf18 void} setkey(key_t key) \{ _key=key; \}\par
00075 \par
00076     {\cf20 // Set id}\par
00077     {\cf18 void} setid({\cf18 int} {\cf18 id}) \{ _id=id; \}\par
00078 \par
00079     {\cf20 // Set ok}\par
00080     {\cf18 void} setok({\cf18 bool} ok) \{ _ok=ok; \}\par
00081 \par
00082     {\cf20 // Set flags}\par
00083     {\cf18 void} setflags({\cf18 int} flags) \{ _flags=flags; \}\par
00084 \par
00085     {\cf20 // Operator bool for IPC's}\par
00086     {\cf17 virtual} {\cf17 operator} bool(){\cf17  const }\{ {\cf19 return} _ok == {\cf17 true}; \}\par
00087 \};\par
00088 \par
00089 \par
00090 \par
00091 {\cf21 #if defined(__GNU_LIBRARY__) && !defined(_SEM_SEMUN_UNDEFINED)}\par
00092     {\cf20 /* la union semun se define al incluir <sys/sem.h> */}\par
00093 {\cf21 #else}\par
00094     {\cf20 /* seg\'FAn X/OPEN tenemos que definirla nosostros mismos */}\par
00095     {\cf17 union }semun \{\par
00096         {\cf18 int} val;                    {\cf20 /* valor para SETVAL */}\par
00097         {\cf17 struct }semid_ds *buf;       {\cf20 /* buffer para IPC_STAT, IPC_SET */}\par
00098         {\cf18 unsigned} {\cf18 short} {\cf18 int} *array;  {\cf20 /* array para GETALL, SETALL */}\par
00099         {\cf17 struct }seminfo *__buf;      {\cf20 /* buffer para IPC_INFO */}\par
00100     \};\par
00101 {\cf21 #endif}\par
00102 \par
00103 \par
00107 {\cf17 class }Semaphore final : {\cf17 public} Ipc \par
00108 \{\par
00109     {\cf18 int} _nsems;                         {\cf20 // Number of semaphores}\par
00110     std::vector<int> _sem_val;          {\cf20 // Semaphore value vector}\par
00111     {\cf17 struct }sembuf _sop;                 {\cf20 // To operate on semaphore}\par
00112     semun _st;                          \par
00113     {\cf17 static} {\cf17 constexpr} {\cf18 int} LOCK = -1;\par
00114     {\cf17 static} {\cf17 constexpr} {\cf18 int} UNLOCK = 1;\par
00115     {\cf20 // SetS a LOCK or UNLOCK.}\par
00116     {\cf18 int} set({\cf17 const} {\cf18 int} op);              \par
00117     {\cf20 // Run semctl to get all info.}\par
00118     {\cf18 int} get_stat({\cf18 int} semid);\par
00119 \par
00120 {\cf17 public}:\par
00129     Semaphore({\cf17 const} key_t key, {\cf17 const} {\cf18 int} nsems, {\cf17 const} {\cf18 int} sem_val,  {\cf18 bool} deleteOnExit);\par
00135     Semaphore({\cf18 int} semid);\par
00136 \par
00137     Semaphore() = {\cf19 default};\par
00138     Semaphore(Semaphore {\cf17 const} &) = {\cf19 default};\par
00139     Semaphore(Semaphore &&) = {\cf19 default};\par
00140     Semaphore& operator=(Semaphore {\cf17 const} &) = {\cf19 default};\par
00141     Semaphore& operator=(Semaphore &&) = {\cf19 default};\par
00142     ~Semaphore();\par
00143     \par
00144     {\cf20 // Lock semaphore}\par
00145     {\cf18 int} Lock()\{ {\cf18 int} ret=set(LOCK); PLOG_DEBUG_IF(loglevel) << {\cf22 "Semaphore Locked!"}; {\cf19 return} ret; \}\par
00146 \par
00147     {\cf20 // Unlock semaphore}\par
00148     {\cf18 int} Unlock()\{ {\cf18 int} ret=set(UNLOCK); PLOG_DEBUG_IF(loglevel) << {\cf22 "Semaphore Unlocked!"}; {\cf19 return} ret; \}\par
00149 \};\par
00150 \par
00151 \par
00155 {\cf17 class }SharedMemory final : {\cf17 public} Ipc \par
00156 \{\par
00157     {\cf18 void}* _shmaddr\{{\cf17 nullptr}\};                {\cf20 // Shared memory address. }\par
00158     {\cf18 int} _size\{4\};                           {\cf20 // Size of shared memory}\par
00159     shmid_ds _st;                           {\cf20 // Info of the shared memory}\par
00160     {\cf20 // Run semctl to get all info.}\par
00161     {\cf18 int} get_stat({\cf18 int} shmid);                \par
00162 \par
00163 {\cf17 public}: \par
00171     SharedMemory({\cf17 const} key_t key, {\cf18 int} size, {\cf18 bool} deleteOnExit);\par
00172 \par
00178     SharedMemory({\cf18 int} shmid);\par
00179 \par
00180     SharedMemory() = {\cf19 default};\par
00181     SharedMemory(SharedMemory {\cf17 const} &) = {\cf19 default};\par
00182     SharedMemory(SharedMemory &&) = {\cf19 default};\par
00183     SharedMemory& operator=(SharedMemory {\cf17 const} &) = {\cf19 default};\par
00184     SharedMemory& operator=(SharedMemory &&) = {\cf19 default};\par
00185     ~SharedMemory();\par
00186 \par
00187     {\cf20 // Get shared memory address}\par
00188     {\cf18 void} *getaddr(){\cf17  const }\{ {\cf19 return} _shmaddr; \}\par
00189     {\cf20 // Get number of processes attached to shared memory}\par
00190     {\cf18 int} get_nattach();\par
00191 \};\par
00192 \par
00193 \par
00197 {\cf17 class }MessageQueue final : {\cf17 public} Ipc \par
00198 \{\par
00199     msqid_ds _st;                   {\cf20 // Message queue info}\par
00200     {\cf18 int} _size;                      {\cf20 // Size of message queue}\par
00201     {\cf20 // Run msgctl to get all info.}\par
00202     {\cf18 int} get_stat({\cf18 int} msgid);\par
00203 {\cf17 public}:\par
00204    \par
00211     MessageQueue({\cf17 const} key_t key, {\cf18 bool} deleteOnExit);\par
00212     \par
00218     MessageQueue({\cf18 int} msgid);\par
00219     \par
00220     MessageQueue() = {\cf19 default};\par
00221     MessageQueue(MessageQueue {\cf17 const} &) = {\cf19 default};\par
00222     MessageQueue(MessageQueue &&) = {\cf19 default};\par
00223     MessageQueue& operator=(MessageQueue {\cf17 const} &) = {\cf19 default};\par
00224     MessageQueue& operator=(MessageQueue &&) = {\cf19 default};\par
00225     ~MessageQueue();\par
00226 \par
00227     {\cf20 // Sends a protomsg::st_protomsg to the message queue (IPC)}\par
00228     {\cf18 int} send(protomsg::st_protomsg *p_protomsg, std::string &pdata);\par
00229     {\cf20 // Receives a protomsg::st_protomsg of the message queue (IPC)}\par
00230     {\cf18 int} rcv(protomsg::st_protomsg *p_protomsg, std::string &pdata);\par
00231 \par
00232 \};\par
00233 \par
00234 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/protocol_msg.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/protocol_msg.h}
{\xe \v src/protocol_msg.h}
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b protomsg::st_protomsg}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b protopipe}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b protomsg}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr char {\b protopipe::WEAKUP_PIPE} [1] =\{'1'\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr char {\b protopipe::ENDING_PIPE} [1] =\{'2'\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b protopipe::LEN_PIPEMSG} =1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static char {\b protopipe::GETPIPEMSG} [1]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b protomsg::TYPE_WEAKUP_MSG} =1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b protomsg::TYPE_NORMAL_MSG} =2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b protomsg::TYPE_ENDING_MSG} =3\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr long {\b protomsg::MAX_MSG_SIZE} =10000\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
protocol_msg.h\par \pard\plain 
{\tc\tcl2 \v src/protocol_msg.h}
{\xe \v src/protocol_msg.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef PROTOCOL_MSG_H}\par
00002 {\cf21 #define PROTOCOL_MSG_H}\par
00003 \par
00004 {\cf17 namespace }protopipe\par
00005 \{\par
00006     {\cf17 static} {\cf17 constexpr} {\cf18 char} WEAKUP_PIPE[1]=\{{\cf23 '1'}\};\par
00007     {\cf17 static} {\cf17 constexpr} {\cf18 char} ENDING_PIPE[1]=\{{\cf23 '2'}\};\par
00008     {\cf17 static} {\cf17 constexpr} {\cf18 int} LEN_PIPEMSG=1;\par
00009     {\cf17 static} {\cf18 char} GETPIPEMSG[1];\par
00010 \}\par
00011 \par
00012 {\cf17 namespace }protomsg\par
00013 \{\par
00014     {\cf17 static} {\cf17 constexpr} {\cf18 long} TYPE_WEAKUP_MSG=1;\par
00015     {\cf17 static} {\cf17 constexpr} {\cf18 long} TYPE_NORMAL_MSG=2;\par
00016     {\cf17 static} {\cf17 constexpr} {\cf18 long} TYPE_ENDING_MSG=3;\par
00017     {\cf17 static} {\cf17 constexpr} {\cf18 long} MAX_MSG_SIZE=10000;\par
00018     {\cf17 struct }st_protomsg\par
00019     \{\par
00020         {\cf18 long}        mtype\{0\};\par
00021         {\cf18 int}         q_write\{0\};\par
00022         {\cf18 int}         terf\{0\};\par
00023         {\cf18 int}         terl\{0\};\par
00024         {\cf18 int}         idx\{0\};\par
00025         {\cf18 char}        guid[10]\{0\};\par
00026         {\cf18 char}        pid[10]\{0\};\par
00027         {\cf18 char}        aid[8]\{0\};\par
00028         {\cf18 char}        cabx[8]\{0\};\par
00029         {\cf18 char}        msg[1]\{0\};\par
00030 \par
00031         {\cf17 friend} std::ostream& operator<<( std::ostream& os, {\cf17 const} st_protomsg& v )\par
00032         \{\par
00033             os << v.mtype << {\cf22 ":"} << v.q_write << {\cf22 ":"} << v.terf << {\cf22 ":"} << v.terl << {\cf22 ":"} << v.idx << {\cf22 ":"} << \\\par
00034                 v.guid << {\cf22 ":"} << v.pid << {\cf22 ":"} << v.aid << {\cf22 ":"} << v.cabx;\par
00035             {\cf19 return} os;\par
00036         \}\par
00037     \};\par
00038 \}\par
00039 \par
00040 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Socket.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Socket.cpp}
{\xe \v src/Socket.cpp}
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Socket.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Socket.cpp\par \pard\plain 
{\tc\tcl2 \v src/Socket.cpp}
{\xe \v src/Socket.cpp}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 //}\par
00002 {\cf20 //  Socket.cpp}\par
00003 {\cf20 //  SocketServer}\par
00004 {\cf20 //}\par
00005 {\cf20 //  Created by Kay Makowsky on 15.06.16.}\par
00006 {\cf20 //  Copyright \'A9 2016 Kay Makowsky. All rights reserved.}\par
00007 {\cf20 //}\par
00008 \par
00009 {\cf21 #include "Socket.h"}\par
00010 \par
00011 {\cf17 using namespace }std;\par
00012 Socket::Socket()\{\par
00013     \par
00014 \}\par
00015 Socket::Socket({\cf18 int} domain, {\cf18 int} type, {\cf18 int} protocol)\par
00016 \{\par
00017     memset(&address_info, 0, {\cf17 sizeof} address_info);\par
00018     sock = socket(domain, type , protocol);\par
00019     {\cf19 if} (sock < 0) \{\par
00020         {\cf20 //exit(1);}\par
00021         cerr << {\cf22 "opening socket error: "} << gai_strerror(errno) << endl;\par
00022     \}\par
00023     address_info.ai_family = domain;\par
00024     address_info.ai_socktype = type;\par
00025     address_info.ai_protocol = protocol;\par
00026     \par
00027     port = {\cf22 ""};\par
00028     address = {\cf22 ""};\par
00029 \}\par
00030 \par
00031 {\cf18 int} Socket::bind({\cf18 string} ip, {\cf18 string} port)\{\par
00032     {\cf19 if} (address_info.ai_family == AF_UNIX) \{\par
00033         \par
00034         {\cf17 struct }sockaddr_un addr;\par
00035         memset(&addr, 0, {\cf17 sizeof}(addr));\par
00036         addr.sun_family = AF_UNIX;\par
00037         strncpy(addr.sun_path, ip.c_str(), {\cf17 sizeof}(addr.sun_path)-1);\par
00038         {\cf18 int} status = ::bind(sock, ({\cf17 struct} sockaddr*)&addr, {\cf17 sizeof}(addr));\par
00039         {\cf19 if} (status < 0) \{\par
00040             {\cf20 //exit(1);}\par
00041             cerr << {\cf22 "bind error: "} << gai_strerror(errno) << endl;\par
00042         \}\par
00043         {\cf19 return} status;\par
00044     \}\par
00045     \par
00046     address = ip;\par
00047     this->port = port;\par
00048     {\cf18 int} status;\par
00049     {\cf17 struct }addrinfo *res;\par
00050     address_info.ai_flags = AI_PASSIVE;\par
00051     {\cf19 if} ((status = getaddrinfo(ip.c_str(), port.c_str(), &address_info, &res)) != 0) \{\par
00052         cerr << {\cf22 "getaddrinfo error: "} << gai_strerror(errno) << endl;\par
00053         {\cf20 //exit(1);}\par
00054         {\cf19 return} status;\par
00055     \}\par
00056     address_info.ai_addrlen = res->ai_addrlen;\par
00057     address_info.ai_addr = res->ai_addr;\par
00058     freeaddrinfo(res);\par
00059     status = ::bind(sock, address_info.ai_addr, address_info.ai_addrlen);\par
00060     {\cf19 if} (status < 0) \{\par
00061         {\cf20 //exit(1);}\par
00062         cerr << {\cf22 "bind error: "} << gai_strerror(errno) << endl;\par
00063     \}\par
00064     {\cf19 return} status;\par
00065 \}\par
00066 \par
00067 {\cf18 int} Socket::connect({\cf18 string} ip, {\cf18 string} port)\{\par
00068     {\cf19 if} (address_info.ai_family == AF_UNIX) \{\par
00069         \par
00070         {\cf17 struct }sockaddr_un addr;\par
00071         memset(&addr, 0, {\cf17 sizeof}(addr));\par
00072         addr.sun_family = AF_UNIX;\par
00073         strncpy(addr.sun_path, ip.c_str(), {\cf17 sizeof}(addr.sun_path)-1);\par
00074         {\cf18 int} status = ::connect(sock, ({\cf17 struct} sockaddr*)&addr, {\cf17 sizeof}(addr));\par
00075         {\cf19 if} (status < 0) \{\par
00076             {\cf20 //exit(1);}\par
00077             cerr << {\cf22 "connect error: "} << gai_strerror(errno) << endl;\par
00078         \}\par
00079         {\cf19 return} status;\par
00080     \}\par
00081     \par
00082     \par
00083     address = ip;\par
00084     this->port = port;\par
00085     {\cf17 struct }addrinfo *res;\par
00086     {\cf18 int} status;\par
00087     {\cf19 if} ((status = getaddrinfo(ip.c_str(), port.c_str(), &address_info, &res)) != 0)\{\par
00088         cerr << {\cf22 "getaddrinfo error: "} << gai_strerror(errno);\par
00089         {\cf20 //exit(1);}\par
00090         {\cf19 return} status;\par
00091     \}\par
00092     address_info.ai_addrlen = res->ai_addrlen;\par
00093     address_info.ai_addr = res->ai_addr;\par
00094     freeaddrinfo(res);\par
00095     status = ::connect(sock, address_info.ai_addr, address_info.ai_addrlen);\par
00096     {\cf19 if} (status < 0) \{\par
00097         {\cf20 //exit(1);}\par
00098         cerr << {\cf22 "connect error: "} << gai_strerror(status) << endl;\par
00099     \}\par
00100     {\cf19 return} status;\par
00101 \}\par
00102 \par
00103 {\cf18 int} Socket::listen({\cf18 int} max_queue)\{\par
00104     {\cf18 int} status;\par
00105     status = ::listen(sock,max_queue);\par
00106     {\cf19 if} (status < 0) \{\par
00107         {\cf20 //exit(1);}\par
00108         cerr << {\cf22 "listen error: "} << gai_strerror(errno) << endl;\par
00109     \}\par
00110     {\cf19 return} status;\par
00111 \}\par
00112 \par
00113 Socket Socket::accept()\{\par
00114     socklen_t addr_size;\par
00115     addr_size = {\cf17 sizeof} their_addr;\par
00116     {\cf18 int} newsock = ::accept(sock, ({\cf17 struct} sockaddr *)&their_addr, &addr_size);\par
00117     {\cf19 if} (newsock < 0) \{\par
00118         {\cf20 //exit(1);}\par
00119         cerr << {\cf22 "accept error: "} << gai_strerror(errno) << endl;\par
00120     \}\par
00121     Socket newSocket(address_info.ai_family,address_info.ai_socktype,address_info.ai_protocol);\par
00122     newSocket.sock = newsock;\par
00123     newSocket.port = port;\par
00124     \par
00125     {\cf18 char} host[NI_MAXHOST];\par
00126     {\cf18 int} status = getnameinfo(({\cf17 struct} sockaddr *)&their_addr, {\cf17 sizeof}(their_addr), host, {\cf17 sizeof}(host), NULL, 0, NI_NUMERICHOST);\par
00127     {\cf19 if} (status < 0) \{\par
00128         {\cf20 //exit(1);}\par
00129         cerr << {\cf22 "getnameinfo error: "} << gai_strerror(errno) << endl;\par
00130     \}\par
00131     newSocket.address = host;\par
00132     newSocket.address_info.ai_family = their_addr.ss_family;\par
00133     newSocket.address_info.ai_addr = ({\cf17 struct }sockaddr *)&their_addr;\par
00134     {\cf19 return} newSocket;\par
00135 \}\par
00136 {\cf18 int} Socket::socket_write({\cf18 string} msg)\{\par
00137     {\cf17 const} {\cf18 char} * buf = msg.c_str();\par
00138     {\cf18 int} len = (int)strlen(buf);\par
00139     {\cf18 int} status = (int)send(sock, buf, len, 0);\par
00140     {\cf19 if} (status < 0) \{\par
00141         {\cf20 //exit(1);}\par
00142         cerr << {\cf22 "write error: "} << gai_strerror(errno) << endl;\par
00143     \}\par
00144     {\cf19 return} status;\par
00145 \}\par
00146 {\cf18 int} Socket::socket_safe_read({\cf18 string} &buf,{\cf18 int} len,{\cf18 int} seconds)\{\par
00147     vector<Socket> reads;\par
00148     reads.push_back(*{\cf17 this});\par
00149     {\cf18 int} count = Socket::select(&reads, NULL, NULL, seconds);\par
00150     {\cf19 if}(count < 1)\{\par
00151        {\cf20 //No new Connection}\par
00152         buf = {\cf22 ""};\par
00153         {\cf19 return} -1;\par
00154     \}\par
00155     {\cf18 char} buffer[len];\par
00156     bzero(buffer,len);\par
00157     {\cf18 int} status = (int)recv(sock, buffer, len-1, 0);\par
00158     {\cf19 if} (status < 0) \{\par
00159         {\cf20 //exit(1);}\par
00160         cerr << {\cf22 "read error: "} << gai_strerror(errno) << endl;\par
00161     \}\par
00162     buf = string(buffer);\par
00163     {\cf19 return} status;\par
00164 \}\par
00165 {\cf18 int} Socket::socket_read({\cf18 string} &buf,{\cf18 int} len)\{\par
00166     {\cf18 char} buffer[len];\par
00167     bzero(buffer,len);\par
00168     {\cf18 int} status = (int)recv(sock, buffer, len-1, 0);\par
00169     {\cf19 if} (status < 0) \{\par
00170         {\cf20 //exit(1);}\par
00171         cerr << {\cf22 "read error: "} << gai_strerror(errno) << endl;\par
00172     \}\par
00173     buf = string(buffer);\par
00174     {\cf19 return} status;\par
00175 \}\par
00176 {\cf18 int} Socket::socket_writeTo({\cf18 string} msg, {\cf18 string} ip, {\cf18 string} port)\{\par
00177     {\cf17 const} {\cf18 char} * buf = msg.c_str();\par
00178     {\cf18 int} len = (int)strlen(buf);\par
00179     address = ip;\par
00180     this->port = port;\par
00181     {\cf17 struct }addrinfo *res;\par
00182     {\cf18 int} status;\par
00183     {\cf19 if} ((status = getaddrinfo(ip.c_str(), port.c_str(), &address_info, &res)) != 0)\{\par
00184         cerr << {\cf22 "getaddrinfo error: "} << gai_strerror(errno) << endl;\par
00185         {\cf20 //exit(1);}\par
00186         {\cf19 return} status;\par
00187     \}\par
00188     address_info.ai_addrlen = res->ai_addrlen;\par
00189     address_info.ai_addr = res->ai_addr;\par
00190     freeaddrinfo(res);\par
00191     status = (int)sendto(sock, buf, len, 0, address_info.ai_addr, address_info.ai_addrlen);\par
00192     {\cf19 if} (status < 0) \{\par
00193         {\cf20 //exit(1);}\par
00194         cerr << {\cf22 "writeTo error: "} << gai_strerror(errno) << endl;\par
00195     \}\par
00196     {\cf19 return} status;\par
00197 \}\par
00198 {\cf18 int} Socket::socket_readFrom({\cf18 string} &buf, {\cf18 int} len, {\cf18 string} ip, {\cf18 string} port)\{\par
00199     {\cf18 char} buffer[len];\par
00200     bzero(buffer,len);\par
00201     {\cf17 struct }addrinfo *res;\par
00202     {\cf18 int} status;\par
00203     {\cf19 if} ((status = getaddrinfo(ip.c_str(), port.c_str(), &address_info, &res)) != 0)\{\par
00204         cerr << {\cf22 "getaddrinfo error: "} << gai_strerror(errno) << endl;\par
00205         {\cf20 //exit(1);}\par
00206         {\cf19 return} status;\par
00207     \}\par
00208     address_info.ai_addrlen = res->ai_addrlen;\par
00209     address_info.ai_addr = res->ai_addr;\par
00210     freeaddrinfo(res);\par
00211     status = (int)recvfrom(sock, buffer, len-1, 0,address_info.ai_addr, &address_info.ai_addrlen);\par
00212     {\cf19 if} (status < 0) \{\par
00213         {\cf20 //exit(1);}\par
00214         cerr << {\cf22 "readFrom error: "} << gai_strerror(errno) << endl;\par
00215     \}\par
00216     buf = string(buffer); \par
00217     {\cf19 return} status;\par
00218 \}\par
00219 \par
00220 {\cf18 int} Socket::socket_set_opt({\cf18 int} level, {\cf18 int} optname, {\cf18 void}* optval)\{\par
00221     {\cf18 unsigned} {\cf18 int} len = {\cf17 sizeof}(optval);\par
00222     {\cf18 int} status = ::setsockopt(sock,level,optname,optval,len);\par
00223     {\cf19 if} (status < 0) \{\par
00224         {\cf20 //exit(1);}\par
00225         cerr << {\cf22 "socket_set_opt error: "} << gai_strerror(errno) << endl;\par
00226     \}\par
00227     {\cf19 return} status;\par
00228 \}\par
00229 \par
00230 {\cf18 int} Socket::socket_get_opt({\cf18 int} level, {\cf18 int} optname, {\cf18 void}* optval)\{\par
00231     {\cf18 unsigned} {\cf18 int} len = {\cf17 sizeof}(optval);\par
00232     {\cf18 int} status = ::getsockopt(sock,level,optname,optval,&len);\par
00233     {\cf19 if} (status < 0) \{\par
00234         {\cf20 //exit(1);}\par
00235         cerr << {\cf22 "socket_get_opt error: "} << gai_strerror(errno) << endl;\par
00236     \}\par
00237     {\cf19 return} status;\par
00238 \}\par
00239 \par
00240 {\cf18 int} Socket::set_blocking()\{\par
00241     {\cf18 long} status = fcntl(sock, F_GETFL, NULL);\par
00242     {\cf19 if} (status < 0) \{\par
00243         {\cf20 //exit(1);}\par
00244         cerr << {\cf22 "set_blocking(get) error: "} << gai_strerror(errno) << endl;\par
00245     \}\par
00246     status &= (~O_NONBLOCK);\par
00247     status = fcntl(sock, F_SETFL, status);\par
00248     {\cf19 if} (status < 0) \{\par
00249         {\cf20 //exit(1);}\par
00250         cerr << {\cf22 "set_blocking(set) error: "} << gai_strerror(errno) << endl;\par
00251     \}\par
00252     {\cf19 return} ({\cf18 int})status;\par
00253 \}\par
00254 \par
00255 {\cf18 int} Socket::set_non_blocking()\{\par
00256     {\cf18 long} status = fcntl(sock, F_GETFL, NULL);\par
00257     {\cf19 if} (status < 0) \{\par
00258         {\cf20 //exit(1);}\par
00259         cerr << {\cf22 "set_non_blocking(get) error: "} << gai_strerror(errno) << endl;\par
00260     \}\par
00261     status |= O_NONBLOCK;\par
00262     status = fcntl(sock, F_SETFL, status);\par
00263     {\cf19 if} (status < 0) \{\par
00264         {\cf20 //exit(1);}\par
00265         cerr << {\cf22 "set_non_blocking(set) error: "} << gai_strerror(errno) << endl;\par
00266     \}\par
00267     {\cf19 return} ({\cf18 int})status;\par
00268 \}\par
00269 \par
00270 {\cf18 int} Socket::socket_shutdown({\cf18 int} how)\{\par
00271     {\cf18 int} status = ::shutdown(sock, how);\par
00272     {\cf19 if} (status < 0) \{\par
00273         {\cf20 //exit(1);}\par
00274         cerr << {\cf22 "shutdown error: "} << gai_strerror(errno) << endl;\par
00275     \}\par
00276     {\cf19 return} status;\par
00277 \}\par
00278 \par
00279 {\cf18 void} Socket::close()\{\par
00280     ::close(sock);\par
00281 \}\par
00282 \par
00283 {\cf18 int} Socket::select(vector<Socket> *reads, vector<Socket> *writes, vector<Socket> *exceptions,{\cf18 int} seconds)\{\par
00284     {\cf18 int} {\cf18 id} = reads->at(0).sock;\par
00285     {\cf17 struct }timeval tv;\par
00286     fd_set readfds;\par
00287     fd_set writefds;\par
00288     fd_set exceptfds;\par
00289     \par
00290     tv.tv_sec = seconds;\par
00291     tv.tv_usec = 0;\par
00292     \par
00293     \par
00294     FD_ZERO(&readfds);\par
00295     \par
00296     FD_ZERO(&writefds);\par
00297     \par
00298     FD_ZERO(&exceptfds);\par
00299     \par
00300     {\cf18 int} maxSock = 0;\par
00301     {\cf19 if}(reads != NULL)\{\par
00302         {\cf19 for} ({\cf18 int} i = 0; i < reads->size(); i++) \{\par
00303             {\cf18 int} sockInt = reads->at(i).sock;\par
00304             {\cf19 if} (sockInt > maxSock) \{\par
00305                 maxSock = sockInt;\par
00306             \}\par
00307             FD_SET(sockInt, &readfds);\par
00308         \}\par
00309     \}\par
00310     {\cf19 if}(writes != NULL)\{\par
00311         {\cf19 for} ({\cf18 int} i = 0; i < writes->size(); i++) \{\par
00312             {\cf18 int} sockInt = writes->at(i).sock;\par
00313             {\cf19 if} (sockInt > maxSock) \{\par
00314                 maxSock = sockInt;\par
00315             \}\par
00316             FD_SET(sockInt, &writefds);\par
00317         \}\par
00318     \}\par
00319     {\cf19 if}(exceptions != NULL)\{\par
00320         {\cf19 for} ({\cf18 int} i = 0; i < exceptions->size(); i++) \{\par
00321             {\cf18 int} sockInt = exceptions->at(i).sock;\par
00322             {\cf19 if} (sockInt > maxSock) \{\par
00323                 maxSock = sockInt;\par
00324             \}\par
00325             FD_SET(sockInt, &exceptfds);\par
00326         \}\par
00327     \}\par
00328     \par
00329     {\cf20 // Um writefds und exceptfds k\'FCmmern wir uns nicht:}\par
00330     {\cf18 int} result = ::select(maxSock+1, &readfds, &writefds, &exceptfds, &tv);\par
00331     \par
00332     {\cf19 if} (result < 0) \{\par
00333         {\cf20 //exit(1);}\par
00334         cerr << {\cf22 "select error: "} << gai_strerror(errno) << endl;\par
00335     \}\par
00336     {\cf19 if} (reads != NULL) \{\par
00337         {\cf19 for} ({\cf18 int} i = ({\cf18 int})reads->size()-1; i >= 0; i--) \{\par
00338             {\cf19 if} (!FD_ISSET(reads->at(i).sock, &readfds)) \{\par
00339                 reads->erase(reads->begin()+i);\par
00340             \}\par
00341         \}\par
00342     \}\par
00343     {\cf19 if} (writes != NULL) \{\par
00344         {\cf19 for} ({\cf18 int} i = ({\cf18 int})writes->size()-1; i >= 0; i--) \{\par
00345             {\cf19 if} (!FD_ISSET(writes->at(i).sock, &writefds)) \{\par
00346                 writes->erase(reads->begin()+i);\par
00347             \}\par
00348         \}\par
00349     \}\par
00350     {\cf19 if} (exceptions != NULL) \{\par
00351         {\cf19 for} ({\cf18 int} i = ({\cf18 int})exceptions->size()-1; i >= 0; i--) \{\par
00352             {\cf19 if} (!FD_ISSET(exceptions->at(i).sock, &exceptfds)) \{\par
00353                 exceptions->erase(exceptions->begin()+i);\par
00354             \}\par
00355         \}\par
00356     \}\par
00357     {\cf19 return} result;\par
00358 \}\par
00359 \par
00360 {\cf18 string} Socket::ipFromHostName({\cf18 string} hostname)\{\par
00361     hostent * record = gethostbyname(hostname.c_str());\par
00362     {\cf19 if}(record == NULL)\par
00363     \{\par
00364         cerr << {\cf22 "Is unavailable: "} << hostname << endl;\par
00365         exit(1);\par
00366     \}\par
00367     in_addr * address = (in_addr * )record->h_addr;\par
00368     {\cf18 string} ip_address = inet_ntoa(* address);\par
00369     {\cf19 return} ip_address;\par
00370 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Socket.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/Socket.h}
{\xe \v src/Socket.h}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <sys/types.h>}\par
{\f2 #include <sys/socket.h>}\par
{\f2 #include <sys/ioctl.h>}\par
{\f2 #include <netinet/in.h>}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <netdb.h>}\par
{\f2 #include <arpa/inet.h>}\par
{\f2 #include <vector>}\par
{\f2 #include <sys/un.h>}\par
{\f2 #include <errno.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Socket}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Socket.h\par \pard\plain 
{\tc\tcl2 \v src/Socket.h}
{\xe \v src/Socket.h}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 //}\par
00002 {\cf20 //  Socket.h}\par
00003 {\cf20 //  SocketServer}\par
00004 {\cf20 //}\par
00005 {\cf20 //  Created by Kay Makowsky on 14.06.16.}\par
00006 {\cf20 //  Copyright \'A9 2016 Kay Makowsky. All rights reserved.}\par
00007 {\cf20 //}\par
00008 \par
00009 {\cf21 #ifndef SOCKET_H}\par
00010 {\cf21 #define SOCKET_H}\par
00011 {\cf21 #include <iostream>}\par
00012 {\cf21 #include <stdlib.h>}\par
00013 {\cf21 #include <string.h>}\par
00014 {\cf21 #include <unistd.h>}\par
00015 {\cf21 #include <sys/types.h>}\par
00016 {\cf21 #include <sys/socket.h>}\par
00017 {\cf21 #include <sys/ioctl.h>}\par
00018 {\cf21 #include <netinet/in.h>}\par
00019 {\cf21 #include <fcntl.h>}\par
00020 {\cf21 #include <netdb.h>}\par
00021 {\cf21 #include <arpa/inet.h>}\par
00022 {\cf21 #include <vector>}\par
00023 {\cf21 #include <sys/un.h>}\par
00024 {\cf21 #include <errno.h>}\par
00025 \par
00026 {\cf17 class }Socket\par
00027 \{\par
00028 {\cf17 public}:\par
00029     {\cf18 int} sock;\par
00030     std::string address;\par
00031     std::string port;\par
00032     {\cf17 struct }addrinfo address_info;\par
00033     {\cf17 struct }sockaddr_storage their_addr;\par
00034     Socket();\par
00035     Socket({\cf18 int} domain,{\cf18 int} type,{\cf18 int} protocol);\par
00036     {\cf18 int} bind(std::string ip, std::string port);\par
00037     {\cf18 int} connect(std::string ip, std::string port);\par
00038     {\cf18 int} listen({\cf18 int} max_queue);\par
00039     Socket accept();\par
00040     {\cf18 int} socket_write(std::string msg);\par
00041     {\cf18 int} socket_read(std::string &buf,{\cf18 int} len);\par
00042     {\cf18 int} socket_safe_read(std::string &buf,{\cf18 int} len,{\cf18 int} seconds);\par
00043     {\cf18 int} socket_writeTo(std::string msg, std::string ip, std::string port);\par
00044     {\cf18 int} socket_readFrom(std::string &buf, {\cf18 int} len, std::string ip, std::string port);\par
00045     {\cf18 int} socket_set_opt({\cf18 int} level, {\cf18 int} optname, {\cf18 void}* optval);\par
00046     {\cf18 int} socket_get_opt({\cf18 int} level, {\cf18 int} optname, {\cf18 void}* optval);\par
00047     {\cf18 int} set_blocking();\par
00048     {\cf18 int} set_non_blocking();\par
00049     {\cf18 int} socket_shutdown({\cf18 int} how);\par
00050     {\cf18 void} close();\par
00051     {\cf17 static} {\cf18 int} select(std::vector<Socket> *reads, std::vector<Socket> *writes, std::vector<Socket> *exceptions,{\cf18 int} seconds);\par
00052     {\cf17 static} std::string ipFromHostName(std::string hostname);\par
00053 \};\par
00054 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread_pair.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread_pair.cpp}
{\xe \v src/thread_pair.cpp}
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "thread_pair.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
thread_pair.cpp\par \pard\plain 
{\tc\tcl2 \v src/thread_pair.cpp}
{\xe \v src/thread_pair.cpp}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "thread_pair.h"}\par
00002 \par
00003 {\cf17 using namespace }std;\par
00004 \par
00005 thread_pair::thread_pair(MessageQueue write_queue_id, MessageQueue common_queue, {\cf18 int} idx_thp, \par
00006         std::shared_ptr<keep_running_flags> shpt_keep_running, std::shared_ptr<connections> shpt_conn, \par
00007         {\cf20 //std::shared_ptr<signal_synch> shpt_sigsyn, }\par
00008         std::shared_ptr<Semaphore> shpt_sem)\par
00009 \{\par
00010     {\cf20 // _shpt_sigsyn = shpt_sigsyn;}\par
00011     _write_queue = write_queue_id;\par
00012 \par
00013     assert(_write_queue && {\cf22 "write_queue not operative."});\par
00014     assert(common_queue && {\cf22 "read_queue (common queue) not operative."});\par
00015 \par
00016     {\cf20 // _accept_mutex = std::make_shared<mutex>();}\par
00017 \par
00018     _common_queue = common_queue;\par
00019     _idx_thp = idx_thp;\par
00020     _sharedptr_keep_running = shpt_keep_running;\par
00021     _p_cur_connections = shpt_conn;\par
00022     _shpt_semIPCfile = shpt_sem;\par
00023 \par
00024     {\cf19 if} (pipe(_pipe) < 0 ) \{\par
00025         assert({\cf17 false} && {\cf22 "Cannot create a pipe"});\par
00026     \}\par
00027 \par
00028     th_r = std::thread(&thread_pair::reader_thread, {\cf17 this}, idx_thp);\par
00029     th_w = std::thread(&thread_pair::writer_thread, {\cf17 this}, idx_thp);\par
00030 \}\par
00031 \par
00032 \par
00033 {\cf18 void} thread_pair::Attending_Read_Socket(socket_data_t &sdt)\par
00034 \{\par
00035     {\cf18 int} status;\par
00036     Socket sock;\par
00037     sock.sock = sdt.sd;\par
00038     std::string msgin;\par
00039     std::string msgout;\par
00040 \par
00041     protomsg::st_protomsg v_protomsg;\par
00042 \par
00043     LOG_DEBUG << {\cf22 "Reading from sd "} << sdt.sd;\par
00044 \par
00045     {\cf19 if}((status=sock.socket_read(msgin,1024)) <= 0) \par
00046     \{\par
00047         LOG_ERROR << {\cf22 "Socket_read error: "} << errno << {\cf22 ":"} << strerror(errno);\par
00048         LOG_ERROR << {\cf22 "Socket sd: "} << sdt.sd << {\cf22 " IP:Port: "} << \par
00049                inet_ntoa(sdt.sockaddr.sin_addr) << {\cf22 ":"} << ntohs(sdt.sockaddr.sin_port);\par
00050 \par
00051         remove_sockdata(sdt);\par
00052         _p_cur_connections->unregister_conn(sdt.idx_con, *_shpt_semIPCfile);\par
00053         close(sdt.sd);\par
00054         {\cf19 return};\par
00055     \}\par
00056     sdt.rcvinfo = msgin;\par
00057 \par
00058     {\cf20 // TO DO - Check IP is in table. Not needed since AccceptThread checks for valid IP.}\par
00059 \par
00060     {\cf19 if}(!Getting_Json_Msg_Received(msgin, v_protomsg, msgout))\par
00061     \{\par
00062         LOG_ERROR << {\cf22 "Error Message Format (json): "} << msgin;\par
00063         LOG_ERROR << {\cf22 "Socket sd: "} << sdt.sd << {\cf22 " IP:Port: "} << \par
00064             inet_ntoa(sdt.sockaddr.sin_addr) << {\cf22 ":"} << ntohs(sdt.sockaddr.sin_port);\par
00065 \par
00066         {\cf20 // Send back MSGIN original.}\par
00067         v_protomsg.q_write = _common_queue.getid();  {\cf20 // Not usefull in this case...}\par
00068         {\cf19 if}(!_write_queue.send(&v_protomsg, msgin)) \par
00069         \{\par
00070             LOG_ERROR << {\cf22 "Impossible to send to Writer_Thread through _write_queue: "} << sdt.sd;\par
00071             remove_sockdata(sdt);\par
00072             _p_cur_connections->unregister_conn(sdt.idx_con, *_shpt_semIPCfile);\par
00073             close(sdt.sd);\par
00074             {\cf19 return};\par
00075         \}\par
00076     \}\par
00077     {\cf19 else} \par
00078     \{\par
00079         LOG_DEBUG << {\cf22 "Sending to common queue for TuxCli..."};\par
00080         {\cf20 // Send MSGOUT to common queue to process by TuxCli }\par
00081         v_protomsg.q_write = _write_queue.getid();  {\cf20 // Queue to respond to proper Writer_Thread...}\par
00082         {\cf19 if}(!_common_queue.send(&v_protomsg, msgout)) \par
00083         \{\par
00084             LOG_ERROR << {\cf22 "Impossible to send to TuxCli through _common_queue: "} << sdt.sd;\par
00085             remove_sockdata(sdt);\par
00086             _p_cur_connections->unregister_conn(sdt.idx_con, *_shpt_semIPCfile);\par
00087             close(sdt.sd);\par
00088             {\cf19 return};\par
00089         \}\par
00090     \}\par
00091 \}\par
00092 \par
00093 {\cf18 int} thread_pair::Getting_Json_Msg_Received({\cf18 string} &msgin, protomsg::st_protomsg &v_protomsg, {\cf18 string} &msgout)\par
00094 \{\par
00095     Json::Value json_msg;\par
00096     stringstream ss(msgin);\par
00097     ss >> json_msg;\par
00098 \par
00099     v_protomsg.terf = json_msg[{\cf22 "TERF"}].asInt();\par
00100     v_protomsg.terl = json_msg[{\cf22 "TERL"}].asInt();\par
00101     strncpy(v_protomsg.guid, json_msg[{\cf22 "GUID"}].asCString(), {\cf17 sizeof}(v_protomsg.guid)-1);\par
00102     strncpy(v_protomsg.pid, json_msg[{\cf22 "PID"}].asCString(), {\cf17 sizeof}(v_protomsg.pid)-1);\par
00103     strncpy(v_protomsg.aid, json_msg[{\cf22 "AID"}].asCString(), {\cf17 sizeof}(v_protomsg.aid)-1);\par
00104     strncpy(v_protomsg.cabx, json_msg[{\cf22 "CABX"}].asCString(), {\cf17 sizeof}(v_protomsg.cabx)-1);\par
00105     msgout = std::string(json_msg[{\cf22 "MSG"}].asCString());\par
00106 \par
00107     v_protomsg.mtype = protomsg::TYPE_NORMAL_MSG;\par
00108 \par
00109     LOG_DEBUG << {\cf22 "v_protomsg:"} << v_protomsg;\par
00110 \par
00111     {\cf19 if} (v_protomsg.terf==0 || v_protomsg.terl == 0 || \par
00112         strlen(v_protomsg.guid) == 0 || strlen(v_protomsg.pid) == 0 || \par
00113         strlen(v_protomsg.aid) == 0 || strlen(v_protomsg.cabx) == 0 || \par
00114         msgout.size() == 0)\par
00115     \{\par
00116         {\cf19 return} 0;\par
00117     \}\par
00118     \par
00119     {\cf19 return} 1;\par
00120 \}\par
00121 \par
00122 {\cf18 void} thread_pair::reader_thread({\cf18 int} idx_thp)\par
00123 \{\par
00124     list<socket_data_t> lsdt;\par
00125     {\cf18 int} readpipe=get_read_pipe();\par
00126     LOG_DEBUG << {\cf22 "reader_thread "} << idx_thp;\par
00127 \par
00128     {\cf19 while}(_sharedptr_keep_running->_keep_accepting.load()) \par
00129     \{\par
00130         fd_set readset;\par
00131         {\cf18 int} nfds, ret_sel;\par
00132 \par
00133         {\cf20 /*}\par
00134 {\cf20         std::unique_lock<std::mutex> lck(_shpt_sigsyn->_cv_mutex);}\par
00135 {\cf20 }\par
00136 {\cf20         auto shpt_keep_running = _sharedptr_keep_running;}\par
00137 {\cf20         // wait for up to 10 seconds}\par
00138 {\cf20         _shpt_sigsyn->_cv.wait_for(lck, std::chrono::seconds(10),}\par
00139 {\cf20               [&shpt_keep_running]() \{ return !shpt_keep_running->_keep_accepting.load(); \});}\par
00140 {\cf20         */}\par
00141 \par
00142         {\cf20 //sleep(1);}\par
00143         {\cf20 // STEP 1 - Getting all sockets descriptors to SELECT.}\par
00144 \par
00145         get_sockdata_list(lsdt);\par
00146 \par
00147         FD_ZERO(&readset);\par
00148         nfds = 0; \par
00149 \par
00150         FD_SET(readpipe, &readset);\par
00151         nfds = (readpipe<nfds) ? nfds : (readpipe+1);\par
00152         \par
00153         {\cf19 for}({\cf17 auto} it=lsdt.begin(); it != lsdt.end(); it++) \par
00154         \{\par
00155             FD_SET(it->sd, &readset);\par
00156             nfds = (it->sd < nfds) ? nfds : (it->sd+1);\par
00157         \}\par
00158 \par
00159         LOG_DEBUG << {\cf22 "Accepting ndfs="} << nfds << {\cf22 " connections. "} << {\cf17 sizeof}(readset);\par
00160 \par
00161         {\cf19 if}((ret_sel=select(nfds, &readset, NULL, NULL, NULL)) < 0 ) \par
00162         \{\par
00163             {\cf18 int} someerror=errno;\par
00164             LOG_ERROR << {\cf22 "SELECT FAILED: ("} << ret_sel << {\cf22 ") "} << strerror(someerror);\par
00165             {\cf19 if}( someerror == EINTR ) \par
00166                 {\cf19 continue};\par
00167             {\cf19 return};\par
00168         \}\par
00169 \par
00170         {\cf19 if}( FD_ISSET(readpipe, &readset) ) \par
00171         \{\par
00172             read(readpipe,protopipe::GETPIPEMSG,protopipe::LEN_PIPEMSG);\par
00173             {\cf19 if}(protopipe::GETPIPEMSG[0]==protopipe::ENDING_PIPE[0]) \{\par
00174                 LOG_DEBUG << {\cf22 "ENDING_PIPE received."};\par
00175                 {\cf19 continue};   {\cf20 // TO REMOVE. Maybe it needs to finish all messages. }\par
00176             \}\par
00177             {\cf19 else} \par
00178                 LOG_DEBUG << {\cf22 "WEAKUP_PIPE received."};\par
00179 \par
00180         \}\par
00181 \par
00182         {\cf19 for}({\cf17 auto} it=lsdt.begin(); it != lsdt.end(); it++) \par
00183         \{\par
00184             {\cf19 if}(_p_cur_connections->check_obsolete(it->idx_con, *_shpt_semIPCfile) != 0 ) \par
00185             \{\par
00186                 {\cf20 /* Obsolete or some issues */}\par
00187 \par
00188                 LOG_DEBUG << {\cf22 "SD obsolete (deleted): "} << it->sd << {\cf22 " IP:Port: "} << \par
00189                     inet_ntoa(it->sockaddr.sin_addr) << {\cf22 ":"} << ntohs(it->sockaddr.sin_port);\par
00190                 \par
00191                 remove_sockdata(*it);\par
00192                 close(it->sd);\par
00193             \} \par
00194             {\cf19 else} \par
00195             {\cf19 if}(FD_ISSET(it->sd, &readset) ) \par
00196             \{\par
00197                 \par
00198                 {\cf20 // Getting message from socket...}\par
00199                 Attending_Read_Socket(*it);\par
00200 \par
00201             \}\par
00202         \}\par
00203 \par
00204     \}\par
00205 \par
00206     {\cf20 // pthread_sigmask(SIG_SETMASK, &_shpt_sigsyn->_sigset_old, nullptr);}\par
00207 \par
00208     LOG_DEBUG << {\cf22 "Ending reader_thread "} << idx_thp;\par
00209 \}\par
00210 \par
00211 {\cf18 void} thread_pair::Prepare_Msg_Json_To_Send(protomsg::st_protomsg &v_protomsg, {\cf18 string} msg, Json::Value &json_msg)\par
00212 \{\par
00213     json_msg[{\cf22 "TERF"}] = v_protomsg.terf;\par
00214     json_msg[{\cf22 "TERL"}] = v_protomsg.terl;\par
00215     json_msg[{\cf22 "GUID"}] = std::string(v_protomsg.guid);\par
00216     json_msg[{\cf22 "PID"}] = std::string(v_protomsg.pid);\par
00217     json_msg[{\cf22 "AID"}] = std::string(v_protomsg.aid);\par
00218     json_msg[{\cf22 "CABX"}] = std::string(v_protomsg.cabx);\par
00219     json_msg[{\cf22 "MSG"}] = msg;\par
00220 \}\par
00221 \par
00222 {\cf18 void} thread_pair::writer_thread({\cf18 int} idx_thp)\par
00223 \{\par
00224     {\cf18 long} type;\par
00225     std::string msg, msgout;\par
00226     Json::Value json_msg;\par
00227     protomsg::st_protomsg v_protomsg;\par
00228     connection cur_conn;\par
00229     Socket send_sock;\par
00230 \par
00231     LOG_DEBUG << {\cf22 "writer_thread "} << idx_thp;\par
00232 \par
00233     {\cf19 while}(_sharedptr_keep_running->_keep_working.load()) \par
00234     \{\par
00235         {\cf20 /*}\par
00236 {\cf20         std::unique_lock<std::mutex> lck(_shpt_sigsyn->_cv_mutex);}\par
00237 {\cf20 }\par
00238 {\cf20         auto shpt_keep_running = _sharedptr_keep_running;}\par
00239 {\cf20         // wait for up to 10 seconds}\par
00240 {\cf20         _shpt_sigsyn->_cv.wait_for(lck, std::chrono::seconds(10),}\par
00241 {\cf20               [&shpt_keep_running]() \{ return !shpt_keep_running->_keep_working.load(); \});}\par
00242 {\cf20         */}\par
00243         {\cf20 //sleep(1);}\par
00244         {\cf20 // STEP 1 - ReadFromQueue  (idx_con on message)}\par
00245         \par
00246         _write_queue.rcv(&v_protomsg, msg);\par
00247 \par
00248         {\cf19 if}(v_protomsg.mtype == protomsg::TYPE_ENDING_MSG) \par
00249         \{\par
00250             LOG_DEBUG << {\cf22 "Received protomsg::TYPE_ENDING_MSG"}; \par
00251             {\cf19 continue};\par
00252         \}\par
00253 \par
00254         Prepare_Msg_Json_To_Send(v_protomsg, msg, json_msg);\par
00255         \par
00256         _p_cur_connections->ending_operation(v_protomsg.idx, *_shpt_semIPCfile, cur_conn);\par
00257 \par
00258         {\cf20 // STEP 2 - Send msg to socket }\par
00259 \par
00260         send_sock.sock = cur_conn.sd;\par
00261 \par
00262         stringstream ss;\par
00263         {\cf18 string} field;\par
00264         ss << json_msg;\par
00265     \par
00266         {\cf19 while} (getline(ss, field)) \par
00267             msgout += field;\par
00268     \par
00269         LOG_DEBUG << {\cf22 "Sending msgout: "} << msgout; \par
00270 \par
00271         send_sock.socket_write(msgout);\par
00272         \par
00273         msgout.clear();\par
00274     \}\par
00275 \par
00276     {\cf20 //pthread_sigmask(SIG_SETMASK, &_shpt_sigsyn->_sigset_old, nullptr);}\par
00277     LOG_DEBUG << {\cf22 "Ending writer_thread "} << idx_thp;\par
00278 \}\par
00279 \par
00280 {\cf18 int} thread_pair::add_sockdata(socket_data_t sdt)\par
00281 \{\par
00282     std::lock_guard<std::mutex> l_guard\{_accept_mutex\};\par
00283 \par
00284     _sockdata.emplace_back(sdt);\par
00285     \par
00286     LOG_DEBUG << {\cf22 "add_sockdata OK!! "} << sdt.sd;\par
00287     {\cf19 return} 0;\par
00288 \}\par
00289 \par
00290 {\cf18 int} thread_pair::remove_sockdata({\cf17 const} socket_data_t &sdt)\par
00291 \{\par
00292     std::lock_guard<std::mutex> l_guard\{_accept_mutex\};\par
00293 \par
00294     std::list<socket_data_t>::iterator findIter = std::find(_sockdata.begin(), _sockdata.end(), sdt);\par
00295 \par
00296     {\cf19 if}(findIter == _sockdata.end()) \{\par
00297         LOG_DEBUG << {\cf22 "remove_sockdata NOT FOUND!! "} << sdt.sd;\par
00298         {\cf19 return} -1;\par
00299     \}\par
00300     {\cf19 else} \{\par
00301         socket_data_t item = *findIter;\par
00302         _sockdata.remove(item);\par
00303         LOG_DEBUG << {\cf22 "remove_sockdata OK!! "} << sdt.sd;\par
00304         {\cf19 return} 0;\par
00305     \}\par
00306 \}\par
00307 \par
00308 {\cf18 int} thread_pair::get_sockdata_list(list<socket_data_t> &lsdt)\par
00309 \{\par
00310     std::lock_guard<std::mutex> l_guard\{_accept_mutex\};\par
00311 \par
00312     lsdt = _sockdata;\par
00313     \par
00314     LOG_DEBUG << {\cf22 "get_sockdata_list OK!! lsdt.size()="} << lsdt.size(); \par
00315 \par
00316     {\cf19 return} 0;\par
00317 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/thread_pair.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/thread_pair.h}
{\xe \v src/thread_pair.h}
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <atomic>}\par
{\f2 #include <condition_variable>}\par
{\f2 #include <mutex>}\par
{\f2 #include <thread>}\par
{\f2 #include <future>}\par
{\f2 #include <list>}\par
{\f2 #include <algorithm>}\par
{\f2 #include <json/json.h>}\par
{\f2 #include <json/value.h>}\par
{\f2 #include "common.h"}\par
{\f2 #include "ipclib.h"}\par
{\f2 #include "checker_pids.h"}\par
{\f2 #include "connections.h"}\par
{\f2 #include "protocol_msg.h"}\par
{\f2 #include "Socket.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b socket_data_t}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b thread_pair}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
thread_pair.h\par \pard\plain 
{\tc\tcl2 \v src/thread_pair.h}
{\xe \v src/thread_pair.h}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef THREAD_PAIR_H}\par
00002 {\cf21 #define THREAD_PAIR_H}\par
00003 \par
00004 {\cf21 #include <atomic>}\par
00005 {\cf21 #include <condition_variable>}\par
00006 {\cf21 #include <mutex>}\par
00007 {\cf21 #include <thread>}\par
00008 {\cf21 #include <future>}\par
00009 {\cf21 #include <list>}\par
00010 {\cf21 #include <algorithm>}\par
00011 {\cf21 #include <json/json.h>}\par
00012 {\cf21 #include <json/value.h>}\par
00013 \par
00014 {\cf21 #include "common.h"}\par
00015 {\cf21 #include "ipclib.h"}\par
00016 {\cf21 #include "checker_pids.h"}\par
00017 {\cf21 #include "connections.h"}\par
00018 {\cf21 #include "protocol_msg.h"}\par
00019 {\cf21 #include "Socket.h"}\par
00020 \par
00021 {\cf20 /*}\par
00022 {\cf20 struct signal_synch}\par
00023 {\cf20 \{}\par
00024 {\cf20     sigset_t _sigset_new;}\par
00025 {\cf20     sigset_t _sigset_old;}\par
00026 {\cf20     std::mutex _cv_mutex;}\par
00027 {\cf20     std::condition_variable _cv;}\par
00028 {\cf20     std::future<int>  _ft_signal_handler;}\par
00029 {\cf20     ~signal_synch()\{ LOG_DEBUG << "Dtor signal_synch."; \}}\par
00030 {\cf20 \};}\par
00031 {\cf20 */}\par
00032 \par
00033 {\cf17 struct }socket_data_t \{\par
00034     {\cf18 int}         sd;                 {\cf20 // Socket Descriptor.}\par
00035     sockaddr_in sockaddr;           {\cf20 // OK Below}\par
00036     {\cf18 int}         idx_con;            {\cf20 // Index to Array conexiones }\par
00037     std::string      rcvinfo;       {\cf20 // String to keep incoming msg.}\par
00038     {\cf18 bool} operator==({\cf17 const} socket_data_t &c){\cf17  const }\par
00039 {\cf17         }\{   \par
00040             {\cf20 // LOG_DEBUG << "        sd " << sd << ":" << c.sd;}\par
00041             {\cf20 // LOG_DEBUG << "    s_addr " << sockaddr.sin_addr.s_addr << ":" << c.sockaddr.sin_addr.s_addr;}\par
00042             {\cf20 // LOG_DEBUG << "sin_family " << sockaddr.sin_family << ":" << c.sockaddr.sin_family;}\par
00043             {\cf20 // LOG_DEBUG << "  sin_port " << sockaddr.sin_port << ":" << c.sockaddr.sin_port;}\par
00044             {\cf20 // LOG_DEBUG << "   idx_con " << idx_con << ":" << c.idx_con;}\par
00045             {\cf19 return} sd==c.sd && sockaddr.sin_addr.s_addr==c.sockaddr.sin_addr.s_addr && sockaddr.sin_family==c.sockaddr.sin_family && \par
00046             sockaddr.sin_port==c.sockaddr.sin_port && idx_con==c.idx_con;\par
00047         \};\par
00048 \};\par
00049 \par
00050 {\cf17 class }thread_pair\par
00051 \{\par
00052 {\cf17 public}:\par
00053     std::thread th_r;\par
00054     std::thread th_w;\par
00055     \par
00056 {\cf17 private}:\par
00057     {\cf18 int} _idx_thp\{-1\};\par
00058     {\cf18 int} _pipe[2]\{-1,-1\};\par
00059     MessageQueue _write_queue;\par
00060     MessageQueue _common_queue;\par
00061     std::mutex _accept_mutex;\par
00062     {\cf20 //shared_ptr<mutex> _accept_mutex;}\par
00063     std::list<socket_data_t> _sockdata;\par
00064     std::shared_ptr<keep_running_flags> _sharedptr_keep_running;\par
00065     std::shared_ptr<connections> _p_cur_connections;\par
00066     {\cf20 //std::shared_ptr<signal_synch> _shpt_sigsyn;}\par
00067     std::shared_ptr<Semaphore> _shpt_semIPCfile;\par
00068 \par
00069 {\cf17 public}:\par
00070     thread_pair() = {\cf17 delete};\par
00071     thread_pair(MessageQueue write_queue_id, MessageQueue common_queue, {\cf18 int} idx, std::shared_ptr<keep_running_flags> shpt_keep_running, \par
00072         std::shared_ptr<connections> shpt_conn, \par
00073         {\cf20 //std::shared_ptr<signal_synch> shpt_sigsyn, }\par
00074         std::shared_ptr<Semaphore> shpt_sem);\par
00075     {\cf20 // It compiles with shared_ptr }\par
00076     thread_pair({\cf17 const} thread_pair&) \{ LOG_DEBUG << {\cf22 "XAVI - COPY CTOR thread_pair"}; \}; {\cf20 // NOT CALLED!! run emplace_back : default - let emplace_back( ) work!! }\par
00077     {\cf20 // thread_pair(const thread_pair&) = delete; // fail }\par
00078     thread_pair(thread_pair&&) = {\cf17 delete};     {\cf20 // run emplace_back(std::move( )) : default - fail!!}\par
00079     thread_pair& operator=({\cf17 const} thread_pair&) = {\cf19 default};\par
00080     thread_pair& operator=(thread_pair&&) = {\cf17 delete};\par
00081 \par
00082     {\cf18 void} reader_thread({\cf18 int} idx_thp);\par
00083     {\cf18 void} writer_thread({\cf18 int} idx_thp);\par
00084 \par
00085     {\cf18 int} add_sockdata(socket_data_t sdt);\par
00086     {\cf18 int} remove_sockdata({\cf17 const} socket_data_t &sdt);\par
00087     {\cf18 int} get_sockdata_list(std::list<socket_data_t> &lsdt);\par
00088     {\cf18 int} get_size_of_sock_list(){\cf17  const }\{ {\cf19 return} _sockdata.size();\}\par
00089     {\cf18 int} get_read_pipe(){\cf17  const }\{ {\cf19 return} _pipe[0];\}\par
00090     {\cf18 int} get_write_pipe(){\cf17  const }\{ {\cf19 return} _pipe[1];\}\par
00091     {\cf18 int} get_id(){\cf17  const }\{ {\cf19 return} _idx_thp;\}\par
00092     {\cf18 int} get_idx(){\cf17  const }\{ {\cf19 return} _idx_thp-1;\}\par
00093     MessageQueue& get_write_queue() \{ {\cf19 return} _write_queue; \}\par
00094     {\cf18 void} Prepare_Msg_Json_To_Send(protomsg::st_protomsg &v_protomsg, std::string msg, Json::Value &json_msg);\par
00095     {\cf18 void} Attending_Read_Socket(socket_data_t &sdt);\par
00096     {\cf18 int} Getting_Json_Msg_Received(std::string &msgin, protomsg::st_protomsg &v_protomsg, std::string &msgout);\par
00097 \};\par
00098 \par
00099 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/tuxcli_main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/tuxcli_main.cpp}
{\xe \v src/tuxcli_main.cpp}
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <memory>}\par
{\f2 #include <map>}\par
{\f2 #include <json/json.h>}\par
{\f2 #include "common.h"}\par
{\f2 #include "ipclib.h"}\par
{\f2 #include "getcfgfile.h"}\par
{\f2 #include "dispatch_cfg.h"}\par
{\f2 #include "checker_pids.h"}\par
{\f2 #include "plog/Initializers/RollingFileInitializer.h"}\par
{\f2 #include "plog/Initializers/ConsoleInitializer.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b TuxClient}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b LOGLEVEL}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sigterm_func} (int s)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char **argv)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b loglevel}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
auto {\b keep_accepting} = true\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b checker_pids} {\b chk_procs}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v LOGLEVEL\:tuxcli_main.cpp}
{\xe \v tuxcli_main.cpp\:LOGLEVEL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define LOGLEVEL}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 5} of file {\b tuxcli_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:tuxcli_main.cpp}
{\xe \v tuxcli_main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char **  {\i argv})}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 80} of file {\b tuxcli_main.cpp}.}\par
}
{\xe \v sigterm_func\:tuxcli_main.cpp}
{\xe \v tuxcli_main.cpp\:sigterm_func}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sigterm_func (int  {\i s})}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b tuxcli_main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v chk_procs\:tuxcli_main.cpp}
{\xe \v tuxcli_main.cpp\:chk_procs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b checker_pids} chk_procs}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 36} of file {\b tuxcli_main.cpp}.}\par
}
{\xe \v keep_accepting\:tuxcli_main.cpp}
{\xe \v tuxcli_main.cpp\:keep_accepting}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
auto keep_accepting = true}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 23} of file {\b tuxcli_main.cpp}.}\par
}
{\xe \v loglevel\:tuxcli_main.cpp}
{\xe \v tuxcli_main.cpp\:loglevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int loglevel}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 6} of file {\b tuxcli_main.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tuxcli_main.cpp\par \pard\plain 
{\tc\tcl2 \v src/tuxcli_main.cpp}
{\xe \v src/tuxcli_main.cpp}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /***************************************}\par
00002 {\cf20  * GLOBAL VARS - IN COMMON.H}\par
00003 {\cf20  ***************************************/}\par
00004 {\cf21 #if !defined LOGLEVEL}\par
00005 {\cf21 #define LOGLEVEL}\par
00006 {\cf18 int} loglevel;\par
00007 {\cf21 #endif}\par
00008 \par
00009 {\cf21 #include <memory>}\par
00010 {\cf21 #include <map>}\par
00011 {\cf21 #include <json/json.h>}\par
00012 \par
00013 {\cf21 #include "common.h"}\par
00014 {\cf21 #include "ipclib.h"}\par
00015 {\cf21 #include "getcfgfile.h"}\par
00016 {\cf21 #include "dispatch_cfg.h"}\par
00017 {\cf21 #include "checker_pids.h"}\par
00018 {\cf21 #include "plog/Initializers/RollingFileInitializer.h"}\par
00019 {\cf21 #include "plog/Initializers/ConsoleInitializer.h"}\par
00020 \par
00021 {\cf17 using namespace }std;\par
00022 \par
00023 {\cf17 auto} keep_accepting = {\cf17 true};\par
00024 \par
00025 {\cf18 void} sigterm_func({\cf18 int} s) \par
00026 \{\par
00027     LOG_DEBUG << {\cf22 "Received signal "} << s << {\cf22 " : "} << strsignal(s) << \\\par
00028                  {\cf22 " keep_accepting "} << keep_accepting;\par
00029 \par
00030     keep_accepting = {\cf17 false};\par
00031 \par
00032     LOG_DEBUG << {\cf22 "Received signal "} << s << {\cf22 " : "} << strsignal(s) << \\\par
00033                  {\cf22 " keep_accepting "} << keep_accepting;\par
00034 \}\par
00035 \par
00036 checker_pids chk_procs;\par
00037 \par
00038 {\cf17 class }TuxClient \par
00039 \{\par
00040     {\cf18 int} idx_cli\{0\};\par
00041     MessageQueue &common_queue;\par
00042 {\cf17 public}:\par
00043     TuxClient({\cf18 int} idx, MessageQueue &queue):idx_cli\{idx\},common_queue\{queue\}\{\}\par
00044     {\cf18 int} operator()();\par
00045 \};\par
00046 \par
00047 {\cf18 int} TuxClient::operator()()\par
00048 \{\par
00049     LOG_DEBUG << {\cf22 "Running TuxClient "} << idx_cli;\par
00050 \par
00051     {\cf19 while}(chk_procs.get_run_flags()->_keep_accepting.load()) \par
00052     \{\par
00053         std::string msgin;\par
00054         protomsg::st_protomsg v_protomsg;\par
00055 \par
00056         common_queue.rcv(&v_protomsg, msgin);\par
00057 \par
00058         {\cf19 if}(keep_accepting) \par
00059         \{\par
00060             LOG_DEBUG << idx_cli << {\cf22 " Received msg: "} << v_protomsg;\par
00061 \par
00062             msgin += {\cf22 " OK - TX DONE!! "};\par
00063             sleep(1);\par
00064 \par
00065             LOG_DEBUG << idx_cli << {\cf22 " TX EXECUTED OK!! "};\par
00066 \par
00067             MessageQueue msg_resp(v_protomsg.q_write);\par
00068         \par
00069             {\cf19 if}(msg_resp) \{\par
00070                 msg_resp.send(&v_protomsg,msgin);\par
00071             \}\par
00072         \}\par
00073     \}\par
00074 \par
00075     LOG_DEBUG << {\cf22 "Ending TuxClient "} << idx_cli;\par
00076 \par
00077     {\cf19 return} 0;\par
00078 \}\par
00079 \par
00080 {\cf18 int} main({\cf18 int} argc, {\cf18 char} **argv)\par
00081 \{\par
00082     {\cf20 // TO DO }\par
00083     {\cf20 // Get level of log from file config. Now it is only DEBUG.}\par
00084     {\cf17 static} plog::ConsoleAppender<plog::TxtFormatter> consoleAppender;\par
00085     loglevel=plog::verbose;\par
00086     plog::init(plog::verbose, &consoleAppender);\par
00087 \par
00088     {\cf19 if} (argc != 3) \par
00089     \{\par
00090         LOG_ERROR << {\cf22 "Uso: "} << argv[0] << {\cf22 " <IpcFile> <TuxCliSetup> \\n"};\par
00091         exit(1);\par
00092     \}\par
00093 \par
00094     LOG_DEBUG << {\cf22 "tuxcli_main START!!"};\par
00095 \par
00096 \par
00097     {\cf20 // Getting configs files (IPCS and tuxclisetup ) .....}\par
00098 \par
00099     std::string ipcfile_str(argv[1]);\par
00100     std::string tuxclisetup_str(argv[2]);\par
00101 \par
00102     GetCfgFile ipcfile(ipcfile_str);\par
00103     GetCfgFile tuxclisetup(tuxclisetup_str);\par
00104 \par
00105     {\cf19 if}(!ipcfile || !tuxclisetup)\par
00106     \{\par
00107         {\cf19 if}(!ipcfile)\par
00108             LOG_ERROR << {\cf22 "File error: "} << ipcfile_str;\par
00109         {\cf19 else}\par
00110             LOG_ERROR << {\cf22 "File error: "} << tuxclisetup_str;\par
00111         exit(1);\par
00112     \}\par
00113 \par
00114     {\cf17 const} Json::Value ipcs_json = ipcfile.get_json();\par
00115 \par
00116     {\cf20 // We just need common queue id:}\par
00117     {\cf18 int} msg_common_id = ipcs_json[{\cf22 "msg_common_id"}].asInt();\par
00118 \par
00119     MessageQueue common_queue(msg_common_id);\par
00120     {\cf19 if}(!common_queue)\par
00121     \{\par
00122         LOG_ERROR << {\cf22 "Common Queue error: "} << msg_common_id;\par
00123         exit(1);\par
00124     \}\par
00125 \par
00126     {\cf20 // LoadIPTXTable - Load all allowed transaction ID on Shared Memory}\par
00127     \par
00128     {\cf20 // LoadTRMLTable - Load all allowed terminal ID on Shared Memory}\par
00129 \par
00130 \par
00131     {\cf17 auto} previousInterruptHandler_sigsegv = signal(SIGSEGV, sigterm_func);\par
00132 \par
00133 \par
00134     {\cf20 // Launching all processess...}\par
00135 \par
00136     {\cf17 const} Json::Value setup_json = tuxclisetup.get_json();\par
00137 \par
00138     {\cf18 int} min_tux_cli = setup_json[{\cf22 "min_tux_cli"}].asInt();\par
00139     {\cf18 int} max_tux_cli = setup_json[{\cf22 "max_tux_cli"}].asInt();\par
00140     {\cf18 int} xml_n_term  = setup_json[{\cf22 "xml_n_term"}].asInt();\par
00141 \par
00142     {\cf19 for}({\cf18 int} i=0; i < min_tux_cli; i++) \{\par
00143         TuxClient tux(i,common_queue);\par
00144         chk_procs.add(tux,{\cf22 "TuxClient"});\par
00145     \}\par
00146 \par
00147     {\cf20 // Launching all processes... }\par
00148     {\cf18 int} ret=chk_procs();\par
00149 \par
00150     LOG_DEBUG << {\cf22 "Ending tuxcli_main"};\par
00151     \par
00152     (void)signal(SIGSEGV, previousInterruptHandler_sigsegv);\par
00153 \par
00154     {\cf19 return} 0;\par
00155 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
