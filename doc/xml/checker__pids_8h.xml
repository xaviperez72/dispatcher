<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="checker__pids_8h" kind="file" language="C++">
    <compoundname>checker_pids.h</compoundname>
    <includes local="no">signal.h</includes>
    <includes local="no">sys/wait.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">chrono</includes>
    <includes local="no">thread</includes>
    <includes local="no">string</includes>
    <includes local="no">functional</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">atomic</includes>
    <includedby refid="checker__pids_8cpp" local="yes">src/checker_pids.cpp</includedby>
    <includedby refid="dispatch__main_8cpp" local="yes">src/dispatch_main.cpp</includedby>
    <includedby refid="dispatcher_8h" local="yes">src/dispatcher.h</includedby>
    <includedby refid="thread__pair_8h" local="yes">src/thread_pair.h</includedby>
    <includedby refid="tuxcli__main_8cpp" local="yes">src/tuxcli_main.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/checker_pids.h</label>
        <link refid="checker__pids_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="13">
        <label>atomic</label>
      </node>
      <node id="8">
        <label>chrono</label>
      </node>
      <node id="11">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>plog/Log.h</label>
      </node>
      <node id="2">
        <label>signal.h</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="3">
        <label>sys/wait.h</label>
      </node>
      <node id="9">
        <label>thread</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/checker_pids.cpp</label>
        <link refid="checker__pids_8cpp"/>
      </node>
      <node id="1">
        <label>src/checker_pids.h</label>
        <link refid="checker__pids_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/dispatch_main.cpp</label>
        <link refid="dispatch__main_8cpp"/>
      </node>
      <node id="5">
        <label>src/dispatcher.cpp</label>
        <link refid="dispatcher_8cpp"/>
      </node>
      <node id="4">
        <label>src/dispatcher.h</label>
        <link refid="dispatcher_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/thread_pair.cpp</label>
        <link refid="thread__pair_8cpp"/>
      </node>
      <node id="6">
        <label>src/thread_pair.h</label>
        <link refid="thread__pair_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/tuxcli_main.cpp</label>
        <link refid="tuxcli__main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structchecker__struct" prot="public">checker_struct</innerclass>
    <innerclass refid="structkeep__running__flags" prot="public">keep_running_flags</innerclass>
    <innerclass refid="classchecker__pids" prot="public">checker_pids</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>CHECKER_PIDS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECKER_PIDS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/><sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structchecker__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structchecker__struct" kindref="compound">checker_struct</ref><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29" refid="structchecker__struct_1a3914028540b569e66b4d36e44dc9c003" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;int()&gt;<sp/><ref refid="structchecker__struct_1a3914028540b569e66b4d36e44dc9c003" kindref="member">_caller</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Functor<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/><ref refid="structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7" kindref="member">_last_fork</ref>{0};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>of<sp/>last<sp/>fork</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structchecker__struct_1a25b2258433c107a1b447d1e97796c450" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>pid_t<sp/><sp/><ref refid="structchecker__struct_1a25b2258433c107a1b447d1e97796c450" kindref="member">_pid</ref>{0};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pid<sp/>of<sp/>the<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="structchecker__struct_1a8bdef9cac5a8c77492a3dd9d28b99720" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structchecker__struct_1a8bdef9cac5a8c77492a3dd9d28b99720" kindref="member">_procname</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structkeep__running__flags" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structkeep__running__flags" kindref="compound">keep_running_flags</ref><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37" refid="structkeep__running__flags_1aa9ffa8890c1087fc76cbc45970ad0656" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;bool&gt;<sp/><ref refid="structkeep__running__flags_1aa9ffa8890c1087fc76cbc45970ad0656" kindref="member">_keep_accepting</ref>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>true<sp/>keeps<sp/>AcceptThread<sp/>accepting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structkeep__running__flags_1a58676400c1619db399b03dd343b6cde0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;bool&gt;<sp/><ref refid="structkeep__running__flags_1a58676400c1619db399b03dd343b6cde0" kindref="member">_keep_working</ref>{</highlight><highlight class="keyword">true</highlight><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>true<sp/>keeps<sp/>WriterThread<sp/>sending<sp/>last<sp/>operations.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structkeep__running__flags_1ad8f3eacf9377b25f07e8e54f5dfd3b47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkeep__running__flags_1ad8f3eacf9377b25f07e8e54f5dfd3b47" kindref="member">keep_running_flags</ref>(){<sp/>LOG_DEBUG<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;keep_running_flags<sp/>Ctor&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="40" refid="structkeep__running__flags_1a3846905519224859f98afb8ee5d3969f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structkeep__running__flags_1a3846905519224859f98afb8ee5d3969f" kindref="member">~keep_running_flags</ref>(){<sp/>LOG_DEBUG<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;keep_running_flags<sp/>Dtor&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classchecker__pids" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classchecker__pids" kindref="compound">checker_pids</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="47" refid="classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;checker_struct&gt;<sp/><ref refid="classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9" kindref="member">_pids</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>of<sp/>processes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classchecker__pids_1a8ba295ce04686629f2e545eef082688a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structchecker__struct" kindref="compound">checker_struct</ref><sp/><ref refid="classchecker__pids_1a8ba295ce04686629f2e545eef082688a" kindref="member">_dead</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>dead<sp/>process<sp/>on<sp/>wait()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50" refid="classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;keep_running_flags&gt;<sp/><ref refid="classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51" kindref="member">_p_run</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shared<sp/>pointer<sp/>to<sp/>atomic<sp/>bool<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classchecker__pids_1a065564a41603626bb7d1258c0cb075c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classchecker__pids_1a065564a41603626bb7d1258c0cb075c3" kindref="member">_forker</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Identifies<sp/>which<sp/>process<sp/>is<sp/>the<sp/>forker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classchecker__pids_1acd2982254315ed5976aee9f33001baee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classchecker__pids" kindref="compound">checker_pids</ref><sp/>*<ref refid="classchecker__pids_1acd2982254315ed5976aee9f33001baee" kindref="member">_me</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>an<sp/>existing<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classchecker__pids_1a12fce3aed3117c10f47eaddf28fcdba8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>sighandler_t<sp/><ref refid="classchecker__pids_1a12fce3aed3117c10f47eaddf28fcdba8" kindref="member">_previousInterruptHandler_int</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>handler<sp/>for<sp/>SIGINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classchecker__pids_1a19aa5267dd935b87eed2fb7b2192e3de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>sighandler_t<sp/><ref refid="classchecker__pids_1a19aa5267dd935b87eed2fb7b2192e3de" kindref="member">_previousInterruptHandler_usr1</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>handler<sp/>for<sp/>SIGUSR1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classchecker__pids_1a7aaab276668326d002cdd1f4e333c5b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>sighandler_t<sp/><ref refid="classchecker__pids_1a7aaab276668326d002cdd1f4e333c5b7" kindref="member">_previousInterruptHandler_term</ref>{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal<sp/>handler<sp/>for<sp/>SIGTERM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>signal<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classchecker__pids_1a8670706ea3c75c45b7a9e43a99bf5a4e" kindref="member">sigterm_func</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classchecker__pids_1ab2bffb76c0da98777ad2109be0b127ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classchecker__pids_1ab2bffb76c0da98777ad2109be0b127ca" kindref="member">checker_pids</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64" refid="classchecker__pids_1ad481c24cbe8f60fa780cf8f807188a7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classchecker__pids_1ad481c24cbe8f60fa780cf8f807188a7a" kindref="member">checker_pids</ref>(<ref refid="classchecker__pids" kindref="compound">checker_pids</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65" refid="classchecker__pids_1a10b144de7e14bc5cc1934f8f33143397" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classchecker__pids_1a10b144de7e14bc5cc1934f8f33143397" kindref="member">checker_pids</ref>(<ref refid="classchecker__pids" kindref="compound">checker_pids</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66" refid="classchecker__pids_1aa17a1b4c4b9b182fff3d78215488b1e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classchecker__pids" kindref="compound">checker_pids</ref>&amp;<sp/><ref refid="classchecker__pids_1aa17a1b4c4b9b182fff3d78215488b1e4" kindref="member">operator=</ref>(<ref refid="classchecker__pids" kindref="compound">checker_pids</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67" refid="classchecker__pids_1a1e22231fb040beab1861fa5b14a864b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classchecker__pids" kindref="compound">checker_pids</ref>&amp;<sp/><ref refid="classchecker__pids_1a1e22231fb040beab1861fa5b14a864b8" kindref="member">operator=</ref>(<ref refid="classchecker__pids" kindref="compound">checker_pids</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classchecker__pids_1a6318efeaea01e0e716dbd9931bf9c171" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classchecker__pids_1a6318efeaea01e0e716dbd9931bf9c171" kindref="member">~checker_pids</ref>(){<sp/>LOG_DEBUG<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Destructor<sp/>checker_pids&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>new<sp/>process<sp/>(functor<sp/>callback<sp/>and<sp/>process<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classchecker__pids_1a27c1ae8def4db8f6cb36917f61048e6d" kindref="member">add</ref>(std::function&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">()&gt;<sp/>_call,<sp/>std::string<sp/>procname);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>all<sp/>_pics<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//void<sp/>clear(){<sp/>_pids.clear();<sp/>}<sp/><sp/><sp/>//<sp/>Temporal<sp/>solution<sp/>to<sp/>clean<sp/>up<sp/>all<sp/>shared_ptr<sp/>to<sp/>IPC&apos;s<sp/>of<sp/>Dispatcher<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sends<sp/>a<sp/>SIGUSR1<sp/>to<sp/>children<sp/>processes.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classchecker__pids_1a8065fcd19912ad3e9b5affeaf3232ec6" kindref="member">StoppingChildren</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>shared<sp/>pointer<sp/>to<sp/>atomic<sp/>flags<sp/>to<sp/>keep_accepting<sp/>and<sp/>keep_working<sp/>variables.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classchecker__pids_1a418d36e7f2d0ddff6b5b74c5a89f5540" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;keep_running_flags&gt;<sp/><ref refid="classchecker__pids_1a418d36e7f2d0ddff6b5b74c5a89f5540" kindref="member">get_run_flags</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51" kindref="member">_p_run</ref>;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Launch<sp/>and<sp/>keep<sp/>working<sp/>all<sp/>processes.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classchecker__pids_1afe18e52b8c0557fe2d791d4246d7b940" kindref="member">operator()</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/checker_pids.h"/>
  </compounddef>
</doxygen>
