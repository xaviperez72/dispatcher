<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classthread__pair" kind="class" language="C++" prot="public">
    <compoundname>thread_pair</compoundname>
    <includes refid="thread__pair_8h" local="no">thread_pair.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classthread__pair_1a5f91b0c7065a5b4ea1d9b2833eec0ee2" prot="public" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread thread_pair::th_r</definition>
        <argsstring></argsstring>
        <name>th_r</name>
        <qualifiedname>thread_pair::th_r</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="53" column="17" bodyfile="src/thread_pair.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1aaab23c5aeabc65a9d6eba6ef6d56e4b3" prot="public" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread thread_pair::th_w</definition>
        <argsstring></argsstring>
        <name>th_w</name>
        <qualifiedname>thread_pair::th_w</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="54" column="17" bodyfile="src/thread_pair.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classthread__pair_1a6070dd7cb7890f810b3c8730f800cd5e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int thread_pair::_idx_thp</definition>
        <argsstring></argsstring>
        <name>_idx_thp</name>
        <qualifiedname>thread_pair::_idx_thp</qualifiedname>
        <initializer>{-1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="57" column="9" bodyfile="src/thread_pair.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1a48ce2674603551cda5da4c526bd0ceed" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int thread_pair::_pipe[2]</definition>
        <argsstring>[2]</argsstring>
        <name>_pipe</name>
        <qualifiedname>thread_pair::_pipe</qualifiedname>
        <initializer>{-1,-1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="58" column="9" bodyfile="src/thread_pair.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1a6cb38f1b6d4b0b494c3bae5e4b95d093" prot="private" static="no" mutable="no">
        <type><ref refid="classMessageQueue" kindref="compound">MessageQueue</ref></type>
        <definition>MessageQueue thread_pair::_write_queue</definition>
        <argsstring></argsstring>
        <name>_write_queue</name>
        <qualifiedname>thread_pair::_write_queue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="59" column="18" bodyfile="src/thread_pair.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1af0f10327ce77aa56346835d1132a93ad" prot="private" static="no" mutable="no">
        <type><ref refid="classMessageQueue" kindref="compound">MessageQueue</ref></type>
        <definition>MessageQueue thread_pair::_common_queue</definition>
        <argsstring></argsstring>
        <name>_common_queue</name>
        <qualifiedname>thread_pair::_common_queue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="60" column="18" bodyfile="src/thread_pair.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1ab7a9a2bfb659ede1bebbb06a38a89f19" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex thread_pair::_accept_mutex</definition>
        <argsstring></argsstring>
        <name>_accept_mutex</name>
        <qualifiedname>thread_pair::_accept_mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="61" column="16" bodyfile="src/thread_pair.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1a7371d66499abbff03183171892687428" prot="private" static="no" mutable="no">
        <type>std::list&lt; <ref refid="structsocket__data__t" kindref="compound">socket_data_t</ref> &gt;</type>
        <definition>std::list&lt;socket_data_t&gt; thread_pair::_sockdata</definition>
        <argsstring></argsstring>
        <name>_sockdata</name>
        <qualifiedname>thread_pair::_sockdata</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="63" column="15" bodyfile="src/thread_pair.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1aef0f78598d5c8bf62f73b0faa5f8ac28" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structkeep__running__flags" kindref="compound">keep_running_flags</ref> &gt;</type>
        <definition>std::shared_ptr&lt;keep_running_flags&gt; thread_pair::_sharedptr_keep_running</definition>
        <argsstring></argsstring>
        <name>_sharedptr_keep_running</name>
        <qualifiedname>thread_pair::_sharedptr_keep_running</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="64" column="21" bodyfile="src/thread_pair.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1a64e6bf076b36b0abd2040545469c13c0" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classconnections" kindref="compound">connections</ref> &gt;</type>
        <definition>std::shared_ptr&lt;connections&gt; thread_pair::_p_cur_connections</definition>
        <argsstring></argsstring>
        <name>_p_cur_connections</name>
        <qualifiedname>thread_pair::_p_cur_connections</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="65" column="21" bodyfile="src/thread_pair.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classSemaphore" kindref="compound">Semaphore</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Semaphore&gt; thread_pair::_shpt_semIPCfile</definition>
        <argsstring></argsstring>
        <name>_shpt_semIPCfile</name>
        <qualifiedname>thread_pair::_shpt_semIPCfile</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="67" column="21" bodyfile="src/thread_pair.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classthread__pair_1a436e3475859bcebbc976a3c6105ce794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread_pair::thread_pair</definition>
        <argsstring>()=delete</argsstring>
        <name>thread_pair</name>
        <qualifiedname>thread_pair::thread_pair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="70" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1acf8b3f678e83f280cb66f7d1ee5d0fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread_pair::thread_pair</definition>
        <argsstring>(MessageQueue write_queue_id, MessageQueue common_queue, int idx, std::shared_ptr&lt; keep_running_flags &gt; shpt_keep_running, std::shared_ptr&lt; connections &gt; shpt_conn, std::shared_ptr&lt; Semaphore &gt; shpt_sem)</argsstring>
        <name>thread_pair</name>
        <qualifiedname>thread_pair::thread_pair</qualifiedname>
        <param>
          <type><ref refid="classMessageQueue" kindref="compound">MessageQueue</ref></type>
          <declname>write_queue_id</declname>
        </param>
        <param>
          <type><ref refid="classMessageQueue" kindref="compound">MessageQueue</ref></type>
          <declname>common_queue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structkeep__running__flags" kindref="compound">keep_running_flags</ref> &gt;</type>
          <declname>shpt_keep_running</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classconnections" kindref="compound">connections</ref> &gt;</type>
          <declname>shpt_conn</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classSemaphore" kindref="compound">Semaphore</ref> &gt;</type>
          <declname>shpt_sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="71" column="5" bodyfile="src/thread_pair.cpp" bodystart="5" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1ae8024707e66b2e8d4e4e6c6a3665d959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>thread_pair::thread_pair</definition>
        <argsstring>(const thread_pair &amp;)</argsstring>
        <name>thread_pair</name>
        <qualifiedname>thread_pair::thread_pair</qualifiedname>
        <param>
          <type>const <ref refid="classthread__pair" kindref="compound">thread_pair</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="76" column="5" bodyfile="src/thread_pair.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1aaf1cb28aa2dcce711c9de08665839db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>thread_pair::thread_pair</definition>
        <argsstring>(thread_pair &amp;&amp;)=delete</argsstring>
        <name>thread_pair</name>
        <qualifiedname>thread_pair::thread_pair</qualifiedname>
        <param>
          <type><ref refid="classthread__pair" kindref="compound">thread_pair</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="78" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a12d97177534fdc55d25fc666f59281a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread__pair" kindref="compound">thread_pair</ref> &amp;</type>
        <definition>thread_pair &amp; thread_pair::operator=</definition>
        <argsstring>(const thread_pair &amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>thread_pair::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classthread__pair" kindref="compound">thread_pair</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="79" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1afdaf16d1719d5b432aa9456fff8940be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classthread__pair" kindref="compound">thread_pair</ref> &amp;</type>
        <definition>thread_pair &amp; thread_pair::operator=</definition>
        <argsstring>(thread_pair &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>thread_pair::operator=</qualifiedname>
        <param>
          <type><ref refid="classthread__pair" kindref="compound">thread_pair</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="80" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a542da55488a6cb54517473429d234801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_pair::reader_thread</definition>
        <argsstring>(int idx_thp)</argsstring>
        <name>reader_thread</name>
        <qualifiedname>thread_pair::reader_thread</qualifiedname>
        <param>
          <type>int</type>
          <declname>idx_thp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="82" column="10" bodyfile="src/thread_pair.cpp" bodystart="122" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a6ebef75114e800552bdd19598f0964ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_pair::writer_thread</definition>
        <argsstring>(int idx_thp)</argsstring>
        <name>writer_thread</name>
        <qualifiedname>thread_pair::writer_thread</qualifiedname>
        <param>
          <type>int</type>
          <declname>idx_thp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="83" column="10" bodyfile="src/thread_pair.cpp" bodystart="222" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a5059ef6b79e75c8f15aca5785c8ca15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::add_sockdata</definition>
        <argsstring>(socket_data_t sdt)</argsstring>
        <name>add_sockdata</name>
        <qualifiedname>thread_pair::add_sockdata</qualifiedname>
        <param>
          <type><ref refid="structsocket__data__t" kindref="compound">socket_data_t</ref></type>
          <declname>sdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="85" column="9" bodyfile="src/thread_pair.cpp" bodystart="280" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::remove_sockdata</definition>
        <argsstring>(const socket_data_t &amp;sdt)</argsstring>
        <name>remove_sockdata</name>
        <qualifiedname>thread_pair::remove_sockdata</qualifiedname>
        <param>
          <type>const <ref refid="structsocket__data__t" kindref="compound">socket_data_t</ref> &amp;</type>
          <declname>sdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="86" column="9" bodyfile="src/thread_pair.cpp" bodystart="290" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a15322b033ebd6882f6ee9c81cc21b512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::get_sockdata_list</definition>
        <argsstring>(std::list&lt; socket_data_t &gt; &amp;lsdt)</argsstring>
        <name>get_sockdata_list</name>
        <qualifiedname>thread_pair::get_sockdata_list</qualifiedname>
        <param>
          <type>std::list&lt; <ref refid="structsocket__data__t" kindref="compound">socket_data_t</ref> &gt; &amp;</type>
          <declname>lsdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="87" column="9" bodyfile="src/thread_pair.cpp" bodystart="308" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a04aa8647a7584d9e7246a9aadf7ce108" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::get_size_of_sock_list</definition>
        <argsstring>() const</argsstring>
        <name>get_size_of_sock_list</name>
        <qualifiedname>thread_pair::get_size_of_sock_list</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="88" column="9" bodyfile="src/thread_pair.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a6c14f207dab415ad3c4bb8cad8e226f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::get_read_pipe</definition>
        <argsstring>() const</argsstring>
        <name>get_read_pipe</name>
        <qualifiedname>thread_pair::get_read_pipe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="89" column="9" bodyfile="src/thread_pair.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1ab5cbe0341d15af61d0c0b7b6aa604a83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::get_write_pipe</definition>
        <argsstring>() const</argsstring>
        <name>get_write_pipe</name>
        <qualifiedname>thread_pair::get_write_pipe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="90" column="9" bodyfile="src/thread_pair.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a63f54129ef00c38b207324b19febf6e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::get_id</definition>
        <argsstring>() const</argsstring>
        <name>get_id</name>
        <qualifiedname>thread_pair::get_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="91" column="9" bodyfile="src/thread_pair.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1acd61f7b1e9aea4b37563a49867fb873b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::get_idx</definition>
        <argsstring>() const</argsstring>
        <name>get_idx</name>
        <qualifiedname>thread_pair::get_idx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="92" column="9" bodyfile="src/thread_pair.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a837146c433c08e88eb0cd99cf897b049" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classMessageQueue" kindref="compound">MessageQueue</ref> &amp;</type>
        <definition>MessageQueue &amp; thread_pair::get_write_queue</definition>
        <argsstring>()</argsstring>
        <name>get_write_queue</name>
        <qualifiedname>thread_pair::get_write_queue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="93" column="18" bodyfile="src/thread_pair.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1a7047531ed209fcd47ad85cf8a6ad8623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_pair::Prepare_Msg_Json_To_Send</definition>
        <argsstring>(protomsg::st_protomsg &amp;v_protomsg, std::string msg, Json::Value &amp;json_msg)</argsstring>
        <name>Prepare_Msg_Json_To_Send</name>
        <qualifiedname>thread_pair::Prepare_Msg_Json_To_Send</qualifiedname>
        <param>
          <type><ref refid="structprotomsg_1_1st__protomsg" kindref="compound">protomsg::st_protomsg</ref> &amp;</type>
          <declname>v_protomsg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>Json::Value &amp;</type>
          <declname>json_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="94" column="10" bodyfile="src/thread_pair.cpp" bodystart="211" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1ac8a0f9dd6117f68e75f9222488f115f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_pair::Attending_Read_Socket</definition>
        <argsstring>(socket_data_t &amp;sdt)</argsstring>
        <name>Attending_Read_Socket</name>
        <qualifiedname>thread_pair::Attending_Read_Socket</qualifiedname>
        <param>
          <type><ref refid="structsocket__data__t" kindref="compound">socket_data_t</ref> &amp;</type>
          <declname>sdt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="95" column="10" bodyfile="src/thread_pair.cpp" bodystart="33" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classthread__pair_1ac706f952db441120c6b7ccc709193786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thread_pair::Getting_Json_Msg_Received</definition>
        <argsstring>(std::string &amp;msgin, protomsg::st_protomsg &amp;v_protomsg, std::string &amp;msgout)</argsstring>
        <name>Getting_Json_Msg_Received</name>
        <qualifiedname>thread_pair::Getting_Json_Msg_Received</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>msgin</declname>
        </param>
        <param>
          <type><ref refid="structprotomsg_1_1st__protomsg" kindref="compound">protomsg::st_protomsg</ref> &amp;</type>
          <declname>v_protomsg</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>msgout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread_pair.h" line="96" column="9" bodyfile="src/thread_pair.cpp" bodystart="93" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>Ipc</label>
        <link refid="classIpc"/>
      </node>
      <node id="2">
        <label>MessageQueue</label>
        <link refid="classMessageQueue"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>thread_pair</label>
        <link refid="classthread__pair"/>
        <childnode refid="2" relation="usage">
          <edgelabel>_common_queue</edgelabel>
          <edgelabel>_write_queue</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/thread_pair.h" line="50" column="1" bodyfile="src/thread_pair.h" bodystart="51" bodyend="97"/>
    <listofallmembers>
      <member refid="classthread__pair_1ab7a9a2bfb659ede1bebbb06a38a89f19" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_accept_mutex</name></member>
      <member refid="classthread__pair_1af0f10327ce77aa56346835d1132a93ad" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_common_queue</name></member>
      <member refid="classthread__pair_1a6070dd7cb7890f810b3c8730f800cd5e" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_idx_thp</name></member>
      <member refid="classthread__pair_1a64e6bf076b36b0abd2040545469c13c0" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_p_cur_connections</name></member>
      <member refid="classthread__pair_1a48ce2674603551cda5da4c526bd0ceed" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_pipe</name></member>
      <member refid="classthread__pair_1aef0f78598d5c8bf62f73b0faa5f8ac28" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_sharedptr_keep_running</name></member>
      <member refid="classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_shpt_semIPCfile</name></member>
      <member refid="classthread__pair_1a7371d66499abbff03183171892687428" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_sockdata</name></member>
      <member refid="classthread__pair_1a6cb38f1b6d4b0b494c3bae5e4b95d093" prot="private" virt="non-virtual"><scope>thread_pair</scope><name>_write_queue</name></member>
      <member refid="classthread__pair_1a5059ef6b79e75c8f15aca5785c8ca15c" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>add_sockdata</name></member>
      <member refid="classthread__pair_1ac8a0f9dd6117f68e75f9222488f115f6" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>Attending_Read_Socket</name></member>
      <member refid="classthread__pair_1a63f54129ef00c38b207324b19febf6e1" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>get_id</name></member>
      <member refid="classthread__pair_1acd61f7b1e9aea4b37563a49867fb873b" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>get_idx</name></member>
      <member refid="classthread__pair_1a6c14f207dab415ad3c4bb8cad8e226f1" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>get_read_pipe</name></member>
      <member refid="classthread__pair_1a04aa8647a7584d9e7246a9aadf7ce108" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>get_size_of_sock_list</name></member>
      <member refid="classthread__pair_1a15322b033ebd6882f6ee9c81cc21b512" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>get_sockdata_list</name></member>
      <member refid="classthread__pair_1ab5cbe0341d15af61d0c0b7b6aa604a83" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>get_write_pipe</name></member>
      <member refid="classthread__pair_1a837146c433c08e88eb0cd99cf897b049" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>get_write_queue</name></member>
      <member refid="classthread__pair_1ac706f952db441120c6b7ccc709193786" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>Getting_Json_Msg_Received</name></member>
      <member refid="classthread__pair_1a12d97177534fdc55d25fc666f59281a6" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>operator=</name></member>
      <member refid="classthread__pair_1afdaf16d1719d5b432aa9456fff8940be" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>operator=</name></member>
      <member refid="classthread__pair_1a7047531ed209fcd47ad85cf8a6ad8623" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>Prepare_Msg_Json_To_Send</name></member>
      <member refid="classthread__pair_1a542da55488a6cb54517473429d234801" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>reader_thread</name></member>
      <member refid="classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>remove_sockdata</name></member>
      <member refid="classthread__pair_1a5f91b0c7065a5b4ea1d9b2833eec0ee2" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>th_r</name></member>
      <member refid="classthread__pair_1aaab23c5aeabc65a9d6eba6ef6d56e4b3" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>th_w</name></member>
      <member refid="classthread__pair_1a436e3475859bcebbc976a3c6105ce794" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>thread_pair</name></member>
      <member refid="classthread__pair_1acf8b3f678e83f280cb66f7d1ee5d0fd3" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>thread_pair</name></member>
      <member refid="classthread__pair_1ae8024707e66b2e8d4e4e6c6a3665d959" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>thread_pair</name></member>
      <member refid="classthread__pair_1aaf1cb28aa2dcce711c9de08665839db1" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>thread_pair</name></member>
      <member refid="classthread__pair_1a6ebef75114e800552bdd19598f0964ad" prot="public" virt="non-virtual"><scope>thread_pair</scope><name>writer_thread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
