<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_checker__pids_8h_source" xml:lang="en-US">
<title>checker_pids.h</title>
<indexterm><primary>src/checker_pids.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_checker__pids_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;CHECKER_PIDS_H_</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;CHECKER_PIDS_H_</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00003"/>00003 
<anchor xml:id="_checker__pids_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#ifdef&#32;&#32;__cplusplus</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00005"/>00005 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
<anchor xml:id="_checker__pids_8h_source_1l00006"/>00006 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00007"/>00007 
<anchor xml:id="_checker__pids_8h_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;signal.h&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;sys/wait.h&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00010"/>00010 
<anchor xml:id="_checker__pids_8h_source_1l00011"/>00011 <emphasis role="preprocessor">#ifdef&#32;&#32;__cplusplus</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00012"/>00012 }
<anchor xml:id="_checker__pids_8h_source_1l00013"/>00013 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00014"/>00014 
<anchor xml:id="_checker__pids_8h_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_common_8h">common.h</link>&quot;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00018"/>00018 <emphasis role="preprocessor">#include&#32;&lt;thread&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00021"/>00021 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00022"/>00022 <emphasis role="preprocessor">#include&#32;&lt;atomic&gt;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00023"/>00023 
<anchor xml:id="_checker__pids_8h_source_1l00027"/><link linkend="_structchecker__struct">00027</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structchecker__struct">checker_struct</link>&#32;
<anchor xml:id="_checker__pids_8h_source_1l00028"/>00028 {
<anchor xml:id="_checker__pids_8h_source_1l00029"/><link linkend="_structchecker__struct_1a3914028540b569e66b4d36e44dc9c003">00029</link> &#32;&#32;&#32;&#32;std::function&lt;int()&gt;&#32;<link linkend="_structchecker__struct_1a3914028540b569e66b4d36e44dc9c003">_caller</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Functor&#32;callback</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00030"/><link linkend="_structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7">00030</link> &#32;&#32;&#32;&#32;time_t&#32;<link linkend="_structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7">_last_fork</link>{0};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;of&#32;last&#32;fork</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00031"/><link linkend="_structchecker__struct_1a25b2258433c107a1b447d1e97796c450">00031</link> &#32;&#32;&#32;&#32;pid_t&#32;&#32;<link linkend="_structchecker__struct_1a25b2258433c107a1b447d1e97796c450">_pid</link>{0};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pid&#32;of&#32;the&#32;process</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00032"/><link linkend="_structchecker__struct_1a8bdef9cac5a8c77492a3dd9d28b99720">00032</link> &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_structchecker__struct_1a8bdef9cac5a8c77492a3dd9d28b99720">_procname</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Process&#32;name</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00033"/>00033 };
<anchor xml:id="_checker__pids_8h_source_1l00034"/>00034 
<anchor xml:id="_checker__pids_8h_source_1l00035"/><link linkend="_structkeep__running__flags">00035</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structkeep__running__flags">keep_running_flags</link>&#32;
<anchor xml:id="_checker__pids_8h_source_1l00036"/>00036 {
<anchor xml:id="_checker__pids_8h_source_1l00037"/><link linkend="_structkeep__running__flags_1aa9ffa8890c1087fc76cbc45970ad0656">00037</link> &#32;&#32;&#32;&#32;std::atomic&lt;bool&gt;&#32;<link linkend="_structkeep__running__flags_1aa9ffa8890c1087fc76cbc45970ad0656">_keep_accepting</link>{<emphasis role="keyword">true</emphasis>};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;true&#32;keeps&#32;AcceptThread&#32;accepting&#32;calls.</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00038"/><link linkend="_structkeep__running__flags_1a58676400c1619db399b03dd343b6cde0">00038</link> &#32;&#32;&#32;&#32;std::atomic&lt;bool&gt;&#32;<link linkend="_structkeep__running__flags_1a58676400c1619db399b03dd343b6cde0">_keep_working</link>{<emphasis role="keyword">true</emphasis>};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;true&#32;keeps&#32;WriterThread&#32;sending&#32;last&#32;operations.&#32;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00039"/><link linkend="_structkeep__running__flags_1ad8f3eacf9377b25f07e8e54f5dfd3b47">00039</link> &#32;&#32;&#32;&#32;<link linkend="_structkeep__running__flags_1ad8f3eacf9377b25f07e8e54f5dfd3b47">keep_running_flags</link>(){&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;keep_running_flags&#32;Ctor&quot;</emphasis>;&#32;}
<anchor xml:id="_checker__pids_8h_source_1l00040"/><link linkend="_structkeep__running__flags_1a3846905519224859f98afb8ee5d3969f">00040</link> &#32;&#32;&#32;&#32;<link linkend="_structkeep__running__flags_1a3846905519224859f98afb8ee5d3969f">~keep_running_flags</link>(){&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;keep_running_flags&#32;Dtor&quot;</emphasis>;&#32;}
<anchor xml:id="_checker__pids_8h_source_1l00041"/>00041 };
<anchor xml:id="_checker__pids_8h_source_1l00042"/>00042 
<anchor xml:id="_checker__pids_8h_source_1l00046"/><link linkend="_classchecker__pids">00046</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classchecker__pids">checker_pids</link>&#32;final&#32;{
<anchor xml:id="_checker__pids_8h_source_1l00047"/><link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">00047</link> &#32;&#32;&#32;&#32;std::vector&lt;checker_struct&gt;&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Vector&#32;of&#32;processes</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00048"/><link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">00048</link> &#32;&#32;&#32;&#32;<link linkend="_structchecker__struct">checker_struct</link>&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gets&#32;dead&#32;process&#32;on&#32;wait()</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00049"/>00049 &#32;&#32;&#32;&#32;
<anchor xml:id="_checker__pids_8h_source_1l00050"/><link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::shared_ptr&lt;keep_running_flags&gt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shared&#32;pointer&#32;to&#32;atomic&#32;bool&#32;variables</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00051"/><link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">00051</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Identifies&#32;which&#32;process&#32;is&#32;the&#32;forker.</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00052"/><link linkend="_classchecker__pids_1acd2982254315ed5976aee9f33001baee">00052</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classchecker__pids">checker_pids</link>&#32;*<link linkend="_classchecker__pids_1acd2982254315ed5976aee9f33001baee">_me</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pointer&#32;to&#32;an&#32;existing&#32;instance.</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00053"/>00053 
<anchor xml:id="_checker__pids_8h_source_1l00054"/><link linkend="_classchecker__pids_1a12fce3aed3117c10f47eaddf28fcdba8">00054</link> &#32;&#32;&#32;&#32;sighandler_t&#32;<link linkend="_classchecker__pids_1a12fce3aed3117c10f47eaddf28fcdba8">_previousInterruptHandler_int</link>{<emphasis role="keyword">nullptr</emphasis>};&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Signal&#32;handler&#32;for&#32;SIGINT</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00055"/><link linkend="_classchecker__pids_1a19aa5267dd935b87eed2fb7b2192e3de">00055</link> &#32;&#32;&#32;&#32;sighandler_t&#32;<link linkend="_classchecker__pids_1a19aa5267dd935b87eed2fb7b2192e3de">_previousInterruptHandler_usr1</link>{<emphasis role="keyword">nullptr</emphasis>};&#32;&#32;&#32;<emphasis role="comment">//&#32;Signal&#32;handler&#32;for&#32;SIGUSR1</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00056"/><link linkend="_classchecker__pids_1a7aaab276668326d002cdd1f4e333c5b7">00056</link> &#32;&#32;&#32;&#32;sighandler_t&#32;<link linkend="_classchecker__pids_1a7aaab276668326d002cdd1f4e333c5b7">_previousInterruptHandler_term</link>{<emphasis role="keyword">nullptr</emphasis>};&#32;&#32;&#32;<emphasis role="comment">//&#32;Signal&#32;handler&#32;for&#32;SIGTERM</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00057"/>00057 
<anchor xml:id="_checker__pids_8h_source_1l00058"/>00058 <emphasis role="keyword">public</emphasis>:
<anchor xml:id="_checker__pids_8h_source_1l00059"/>00059 &#32;&#32;&#32;&#32;
<anchor xml:id="_checker__pids_8h_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Static&#32;signal&#32;handler.</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classchecker__pids_1a8670706ea3c75c45b7a9e43a99bf5a4e">sigterm_func</link>(<emphasis role="keywordtype">int</emphasis>&#32;s);
<anchor xml:id="_checker__pids_8h_source_1l00062"/>00062 
<anchor xml:id="_checker__pids_8h_source_1l00063"/><link linkend="_classchecker__pids_1ab2bffb76c0da98777ad2109be0b127ca">00063</link> &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1ab2bffb76c0da98777ad2109be0b127ca">checker_pids</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_checker__pids_8h_source_1l00064"/><link linkend="_classchecker__pids_1ad481c24cbe8f60fa780cf8f807188a7a">00064</link> &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1ad481c24cbe8f60fa780cf8f807188a7a">checker_pids</link>(<link linkend="_classchecker__pids">checker_pids</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
<anchor xml:id="_checker__pids_8h_source_1l00065"/><link linkend="_classchecker__pids_1a10b144de7e14bc5cc1934f8f33143397">00065</link> &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a10b144de7e14bc5cc1934f8f33143397">checker_pids</link>(<link linkend="_classchecker__pids">checker_pids</link>&#32;&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
<anchor xml:id="_checker__pids_8h_source_1l00066"/><link linkend="_classchecker__pids_1aa17a1b4c4b9b182fff3d78215488b1e4">00066</link> &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids">checker_pids</link>&amp;&#32;<link linkend="_classchecker__pids_1aa17a1b4c4b9b182fff3d78215488b1e4">operator=</link>(<link linkend="_classchecker__pids">checker_pids</link>&#32;<emphasis role="keyword">const</emphasis>&#32;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
<anchor xml:id="_checker__pids_8h_source_1l00067"/><link linkend="_classchecker__pids_1a1e22231fb040beab1861fa5b14a864b8">00067</link> &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids">checker_pids</link>&amp;&#32;<link linkend="_classchecker__pids_1a1e22231fb040beab1861fa5b14a864b8">operator=</link>(<link linkend="_classchecker__pids">checker_pids</link>&#32;&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
<anchor xml:id="_checker__pids_8h_source_1l00068"/>00068 
<anchor xml:id="_checker__pids_8h_source_1l00069"/><link linkend="_classchecker__pids_1a6318efeaea01e0e716dbd9931bf9c171">00069</link> &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a6318efeaea01e0e716dbd9931bf9c171">~checker_pids</link>(){&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Destructor&#32;checker_pids&quot;</emphasis>;&#32;}
<anchor xml:id="_checker__pids_8h_source_1l00070"/>00070 
<anchor xml:id="_checker__pids_8h_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adds&#32;a&#32;new&#32;process&#32;(functor&#32;callback&#32;and&#32;process&#32;name)</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classchecker__pids_1a27c1ae8def4db8f6cb36917f61048e6d">add</link>(std::function&lt;<emphasis role="keywordtype">int</emphasis>()&gt;&#32;_call,&#32;std::string&#32;procname);
<anchor xml:id="_checker__pids_8h_source_1l00073"/>00073 
<anchor xml:id="_checker__pids_8h_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clears&#32;all&#32;_pics&#32;vector.</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="comment">//void&#32;clear(){&#32;_pids.clear();&#32;}&#32;&#32;&#32;//&#32;Temporal&#32;solution&#32;to&#32;clean&#32;up&#32;all&#32;shared_ptr&#32;to&#32;IPC&apos;s&#32;of&#32;Dispatcher&#32;Object</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00076"/>00076 
<anchor xml:id="_checker__pids_8h_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sends&#32;a&#32;SIGUSR1&#32;to&#32;children&#32;processes.&#32;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classchecker__pids_1a8065fcd19912ad3e9b5affeaf3232ec6">StoppingChildren</link>();
<anchor xml:id="_checker__pids_8h_source_1l00079"/>00079 
<anchor xml:id="_checker__pids_8h_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gets&#32;shared&#32;pointer&#32;to&#32;atomic&#32;flags&#32;to&#32;keep_accepting&#32;and&#32;keep_working&#32;variables.&#32;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00081"/><link linkend="_classchecker__pids_1a418d36e7f2d0ddff6b5b74c5a89f5540">00081</link> &#32;&#32;&#32;&#32;std::shared_ptr&lt;keep_running_flags&gt;&#32;<link linkend="_classchecker__pids_1a418d36e7f2d0ddff6b5b74c5a89f5540">get_run_flags</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>;&#32;}
<anchor xml:id="_checker__pids_8h_source_1l00082"/>00082 
<anchor xml:id="_checker__pids_8h_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Launch&#32;and&#32;keep&#32;working&#32;all&#32;processes.&#32;</emphasis>
<anchor xml:id="_checker__pids_8h_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classchecker__pids_1afe18e52b8c0557fe2d791d4246d7b940">operator()</link>();
<anchor xml:id="_checker__pids_8h_source_1l00085"/>00085 };
<anchor xml:id="_checker__pids_8h_source_1l00086"/>00086 
<anchor xml:id="_checker__pids_8h_source_1l00087"/>00087 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
