<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_checker__pids_8cpp_source" xml:lang="en-US">
<title>checker_pids.cpp</title>
<indexterm><primary>src/checker_pids.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_checker__pids_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_checker__pids_8h">checker_pids.h</link>&quot;</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00002"/>00002 
<anchor xml:id="_checker__pids_8cpp_source_1l00003"/>00003 <link linkend="_classchecker__pids">checker_pids</link>*&#32;<link linkend="_classchecker__pids_1acd2982254315ed5976aee9f33001baee">checker_pids::_me</link>{<emphasis role="keyword">nullptr</emphasis>};
<anchor xml:id="_checker__pids_8cpp_source_1l00004"/>00004 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">checker_pids::_forker</link>{<emphasis role="keyword">false</emphasis>};
<anchor xml:id="_checker__pids_8cpp_source_1l00005"/>00005 std::shared_ptr&lt;keep_running_flags&gt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">checker_pids::_p_run</link>&#32;=&#32;std::make_shared&lt;keep_running_flags&gt;();
<anchor xml:id="_checker__pids_8cpp_source_1l00006"/>00006 
<anchor xml:id="_checker__pids_8cpp_source_1l00007"/><link linkend="_classchecker__pids_1a8065fcd19912ad3e9b5affeaf3232ec6">00007</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classchecker__pids_1a8065fcd19912ad3e9b5affeaf3232ec6">checker_pids::StoppingChildren</link>()
<anchor xml:id="_checker__pids_8cpp_source_1l00008"/>00008 {
<anchor xml:id="_checker__pids_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Sending&#32;signal&#32;to&#32;children!&quot;</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;&amp;child&#32;:&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>)
<anchor xml:id="_checker__pids_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kill(child._pid,&#32;SIGUSR1);
<anchor xml:id="_checker__pids_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00014"/>00014 }
<anchor xml:id="_checker__pids_8cpp_source_1l00015"/>00015 
<anchor xml:id="_checker__pids_8cpp_source_1l00016"/><link linkend="_classchecker__pids_1afe18e52b8c0557fe2d791d4246d7b940">00016</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classchecker__pids_1afe18e52b8c0557fe2d791d4246d7b940">checker_pids::operator()</link>()
<anchor xml:id="_checker__pids_8cpp_source_1l00017"/>00017 {
<anchor xml:id="_checker__pids_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ret=0;
<anchor xml:id="_checker__pids_8cpp_source_1l00019"/>00019 
<anchor xml:id="_checker__pids_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Important&#32;to&#32;propagate&#32;signal&#32;to&#32;children&#32;and&#32;itself</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00021"/>00021 
<anchor xml:id="_checker__pids_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.size()&#32;==&#32;0)
<anchor xml:id="_checker__pids_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;At&#32;least&#32;one&#32;functor&#32;is&#32;needed.!!&quot;</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_checker__pids_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Important&#32;to&#32;manage&#32;signal&#32;handler&#32;to&#32;kill&#32;children</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1acd2982254315ed5976aee9f33001baee">_me</link>&#32;=&#32;<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00030"/>00030 
<anchor xml:id="_checker__pids_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Running&#32;checker_pids&#32;with&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.size()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;processes.&quot;</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;_keep_accepting&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;_keep_working&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_working&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;_forker&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>;
<anchor xml:id="_checker__pids_8cpp_source_1l00033"/>00033 
<anchor xml:id="_checker__pids_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::placeholders;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adds&#32;visibility&#32;of&#32;_1,&#32;_2,&#32;_3,...</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00035"/>00035 
<anchor xml:id="_checker__pids_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a12fce3aed3117c10f47eaddf28fcdba8">_previousInterruptHandler_int</link>&#32;=&#32;signal(SIGINT,&#32;&amp;<link linkend="_classchecker__pids_1a8670706ea3c75c45b7a9e43a99bf5a4e">checker_pids::sigterm_func</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a19aa5267dd935b87eed2fb7b2192e3de">_previousInterruptHandler_usr1</link>&#32;=&#32;signal(SIGUSR1,&#32;&amp;<link linkend="_classchecker__pids_1a8670706ea3c75c45b7a9e43a99bf5a4e">checker_pids::sigterm_func</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a7aaab276668326d002cdd1f4e333c5b7">_previousInterruptHandler_term</link>&#32;=&#32;signal(SIGTERM,&#32;&amp;<link linkend="_classchecker__pids_1a8670706ea3c75c45b7a9e43a99bf5a4e">checker_pids::sigterm_func</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00039"/>00039 
<anchor xml:id="_checker__pids_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting.load())&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time(&amp;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7">_last_fork</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00043"/>00043 
<anchor xml:id="_checker__pids_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;&amp;process&#32;:&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>)
<anchor xml:id="_checker__pids_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;process._pid&#32;==&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a25b2258433c107a1b447d1e97796c450">_pid</link>&#32;)&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;process._pid&#32;!=&#32;0&#32;&amp;&amp;&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7">_last_fork</link>&#32;&lt;=&#32;process._last_fork&#32;+&#32;5&#32;)&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;_dead._last_fork&#32;&lt;=&#32;process._last_fork&#32;+&#32;5&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7">_last_fork</link>&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&lt;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;process._last_fork&#32;+&#32;5;
<anchor xml:id="_checker__pids_8cpp_source_1l00051"/>00051 
<anchor xml:id="_checker__pids_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Process&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;process._procname&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;(pid&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;process._pid&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&#32;dead&#32;too&#32;quick.&#32;Stopping&quot;</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGTERM);
<anchor xml:id="_checker__pids_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a8065fcd19912ad3e9b5affeaf3232ec6">StoppingChildren</link>();
<anchor xml:id="_checker__pids_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00057"/>00057 
<anchor xml:id="_checker__pids_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;process._last_fork&#32;=&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a5f2c58e3995bf1f1c895981df8b98ea7">_last_fork</link>;
<anchor xml:id="_checker__pids_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(&#32;process._pid&#32;=&#32;fork()&#32;)&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;-1:
<anchor xml:id="_checker__pids_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;fork:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;strerror(errno);
<anchor xml:id="_checker__pids_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raise(SIGTERM);
<anchor xml:id="_checker__pids_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a8065fcd19912ad3e9b5affeaf3232ec6">StoppingChildren</link>();
<anchor xml:id="_checker__pids_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Child&#32;process</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I&#32;am&#32;not&#32;the&#32;forker,&#32;I&#32;am&#32;a&#32;child</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=process._caller();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;to&#32;functor&#32;-&#32;operator&#32;()</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_checker__pids_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00072"/>00072 
<anchor xml:id="_checker__pids_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parent&#32;process</emphasis>
<anchor xml:id="_checker__pids_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;process._procname&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;launched&#32;with&#32;pid&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;process._pid;
<anchor xml:id="_checker__pids_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(process._pid&#32;==&#32;-1)
<anchor xml:id="_checker__pids_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00081"/>00081 
<anchor xml:id="_checker__pids_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;waiting&#32;-&#32;keep_accepting&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting;
<anchor xml:id="_checker__pids_8cpp_source_1l00083"/>00083 
<anchor xml:id="_checker__pids_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a25b2258433c107a1b447d1e97796c450">_pid</link>&#32;=&#32;wait(NULL);
<anchor xml:id="_checker__pids_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;wake-up&#32;-&#32;child&#32;dead&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a25b2258433c107a1b447d1e97796c450">_pid</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;...&#32;keep_accepting&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting;
<anchor xml:id="_checker__pids_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00087"/>00087 
<anchor xml:id="_checker__pids_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;waiting&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(waiting)
<anchor xml:id="_checker__pids_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it_pid_alive&#32;=&#32;std::find_if(<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.begin(),&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.end(),&#32;[](<link linkend="_structchecker__struct">checker_struct</link>&#32;&amp;ch){&#32;return&#32;kill(ch._pid,0)!=-1;});
<anchor xml:id="_checker__pids_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(it_pid_alive&#32;==&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.end())&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;All&#32;process&#32;dead!!&quot;</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;waiting&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Still&#32;alive,&#32;waiting:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;it_pid_alive-&gt;_pid;
<anchor xml:id="_checker__pids_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a25b2258433c107a1b447d1e97796c450">_pid</link>&#32;=&#32;wait(NULL);
<anchor xml:id="_checker__pids_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;_dead._pid:&quot;</emphasis>&#32;&lt;&lt;<link linkend="_classchecker__pids_1a8ba295ce04686629f2e545eef082688a">_dead</link>.<link linkend="_structchecker__struct_1a25b2258433c107a1b447d1e97796c450">_pid</link>;
<anchor xml:id="_checker__pids_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::this_thread::sleep_for(std::chrono::milliseconds(100));
<anchor xml:id="_checker__pids_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00104"/>00104 
<anchor xml:id="_checker__pids_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;(void)signal(SIGINT,&#32;&#32;<link linkend="_classchecker__pids_1a12fce3aed3117c10f47eaddf28fcdba8">_previousInterruptHandler_int</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;(void)signal(SIGUSR1,&#32;<link linkend="_classchecker__pids_1a19aa5267dd935b87eed2fb7b2192e3de">_previousInterruptHandler_usr1</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;(void)signal(SIGTERM,&#32;<link linkend="_classchecker__pids_1a7aaab276668326d002cdd1f4e333c5b7">_previousInterruptHandler_term</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00108"/>00108 
<anchor xml:id="_checker__pids_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ending&#32;checker_pids::operator()&#32;-&#32;_forker&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>;
<anchor xml:id="_checker__pids_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>);
<anchor xml:id="_checker__pids_8cpp_source_1l00111"/>00111 }
<anchor xml:id="_checker__pids_8cpp_source_1l00112"/>00112 
<anchor xml:id="_checker__pids_8cpp_source_1l00113"/><link linkend="_classchecker__pids_1a27c1ae8def4db8f6cb36917f61048e6d">00113</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classchecker__pids_1a27c1ae8def4db8f6cb36917f61048e6d">checker_pids::add</link>(std::function&lt;<emphasis role="keywordtype">int</emphasis>()&gt;&#32;_call,&#32;std::string&#32;procname)
<anchor xml:id="_checker__pids_8cpp_source_1l00114"/>00114 {&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<link linkend="_structchecker__struct">checker_struct</link>&#32;checker{_call,0,0,procname};
<anchor xml:id="_checker__pids_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.reserve(<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.size()+1);
<anchor xml:id="_checker__pids_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1aeaf6d7cdb81c03a5d152f5122cb485e9">_pids</link>.emplace_back(checker);
<anchor xml:id="_checker__pids_8cpp_source_1l00118"/>00118 }
<anchor xml:id="_checker__pids_8cpp_source_1l00119"/>00119 
<anchor xml:id="_checker__pids_8cpp_source_1l00120"/><link linkend="_classchecker__pids_1a8670706ea3c75c45b7a9e43a99bf5a4e">00120</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classchecker__pids_1a8670706ea3c75c45b7a9e43a99bf5a4e">checker_pids::sigterm_func</link>(<emphasis role="keywordtype">int</emphasis>&#32;s)&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00121"/>00121 {
<anchor xml:id="_checker__pids_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Received&#32;signal&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;strsignal(s)&#32;&lt;&lt;&#32;\
<anchor xml:id="_checker__pids_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;_keep_accepting&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;_forker&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>;
<anchor xml:id="_checker__pids_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting&#32;&amp;&amp;&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>)&#32;
<anchor xml:id="_checker__pids_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_classchecker__pids_1acd2982254315ed5976aee9f33001baee">_me</link>!=<emphasis role="keyword">nullptr</emphasis>)&#32;{
<anchor xml:id="_checker__pids_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1acd2982254315ed5976aee9f33001baee">_me</link>-&gt;<link linkend="_classchecker__pids_1a8065fcd19912ad3e9b5affeaf3232ec6">StoppingChildren</link>();
<anchor xml:id="_checker__pids_8cpp_source_1l00130"/>00130 
<anchor xml:id="_checker__pids_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1acd2982254315ed5976aee9f33001baee">_me</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;}
<anchor xml:id="_checker__pids_8cpp_source_1l00134"/>00134 
<anchor xml:id="_checker__pids_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_checker__pids_8cpp_source_1l00136"/>00136 
<anchor xml:id="_checker__pids_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Received&#32;signal&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;strsignal(s)&#32;&lt;&lt;&#32;\
<anchor xml:id="_checker__pids_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;_keep_accepting&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1ad738c2a7f7747a492d61a45d94a1ab51">_p_run</link>-&gt;_keep_accepting&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;_forker&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_classchecker__pids_1a065564a41603626bb7d1258c0cb075c3">_forker</link>;
<anchor xml:id="_checker__pids_8cpp_source_1l00139"/>00139 }
</programlisting></section>
