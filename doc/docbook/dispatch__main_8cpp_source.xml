<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_dispatch__main_8cpp_source" xml:lang="en-US">
<title>dispatch_main.cpp</title>
<indexterm><primary>src/dispatch_main.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_dispatch__main_8cpp_source_1l00001"/>00001 <emphasis role="comment">/***************************************</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;GLOBAL&#32;VARS&#32;-&#32;IN&#32;COMMON.H</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00003"/>00003 <emphasis role="comment">&#32;***************************************/</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#if&#32;!defined&#32;LOGLEVEL</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00005"/><link linkend="_dispatch__main_8cpp_1a6c6fd5e242df15a7a42e9b75d55d5d3c">00005</link> <emphasis role="preprocessor">#define&#32;LOGLEVEL</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00006"/><link linkend="_dispatch__main_8cpp_1afb19b851dbcd1447c226a8a98c26979d">00006</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_dispatch__main_8cpp_1afb19b851dbcd1447c226a8a98c26979d">loglevel</link>;
<anchor xml:id="_dispatch__main_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00008"/>00008 
<anchor xml:id="_dispatch__main_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_common_8h">common.h</link>&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_ipclib_8h">ipclib.h</link>&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_getcfgfile_8h">getcfgfile.h</link>&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_dispatch__cfg_8h">dispatch_cfg.h</link>&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00013"/>00013 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_dispatcher_8h">dispatcher.h</link>&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00014"/>00014 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_checker__pids_8h">checker_pids.h</link>&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00015"/>00015 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_Socket_8h">Socket.h</link>&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00016"/>00016 <emphasis role="preprocessor">#include&#32;&quot;plog/Initializers/RollingFileInitializer.h&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00017"/>00017 <emphasis role="preprocessor">#include&#32;&quot;plog/Initializers/ConsoleInitializer.h&quot;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00018"/>00018 
<anchor xml:id="_dispatch__main_8cpp_source_1l00019"/>00019 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_dispatch__main_8cpp_source_1l00020"/>00020 
<anchor xml:id="_dispatch__main_8cpp_source_1l00021"/><link linkend="_dispatch__main_8cpp_1a58454aad6e6fcedf1d107f209afdcefb">00021</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_dispatch__main_8cpp_1a58454aad6e6fcedf1d107f209afdcefb">RunOnBackground</link>()&#32;
<anchor xml:id="_dispatch__main_8cpp_source_1l00022"/>00022 {
<anchor xml:id="_dispatch__main_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getppid()&#32;!=&#32;1)&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;parent&#32;!=&#32;init&#32;*/</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;{&#32;
<anchor xml:id="_dispatch__main_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setsid();
<anchor xml:id="_dispatch__main_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(fork())&#32;
<anchor xml:id="_dispatch__main_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_dispatch__main_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
<anchor xml:id="_dispatch__main_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(STDIN_FILENO);&#32;&#32;&#32;
<anchor xml:id="_dispatch__main_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_dispatch__main_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;-1:
<anchor xml:id="_dispatch__main_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;fork&#32;background:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;strerror(errno);
<anchor xml:id="_dispatch__main_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_dispatch__main_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_dispatch__main_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(0);
<anchor xml:id="_dispatch__main_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_dispatch__main_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dispatch__main_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_dispatch__main_8cpp_source_1l00039"/>00039 }
<anchor xml:id="_dispatch__main_8cpp_source_1l00040"/>00040 
<anchor xml:id="_dispatch__main_8cpp_source_1l00041"/>00041 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::string_literals;
<anchor xml:id="_dispatch__main_8cpp_source_1l00042"/><link linkend="_dispatch__main_8cpp_1afd223b308b5635da2267a2bf3e671589">00042</link> <emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_dispatch__main_8cpp_1afd223b308b5635da2267a2bf3e671589">CFGFILE_PATH</link>&#32;=&#32;getpwuid(getuid())&#32;-&gt;&#32;pw_dir&#32;+&#32;<emphasis role="stringliteral">&quot;/.dispatch/config.json&quot;</emphasis>s;
<anchor xml:id="_dispatch__main_8cpp_source_1l00043"/>00043 
<anchor xml:id="_dispatch__main_8cpp_source_1l00044"/>00044 
<anchor xml:id="_dispatch__main_8cpp_source_1l00045"/>00045 <emphasis role="comment">//&#32;It&#32;helps&#32;to&#32;realize&#32;about&#32;COREDUMPS</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00046"/><link linkend="_dispatch__main_8cpp_1af99e6af012c4d41d39b2521b7e1d2334">00046</link> sighandler_t&#32;<link linkend="_dispatch__main_8cpp_1af99e6af012c4d41d39b2521b7e1d2334">_previousInterruptHandler_sigsegv</link>;
<anchor xml:id="_dispatch__main_8cpp_source_1l00047"/><link linkend="_dispatch__main_8cpp_1aa16be2c25accebcc282457d3e2605cfe">00047</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_dispatch__main_8cpp_1aa16be2c25accebcc282457d3e2605cfe">sigsegv_func</link>(<emphasis role="keywordtype">int</emphasis>&#32;s)&#32;
<anchor xml:id="_dispatch__main_8cpp_source_1l00048"/>00048 {
<anchor xml:id="_dispatch__main_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Received&#32;signal&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;strsignal(s)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;ERROR:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;strerror(errno);
<anchor xml:id="_dispatch__main_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;(void)signal(SIGSEGV,&#32;<link linkend="_dispatch__main_8cpp_1af99e6af012c4d41d39b2521b7e1d2334">_previousInterruptHandler_sigsegv</link>);
<anchor xml:id="_dispatch__main_8cpp_source_1l00051"/>00051 }
<anchor xml:id="_dispatch__main_8cpp_source_1l00052"/>00052 
<anchor xml:id="_dispatch__main_8cpp_source_1l00053"/><link linkend="_dispatch__main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">00053</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_dispatch__main_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link>()
<anchor xml:id="_dispatch__main_8cpp_source_1l00054"/>00054 {
<anchor xml:id="_dispatch__main_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ret;
<anchor xml:id="_dispatch__main_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TO&#32;DO&#32;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;level&#32;of&#32;log&#32;from&#32;file&#32;config.&#32;Now&#32;it&#32;is&#32;only&#32;DEBUG.</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;plog::ConsoleAppender&lt;plog::TxtFormatter&gt;&#32;consoleAppender;
<anchor xml:id="_dispatch__main_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<link linkend="_dispatch__main_8cpp_1afb19b851dbcd1447c226a8a98c26979d">loglevel</link>=plog::verbose;
<anchor xml:id="_dispatch__main_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;plog::init(plog::verbose,&#32;&amp;consoleAppender);
<anchor xml:id="_dispatch__main_8cpp_source_1l00061"/>00061 
<anchor xml:id="_dispatch__main_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<link linkend="_dispatch__main_8cpp_1af99e6af012c4d41d39b2521b7e1d2334">_previousInterruptHandler_sigsegv</link>&#32;=&#32;signal(SIGSEGV,&#32;<link linkend="_dispatch__main_8cpp_1aa16be2c25accebcc282457d3e2605cfe">sigsegv_func</link>);
<anchor xml:id="_dispatch__main_8cpp_source_1l00063"/>00063 
<anchor xml:id="_dispatch__main_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<link linkend="_classGetCfgFile">GetCfgFile</link>&#32;f_config(<link linkend="_dispatch__main_8cpp_1afd223b308b5635da2267a2bf3e671589">CFGFILE_PATH</link>,<emphasis role="keyword">true</emphasis>);&#32;&#32;<emphasis role="comment">//&#32;Create&#32;directory&#32;if&#32;it&#32;doesn&apos;t&#32;exist.</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00065"/>00065 
<anchor xml:id="_dispatch__main_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<link linkend="_classall__dispatch__cfg">all_dispatch_cfg</link>&#32;cfg(f_config.<link linkend="_classGetCfgFile_1ada73da323a67df88e661ffe0dc7420d7">get_json</link>());
<anchor xml:id="_dispatch__main_8cpp_source_1l00067"/>00067 
<anchor xml:id="_dispatch__main_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error&#32;reading&#32;config&#32;file&#32;or&#32;bad&#32;json&#32;format</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!f_config&#32;||&#32;!cfg)
<anchor xml:id="_dispatch__main_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;{
<anchor xml:id="_dispatch__main_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cfg.<link linkend="_classall__dispatch__cfg_1af268e755413b6d473f766d54142195d9">create_cfg_values</link>(f_config.<link linkend="_classGetCfgFile_1aa53d21ff1f09671785aaae19d4aef016">get_file_dir</link>());
<anchor xml:id="_dispatch__main_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f_config.<link linkend="_classGetCfgFile_1a9ec1ad40b7b82dc8c37532bdbbf3b7c1">save_cfg_file</link>(cfg.<link linkend="_classall__dispatch__cfg_1a2eea05bea87d84a1b4547ab09ef1b101">get_json</link>());
<anchor xml:id="_dispatch__main_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cfg.<link linkend="_classall__dispatch__cfg_1a35d710c743e646189b71a791e86486af">load_all_info</link>();
<anchor xml:id="_dispatch__main_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dispatch__main_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;
<anchor xml:id="_dispatch__main_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;cfg.<link linkend="_classall__dispatch__cfg_1ab44dfa948eee0327345cb1cd0b1ea514">show_all_config</link>();
<anchor xml:id="_dispatch__main_8cpp_source_1l00077"/>00077 
<anchor xml:id="_dispatch__main_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;<link linkend="_dispatch__main_8cpp_1a58454aad6e6fcedf1d107f209afdcefb">RunOnBackground</link>()&#32;&lt;&#32;0&#32;)
<anchor xml:id="_dispatch__main_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;{
<anchor xml:id="_dispatch__main_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Can&#32;not&#32;run&#32;on&#32;background!&quot;</emphasis>;
<anchor xml:id="_dispatch__main_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_dispatch__main_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dispatch__main_8cpp_source_1l00083"/>00083 
<anchor xml:id="_dispatch__main_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Running&#32;on&#32;background,&#32;parent&#32;pid&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;getppid();
<anchor xml:id="_dispatch__main_8cpp_source_1l00085"/>00085 
<anchor xml:id="_dispatch__main_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Object&#32;that&#32;perform&#32;fork&#32;for&#32;each&#32;functor&#32;on&#32;its&#32;vector.&#32;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;checking_pids&#32;=&#32;make_shared&lt;checker_pids&gt;();
<anchor xml:id="_dispatch__main_8cpp_source_1l00088"/>00088 
<anchor xml:id="_dispatch__main_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;every&#32;dispatcher:</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00090"/>00090 
<anchor xml:id="_dispatch__main_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;vector&lt;Dispatcher&gt;&#32;v_dispatchers;
<anchor xml:id="_dispatch__main_8cpp_source_1l00092"/>00092 
<anchor xml:id="_dispatch__main_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;v_dispatchers.reserve(cfg.<link linkend="_classall__dispatch__cfg_1a9f4905b32052e78277bf7ddfddd81115">get_num_dispatchers</link>());
<anchor xml:id="_dispatch__main_8cpp_source_1l00094"/>00094 
<anchor xml:id="_dispatch__main_8cpp_source_1l00095"/>00095 &#32;
<anchor xml:id="_dispatch__main_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;&amp;config&#32;:&#32;cfg.<link linkend="_classall__dispatch__cfg_1a027da4c0819cbc7b6301423ae2e99a17">get_all_dispatch_info</link>())
<anchor xml:id="_dispatch__main_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;{
<anchor xml:id="_dispatch__main_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;v_dispatchers.emplace_back(config,checking_pids-&gt;get_run_flags());
<anchor xml:id="_dispatch__main_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dispatch__main_8cpp_source_1l00100"/>00100 
<anchor xml:id="_dispatch__main_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Dispatcher&#32;vector&#32;ok!&#32;Prepare&#32;checker_pids...&quot;</emphasis>;
<anchor xml:id="_dispatch__main_8cpp_source_1l00102"/>00102 
<anchor xml:id="_dispatch__main_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prepare&#32;for&#32;fork()&#32;and&#32;checking</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00104"/>00104 
<anchor xml:id="_dispatch__main_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;&amp;dispat&#32;:&#32;v_dispatchers)
<anchor xml:id="_dispatch__main_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;{
<anchor xml:id="_dispatch__main_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checking_pids-&gt;add(dispat,<emphasis role="stringliteral">&quot;Dispatcher&quot;</emphasis>);
<anchor xml:id="_dispatch__main_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dispatch__main_8cpp_source_1l00109"/>00109 
<anchor xml:id="_dispatch__main_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Launching&#32;all&#32;dispatchers...&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_dispatch__main_8cpp_source_1l00111"/>00111 
<anchor xml:id="_dispatch__main_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;ret=checking_pids-&gt;operator()();
<anchor xml:id="_dispatch__main_8cpp_source_1l00113"/>00113 
<anchor xml:id="_dispatch__main_8cpp_source_1l00114"/>00114 
<anchor xml:id="_dispatch__main_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ending&#32;process&#32;main&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;ret;
<anchor xml:id="_dispatch__main_8cpp_source_1l00116"/>00116 
<anchor xml:id="_dispatch__main_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_dispatch__main_8cpp_source_1l00118"/>00118 }
</programlisting></section>
