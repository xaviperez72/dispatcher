<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_thread__pair_8cpp_source" xml:lang="en-US">
<title>thread_pair.cpp</title>
<indexterm><primary>src/thread_pair.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_thread__pair_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_thread__pair_8h">thread_pair.h</link>&quot;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00002"/>00002 
<anchor xml:id="_thread__pair_8cpp_source_1l00003"/>00003 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_thread__pair_8cpp_source_1l00004"/>00004 
<anchor xml:id="_thread__pair_8cpp_source_1l00005"/><link linkend="_classthread__pair_1acf8b3f678e83f280cb66f7d1ee5d0fd3">00005</link> <link linkend="_classthread__pair_1a436e3475859bcebbc976a3c6105ce794">thread_pair::thread_pair</link>(<link linkend="_classMessageQueue">MessageQueue</link>&#32;write_queue_id,&#32;<link linkend="_classMessageQueue">MessageQueue</link>&#32;common_queue,&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx_thp,&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;keep_running_flags&gt;&#32;shpt_keep_running,&#32;std::shared_ptr&lt;connections&gt;&#32;shpt_conn,&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//std::shared_ptr&lt;signal_synch&gt;&#32;shpt_sigsyn,&#32;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::shared_ptr&lt;Semaphore&gt;&#32;shpt_sem)
<anchor xml:id="_thread__pair_8cpp_source_1l00009"/>00009 {
<anchor xml:id="_thread__pair_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_shpt_sigsyn&#32;=&#32;shpt_sigsyn;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a6cb38f1b6d4b0b494c3bae5e4b95d093">_write_queue</link>&#32;=&#32;write_queue_id;
<anchor xml:id="_thread__pair_8cpp_source_1l00012"/>00012 
<anchor xml:id="_thread__pair_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;assert(<link linkend="_classthread__pair_1a6cb38f1b6d4b0b494c3bae5e4b95d093">_write_queue</link>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;write_queue&#32;not&#32;operative.&quot;</emphasis>);
<anchor xml:id="_thread__pair_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;assert(common_queue&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;read_queue&#32;(common&#32;queue)&#32;not&#32;operative.&quot;</emphasis>);
<anchor xml:id="_thread__pair_8cpp_source_1l00015"/>00015 
<anchor xml:id="_thread__pair_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_accept_mutex&#32;=&#32;std::make_shared&lt;mutex&gt;();</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00017"/>00017 
<anchor xml:id="_thread__pair_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1af0f10327ce77aa56346835d1132a93ad">_common_queue</link>&#32;=&#32;common_queue;
<anchor xml:id="_thread__pair_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a6070dd7cb7890f810b3c8730f800cd5e">_idx_thp</link>&#32;=&#32;idx_thp;
<anchor xml:id="_thread__pair_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1aef0f78598d5c8bf62f73b0faa5f8ac28">_sharedptr_keep_running</link>&#32;=&#32;shpt_keep_running;
<anchor xml:id="_thread__pair_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a64e6bf076b36b0abd2040545469c13c0">_p_cur_connections</link>&#32;=&#32;shpt_conn;
<anchor xml:id="_thread__pair_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb">_shpt_semIPCfile</link>&#32;=&#32;shpt_sem;
<anchor xml:id="_thread__pair_8cpp_source_1l00023"/>00023 
<anchor xml:id="_thread__pair_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pipe(<link linkend="_classthread__pair_1a48ce2674603551cda5da4c526bd0ceed">_pipe</link>)&#32;&lt;&#32;0&#32;)&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;create&#32;a&#32;pipe&quot;</emphasis>);
<anchor xml:id="_thread__pair_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00027"/>00027 
<anchor xml:id="_thread__pair_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a5f91b0c7065a5b4ea1d9b2833eec0ee2">th_r</link>&#32;=&#32;std::thread(&amp;<link linkend="_classthread__pair_1a542da55488a6cb54517473429d234801">thread_pair::reader_thread</link>,&#32;<emphasis role="keyword">this</emphasis>,&#32;idx_thp);
<anchor xml:id="_thread__pair_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1aaab23c5aeabc65a9d6eba6ef6d56e4b3">th_w</link>&#32;=&#32;std::thread(&amp;<link linkend="_classthread__pair_1a6ebef75114e800552bdd19598f0964ad">thread_pair::writer_thread</link>,&#32;<emphasis role="keyword">this</emphasis>,&#32;idx_thp);
<anchor xml:id="_thread__pair_8cpp_source_1l00030"/>00030 }
<anchor xml:id="_thread__pair_8cpp_source_1l00031"/>00031 
<anchor xml:id="_thread__pair_8cpp_source_1l00032"/>00032 
<anchor xml:id="_thread__pair_8cpp_source_1l00033"/><link linkend="_classthread__pair_1ac8a0f9dd6117f68e75f9222488f115f6">00033</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread__pair_1ac8a0f9dd6117f68e75f9222488f115f6">thread_pair::Attending_Read_Socket</link>(<link linkend="_structsocket__data__t">socket_data_t</link>&#32;&amp;sdt)
<anchor xml:id="_thread__pair_8cpp_source_1l00034"/>00034 {
<anchor xml:id="_thread__pair_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
<anchor xml:id="_thread__pair_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<link linkend="_classSocket">Socket</link>&#32;sock;
<anchor xml:id="_thread__pair_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;sock.<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>&#32;=&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;std::string&#32;msgin;
<anchor xml:id="_thread__pair_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;std::string&#32;msgout;
<anchor xml:id="_thread__pair_8cpp_source_1l00040"/>00040 
<anchor xml:id="_thread__pair_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<link linkend="_structprotomsg_1_1st__protomsg">protomsg::st_protomsg</link>&#32;v_protomsg;
<anchor xml:id="_thread__pair_8cpp_source_1l00042"/>00042 
<anchor xml:id="_thread__pair_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Reading&#32;from&#32;sd&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00044"/>00044 
<anchor xml:id="_thread__pair_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((status=sock.<link linkend="_classSocket_1ad7b9a7832dc2384d4f899afd73cb1193">socket_read</link>(msgin,1024))&#32;&lt;=&#32;0)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Socket_read&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;errno&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;&lt;&lt;&#32;strerror(errno);
<anchor xml:id="_thread__pair_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Socket&#32;sd:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;IP:Port:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inet_ntoa(sdt.<link linkend="_structsocket__data__t_1a16aaf1c1d992e8c415df13c9a7032bc9">sockaddr</link>.sin_addr)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;&lt;&lt;&#32;ntohs(sdt.<link linkend="_structsocket__data__t_1a16aaf1c1d992e8c415df13c9a7032bc9">sockaddr</link>.sin_port);
<anchor xml:id="_thread__pair_8cpp_source_1l00050"/>00050 
<anchor xml:id="_thread__pair_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092">remove_sockdata</link>(sdt);
<anchor xml:id="_thread__pair_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a64e6bf076b36b0abd2040545469c13c0">_p_cur_connections</link>-&gt;unregister_conn(sdt.<link linkend="_structsocket__data__t_1aa252e34de3632643e5679b18654c4f04">idx_con</link>,&#32;*<link linkend="_classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb">_shpt_semIPCfile</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;sdt.<link linkend="_structsocket__data__t_1a6540b92dc049e8e3b2be6033d7084111">rcvinfo</link>&#32;=&#32;msgin;
<anchor xml:id="_thread__pair_8cpp_source_1l00057"/>00057 
<anchor xml:id="_thread__pair_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TO&#32;DO&#32;-&#32;Check&#32;IP&#32;is&#32;in&#32;table.&#32;Not&#32;needed&#32;since&#32;AccceptThread&#32;checks&#32;for&#32;valid&#32;IP.</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00059"/>00059 
<anchor xml:id="_thread__pair_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_classthread__pair_1ac706f952db441120c6b7ccc709193786">Getting_Json_Msg_Received</link>(msgin,&#32;v_protomsg,&#32;msgout))
<anchor xml:id="_thread__pair_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;Message&#32;Format&#32;(json):&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;msgin;
<anchor xml:id="_thread__pair_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Socket&#32;sd:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;IP:Port:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inet_ntoa(sdt.<link linkend="_structsocket__data__t_1a16aaf1c1d992e8c415df13c9a7032bc9">sockaddr</link>.sin_addr)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;&lt;&lt;&#32;ntohs(sdt.<link linkend="_structsocket__data__t_1a16aaf1c1d992e8c415df13c9a7032bc9">sockaddr</link>.sin_port);
<anchor xml:id="_thread__pair_8cpp_source_1l00065"/>00065 
<anchor xml:id="_thread__pair_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Send&#32;back&#32;MSGIN&#32;original.</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1ad9b11ac85c4ab8985585d33dadd1dddc">q_write</link>&#32;=&#32;<link linkend="_classthread__pair_1af0f10327ce77aa56346835d1132a93ad">_common_queue</link>.<link linkend="_classIpc_1a3e50666a681532a44ed32a283e8e2979">getid</link>();&#32;&#32;<emphasis role="comment">//&#32;Not&#32;usefull&#32;in&#32;this&#32;case...</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_classthread__pair_1a6cb38f1b6d4b0b494c3bae5e4b95d093">_write_queue</link>.<link linkend="_classMessageQueue_1ac3138a4b8f10868f1df70519257fa45f">send</link>(&amp;v_protomsg,&#32;msgin))&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Impossible&#32;to&#32;send&#32;to&#32;Writer_Thread&#32;through&#32;_write_queue:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092">remove_sockdata</link>(sdt);
<anchor xml:id="_thread__pair_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a64e6bf076b36b0abd2040545469c13c0">_p_cur_connections</link>-&gt;unregister_conn(sdt.<link linkend="_structsocket__data__t_1aa252e34de3632643e5679b18654c4f04">idx_con</link>,&#32;*<link linkend="_classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb">_shpt_semIPCfile</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Sending&#32;to&#32;common&#32;queue&#32;for&#32;TuxCli...&quot;</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Send&#32;MSGOUT&#32;to&#32;common&#32;queue&#32;to&#32;process&#32;by&#32;TuxCli&#32;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1ad9b11ac85c4ab8985585d33dadd1dddc">q_write</link>&#32;=&#32;<link linkend="_classthread__pair_1a6cb38f1b6d4b0b494c3bae5e4b95d093">_write_queue</link>.<link linkend="_classIpc_1a3e50666a681532a44ed32a283e8e2979">getid</link>();&#32;&#32;<emphasis role="comment">//&#32;Queue&#32;to&#32;respond&#32;to&#32;proper&#32;Writer_Thread...</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_classthread__pair_1af0f10327ce77aa56346835d1132a93ad">_common_queue</link>.<link linkend="_classMessageQueue_1ac3138a4b8f10868f1df70519257fa45f">send</link>(&amp;v_protomsg,&#32;msgout))&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Impossible&#32;to&#32;send&#32;to&#32;TuxCli&#32;through&#32;_common_queue:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092">remove_sockdata</link>(sdt);
<anchor xml:id="_thread__pair_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a64e6bf076b36b0abd2040545469c13c0">_p_cur_connections</link>-&gt;unregister_conn(sdt.<link linkend="_structsocket__data__t_1aa252e34de3632643e5679b18654c4f04">idx_con</link>,&#32;*<link linkend="_classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb">_shpt_semIPCfile</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00091"/>00091 }
<anchor xml:id="_thread__pair_8cpp_source_1l00092"/>00092 
<anchor xml:id="_thread__pair_8cpp_source_1l00093"/><link linkend="_classthread__pair_1ac706f952db441120c6b7ccc709193786">00093</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classthread__pair_1ac706f952db441120c6b7ccc709193786">thread_pair::Getting_Json_Msg_Received</link>(<emphasis role="keywordtype">string</emphasis>&#32;&amp;msgin,&#32;<link linkend="_structprotomsg_1_1st__protomsg">protomsg::st_protomsg</link>&#32;&amp;v_protomsg,&#32;<emphasis role="keywordtype">string</emphasis>&#32;&amp;msgout)
<anchor xml:id="_thread__pair_8cpp_source_1l00094"/>00094 {
<anchor xml:id="_thread__pair_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;Json::Value&#32;json_msg;
<anchor xml:id="_thread__pair_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;stringstream&#32;ss(msgin);
<anchor xml:id="_thread__pair_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;ss&#32;&gt;&gt;&#32;json_msg;
<anchor xml:id="_thread__pair_8cpp_source_1l00098"/>00098 
<anchor xml:id="_thread__pair_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a7930ab296d19b6d7217ae1acf09229f3">terf</link>&#32;=&#32;json_msg[<emphasis role="stringliteral">&quot;TERF&quot;</emphasis>].asInt();
<anchor xml:id="_thread__pair_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a04f17c6355d8722524757604afadae94">terl</link>&#32;=&#32;json_msg[<emphasis role="stringliteral">&quot;TERL&quot;</emphasis>].asInt();
<anchor xml:id="_thread__pair_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;strncpy(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a205b604a6bed38195230067ede131ec8">guid</link>,&#32;json_msg[<emphasis role="stringliteral">&quot;GUID&quot;</emphasis>].asCString(),&#32;<emphasis role="keyword">sizeof</emphasis>(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a205b604a6bed38195230067ede131ec8">guid</link>)-1);
<anchor xml:id="_thread__pair_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;strncpy(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a91601b868d6a43ab884fdcc028615700">pid</link>,&#32;json_msg[<emphasis role="stringliteral">&quot;PID&quot;</emphasis>].asCString(),&#32;<emphasis role="keyword">sizeof</emphasis>(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a91601b868d6a43ab884fdcc028615700">pid</link>)-1);
<anchor xml:id="_thread__pair_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;strncpy(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1ac122e203520778ab49f551db9d6de1b9">aid</link>,&#32;json_msg[<emphasis role="stringliteral">&quot;AID&quot;</emphasis>].asCString(),&#32;<emphasis role="keyword">sizeof</emphasis>(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1ac122e203520778ab49f551db9d6de1b9">aid</link>)-1);
<anchor xml:id="_thread__pair_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;strncpy(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a87c793980e82b795427b08498c4b6172">cabx</link>,&#32;json_msg[<emphasis role="stringliteral">&quot;CABX&quot;</emphasis>].asCString(),&#32;<emphasis role="keyword">sizeof</emphasis>(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a87c793980e82b795427b08498c4b6172">cabx</link>)-1);
<anchor xml:id="_thread__pair_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;msgout&#32;=&#32;std::string(json_msg[<emphasis role="stringliteral">&quot;MSG&quot;</emphasis>].asCString());
<anchor xml:id="_thread__pair_8cpp_source_1l00106"/>00106 
<anchor xml:id="_thread__pair_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a4da8e282dba03c825108806b9ecbc3e5">mtype</link>&#32;=&#32;<link linkend="_namespaceprotomsg_1a8e34e045d8c49d98e5522e76a20b943a">protomsg::TYPE_NORMAL_MSG</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00108"/>00108 
<anchor xml:id="_thread__pair_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;v_protomsg:&quot;</emphasis>&#32;&lt;&lt;&#32;v_protomsg;
<anchor xml:id="_thread__pair_8cpp_source_1l00110"/>00110 
<anchor xml:id="_thread__pair_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a7930ab296d19b6d7217ae1acf09229f3">terf</link>==0&#32;||&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a04f17c6355d8722524757604afadae94">terl</link>&#32;==&#32;0&#32;||&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strlen(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a205b604a6bed38195230067ede131ec8">guid</link>)&#32;==&#32;0&#32;||&#32;strlen(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a91601b868d6a43ab884fdcc028615700">pid</link>)&#32;==&#32;0&#32;||&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strlen(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1ac122e203520778ab49f551db9d6de1b9">aid</link>)&#32;==&#32;0&#32;||&#32;strlen(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a87c793980e82b795427b08498c4b6172">cabx</link>)&#32;==&#32;0&#32;||&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgout.size()&#32;==&#32;0)
<anchor xml:id="_thread__pair_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_thread__pair_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_thread__pair_8cpp_source_1l00120"/>00120 }
<anchor xml:id="_thread__pair_8cpp_source_1l00121"/>00121 
<anchor xml:id="_thread__pair_8cpp_source_1l00122"/><link linkend="_classthread__pair_1a542da55488a6cb54517473429d234801">00122</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread__pair_1a542da55488a6cb54517473429d234801">thread_pair::reader_thread</link>(<emphasis role="keywordtype">int</emphasis>&#32;idx_thp)
<anchor xml:id="_thread__pair_8cpp_source_1l00123"/>00123 {
<anchor xml:id="_thread__pair_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;list&lt;socket_data_t&gt;&#32;lsdt;
<anchor xml:id="_thread__pair_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;readpipe=<link linkend="_classthread__pair_1a6c14f207dab415ad3c4bb8cad8e226f1">get_read_pipe</link>();
<anchor xml:id="_thread__pair_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;reader_thread&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;idx_thp;
<anchor xml:id="_thread__pair_8cpp_source_1l00127"/>00127 
<anchor xml:id="_thread__pair_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<link linkend="_classthread__pair_1aef0f78598d5c8bf62f73b0faa5f8ac28">_sharedptr_keep_running</link>-&gt;_keep_accepting.load())&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fd_set&#32;readset;
<anchor xml:id="_thread__pair_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nfds,&#32;ret_sel;
<anchor xml:id="_thread__pair_8cpp_source_1l00132"/>00132 
<anchor xml:id="_thread__pair_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00134"/>00134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_lock&lt;std::mutex&gt;&#32;lck(_shpt_sigsyn-&gt;_cv_mutex);</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00135"/>00135 <emphasis role="comment"></emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00136"/>00136 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;shpt_keep_running&#32;=&#32;_sharedptr_keep_running;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00137"/>00137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;wait&#32;for&#32;up&#32;to&#32;10&#32;seconds</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00138"/>00138 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_shpt_sigsyn-&gt;_cv.wait_for(lck,&#32;std::chrono::seconds(10),</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00139"/>00139 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;shpt_keep_running]()&#32;{&#32;return&#32;!shpt_keep_running-&gt;_keep_accepting.load();&#32;});</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00140"/>00140 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00141"/>00141 
<anchor xml:id="_thread__pair_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sleep(1);</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;STEP&#32;1&#32;-&#32;Getting&#32;all&#32;sockets&#32;descriptors&#32;to&#32;SELECT.</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00144"/>00144 
<anchor xml:id="_thread__pair_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a15322b033ebd6882f6ee9c81cc21b512">get_sockdata_list</link>(lsdt);
<anchor xml:id="_thread__pair_8cpp_source_1l00146"/>00146 
<anchor xml:id="_thread__pair_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_ZERO(&amp;readset);
<anchor xml:id="_thread__pair_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nfds&#32;=&#32;0;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00149"/>00149 
<anchor xml:id="_thread__pair_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_SET(readpipe,&#32;&amp;readset);
<anchor xml:id="_thread__pair_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nfds&#32;=&#32;(readpipe&lt;nfds)&#32;?&#32;nfds&#32;:&#32;(readpipe+1);
<anchor xml:id="_thread__pair_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;it=lsdt.begin();&#32;it&#32;!=&#32;lsdt.end();&#32;it++)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_SET(it-&gt;sd,&#32;&amp;readset);
<anchor xml:id="_thread__pair_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nfds&#32;=&#32;(it-&gt;sd&#32;&lt;&#32;nfds)&#32;?&#32;nfds&#32;:&#32;(it-&gt;sd+1);
<anchor xml:id="_thread__pair_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00158"/>00158 
<anchor xml:id="_thread__pair_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Accepting&#32;ndfs=&quot;</emphasis>&#32;&lt;&lt;&#32;nfds&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;connections.&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(readset);
<anchor xml:id="_thread__pair_8cpp_source_1l00160"/>00160 
<anchor xml:id="_thread__pair_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((ret_sel=select(nfds,&#32;&amp;readset,&#32;NULL,&#32;NULL,&#32;NULL))&#32;&lt;&#32;0&#32;)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;someerror=errno;
<anchor xml:id="_thread__pair_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_ERROR&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;SELECT&#32;FAILED:&#32;(&quot;</emphasis>&#32;&lt;&lt;&#32;ret_sel&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;strerror(someerror);
<anchor xml:id="_thread__pair_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;someerror&#32;==&#32;EINTR&#32;)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00169"/>00169 
<anchor xml:id="_thread__pair_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;FD_ISSET(readpipe,&#32;&amp;readset)&#32;)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;read(readpipe,<link linkend="_namespaceprotopipe_1acdb2afef76b82453234a043e76cbf2a9">protopipe::GETPIPEMSG</link>,<link linkend="_namespaceprotopipe_1acdd465b67009b36a3c852eaf3a96d760">protopipe::LEN_PIPEMSG</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_namespaceprotopipe_1acdb2afef76b82453234a043e76cbf2a9">protopipe::GETPIPEMSG</link>[0]==<link linkend="_namespaceprotopipe_1a51046f23aed03692e33538e1dc59d0de">protopipe::ENDING_PIPE</link>[0])&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ENDING_PIPE&#32;received.&quot;</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;&#32;&#32;<emphasis role="comment">//&#32;TO&#32;REMOVE.&#32;Maybe&#32;it&#32;needs&#32;to&#32;finish&#32;all&#32;messages.&#32;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;WEAKUP_PIPE&#32;received.&quot;</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00179"/>00179 
<anchor xml:id="_thread__pair_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00181"/>00181 
<anchor xml:id="_thread__pair_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;it=lsdt.begin();&#32;it&#32;!=&#32;lsdt.end();&#32;it++)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_classthread__pair_1a64e6bf076b36b0abd2040545469c13c0">_p_cur_connections</link>-&gt;check_obsolete(it-&gt;idx_con,&#32;*<link linkend="_classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb">_shpt_semIPCfile</link>)&#32;!=&#32;0&#32;)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Obsolete&#32;or&#32;some&#32;issues&#32;*/</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00187"/>00187 
<anchor xml:id="_thread__pair_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;SD&#32;obsolete&#32;(deleted):&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;it-&gt;sd&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;IP:Port:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inet_ntoa(it-&gt;sockaddr.sin_addr)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;&lt;&lt;&#32;ntohs(it-&gt;sockaddr.sin_port);
<anchor xml:id="_thread__pair_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092">remove_sockdata</link>(*it);
<anchor xml:id="_thread__pair_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(it-&gt;sd);
<anchor xml:id="_thread__pair_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(FD_ISSET(it-&gt;sd,&#32;&amp;readset)&#32;)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Getting&#32;message&#32;from&#32;socket...</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1ac8a0f9dd6117f68e75f9222488f115f6">Attending_Read_Socket</link>(*it);
<anchor xml:id="_thread__pair_8cpp_source_1l00200"/>00200 
<anchor xml:id="_thread__pair_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00203"/>00203 
<anchor xml:id="_thread__pair_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00205"/>00205 
<anchor xml:id="_thread__pair_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pthread_sigmask(SIG_SETMASK,&#32;&amp;_shpt_sigsyn-&gt;_sigset_old,&#32;nullptr);</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00207"/>00207 
<anchor xml:id="_thread__pair_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ending&#32;reader_thread&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;idx_thp;
<anchor xml:id="_thread__pair_8cpp_source_1l00209"/>00209 }
<anchor xml:id="_thread__pair_8cpp_source_1l00210"/>00210 
<anchor xml:id="_thread__pair_8cpp_source_1l00211"/><link linkend="_classthread__pair_1a7047531ed209fcd47ad85cf8a6ad8623">00211</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread__pair_1a7047531ed209fcd47ad85cf8a6ad8623">thread_pair::Prepare_Msg_Json_To_Send</link>(<link linkend="_structprotomsg_1_1st__protomsg">protomsg::st_protomsg</link>&#32;&amp;v_protomsg,&#32;<emphasis role="keywordtype">string</emphasis>&#32;msg,&#32;Json::Value&#32;&amp;json_msg)
<anchor xml:id="_thread__pair_8cpp_source_1l00212"/>00212 {
<anchor xml:id="_thread__pair_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;json_msg[<emphasis role="stringliteral">&quot;TERF&quot;</emphasis>]&#32;=&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a7930ab296d19b6d7217ae1acf09229f3">terf</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;json_msg[<emphasis role="stringliteral">&quot;TERL&quot;</emphasis>]&#32;=&#32;v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a04f17c6355d8722524757604afadae94">terl</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;json_msg[<emphasis role="stringliteral">&quot;GUID&quot;</emphasis>]&#32;=&#32;std::string(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a205b604a6bed38195230067ede131ec8">guid</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;json_msg[<emphasis role="stringliteral">&quot;PID&quot;</emphasis>]&#32;=&#32;std::string(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a91601b868d6a43ab884fdcc028615700">pid</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;json_msg[<emphasis role="stringliteral">&quot;AID&quot;</emphasis>]&#32;=&#32;std::string(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1ac122e203520778ab49f551db9d6de1b9">aid</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;json_msg[<emphasis role="stringliteral">&quot;CABX&quot;</emphasis>]&#32;=&#32;std::string(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a87c793980e82b795427b08498c4b6172">cabx</link>);
<anchor xml:id="_thread__pair_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;json_msg[<emphasis role="stringliteral">&quot;MSG&quot;</emphasis>]&#32;=&#32;msg;
<anchor xml:id="_thread__pair_8cpp_source_1l00220"/>00220 }
<anchor xml:id="_thread__pair_8cpp_source_1l00221"/>00221 
<anchor xml:id="_thread__pair_8cpp_source_1l00222"/><link linkend="_classthread__pair_1a6ebef75114e800552bdd19598f0964ad">00222</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classthread__pair_1a6ebef75114e800552bdd19598f0964ad">thread_pair::writer_thread</link>(<emphasis role="keywordtype">int</emphasis>&#32;idx_thp)
<anchor xml:id="_thread__pair_8cpp_source_1l00223"/>00223 {
<anchor xml:id="_thread__pair_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;type;
<anchor xml:id="_thread__pair_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;std::string&#32;msg,&#32;msgout;
<anchor xml:id="_thread__pair_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;Json::Value&#32;json_msg;
<anchor xml:id="_thread__pair_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<link linkend="_structprotomsg_1_1st__protomsg">protomsg::st_protomsg</link>&#32;v_protomsg;
<anchor xml:id="_thread__pair_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<link linkend="_structconnection">connection</link>&#32;cur_conn;
<anchor xml:id="_thread__pair_8cpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;<link linkend="_classSocket">Socket</link>&#32;send_sock;
<anchor xml:id="_thread__pair_8cpp_source_1l00230"/>00230 
<anchor xml:id="_thread__pair_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;writer_thread&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;idx_thp;
<anchor xml:id="_thread__pair_8cpp_source_1l00232"/>00232 
<anchor xml:id="_thread__pair_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<link linkend="_classthread__pair_1aef0f78598d5c8bf62f73b0faa5f8ac28">_sharedptr_keep_running</link>-&gt;_keep_working.load())&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00236"/>00236 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::unique_lock&lt;std::mutex&gt;&#32;lck(_shpt_sigsyn-&gt;_cv_mutex);</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00237"/>00237 <emphasis role="comment"></emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00238"/>00238 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;shpt_keep_running&#32;=&#32;_sharedptr_keep_running;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00239"/>00239 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;wait&#32;for&#32;up&#32;to&#32;10&#32;seconds</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00240"/>00240 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_shpt_sigsyn-&gt;_cv.wait_for(lck,&#32;std::chrono::seconds(10),</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00241"/>00241 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;shpt_keep_running]()&#32;{&#32;return&#32;!shpt_keep_running-&gt;_keep_working.load();&#32;});</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00242"/>00242 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//sleep(1);</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;STEP&#32;1&#32;-&#32;ReadFromQueue&#32;&#32;(idx_con&#32;on&#32;message)</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a6cb38f1b6d4b0b494c3bae5e4b95d093">_write_queue</link>.<link linkend="_classMessageQueue_1ae4afb1b560697ce2a0bd8a0b5bca8f21">rcv</link>(&amp;v_protomsg,&#32;msg);
<anchor xml:id="_thread__pair_8cpp_source_1l00247"/>00247 
<anchor xml:id="_thread__pair_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1a4da8e282dba03c825108806b9ecbc3e5">mtype</link>&#32;==&#32;<link linkend="_namespaceprotomsg_1a170738b21ae44465185c95dc94c4a317">protomsg::TYPE_ENDING_MSG</link>)&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Received&#32;protomsg::TYPE_ENDING_MSG&quot;</emphasis>;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_thread__pair_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00253"/>00253 
<anchor xml:id="_thread__pair_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a7047531ed209fcd47ad85cf8a6ad8623">Prepare_Msg_Json_To_Send</link>(v_protomsg,&#32;msg,&#32;json_msg);
<anchor xml:id="_thread__pair_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a64e6bf076b36b0abd2040545469c13c0">_p_cur_connections</link>-&gt;ending_operation(v_protomsg.<link linkend="_structprotomsg_1_1st__protomsg_1ad687a9308b0ea081d445fbaac12c29b7">idx</link>,&#32;*<link linkend="_classthread__pair_1a04656cf6e7247a59e69eeeb6101b3ddb">_shpt_semIPCfile</link>,&#32;cur_conn);
<anchor xml:id="_thread__pair_8cpp_source_1l00257"/>00257 
<anchor xml:id="_thread__pair_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;STEP&#32;2&#32;-&#32;Send&#32;msg&#32;to&#32;socket&#32;</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00259"/>00259 
<anchor xml:id="_thread__pair_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;send_sock.<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>&#32;=&#32;cur_conn.<link linkend="_structconnection_1aaf5e92500e5f396f4e1e1b70b01168a1">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00261"/>00261 
<anchor xml:id="_thread__pair_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stringstream&#32;ss;
<anchor xml:id="_thread__pair_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;field;
<anchor xml:id="_thread__pair_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;json_msg;
<anchor xml:id="_thread__pair_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(getline(ss,&#32;field))&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgout&#32;+=&#32;field;
<anchor xml:id="_thread__pair_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Sending&#32;msgout:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;msgout;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00270"/>00270 
<anchor xml:id="_thread__pair_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;send_sock.<link linkend="_classSocket_1a564eb3f48d8cb31423076e68f8cc1f54">socket_write</link>(msgout);
<anchor xml:id="_thread__pair_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgout.clear();
<anchor xml:id="_thread__pair_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00275"/>00275 
<anchor xml:id="_thread__pair_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<emphasis role="comment">//pthread_sigmask(SIG_SETMASK,&#32;&amp;_shpt_sigsyn-&gt;_sigset_old,&#32;nullptr);</emphasis>
<anchor xml:id="_thread__pair_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Ending&#32;writer_thread&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;idx_thp;
<anchor xml:id="_thread__pair_8cpp_source_1l00278"/>00278 }
<anchor xml:id="_thread__pair_8cpp_source_1l00279"/>00279 
<anchor xml:id="_thread__pair_8cpp_source_1l00280"/><link linkend="_classthread__pair_1a5059ef6b79e75c8f15aca5785c8ca15c">00280</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classthread__pair_1a5059ef6b79e75c8f15aca5785c8ca15c">thread_pair::add_sockdata</link>(<link linkend="_structsocket__data__t">socket_data_t</link>&#32;sdt)
<anchor xml:id="_thread__pair_8cpp_source_1l00281"/>00281 {
<anchor xml:id="_thread__pair_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;l_guard{<link linkend="_classthread__pair_1ab7a9a2bfb659ede1bebbb06a38a89f19">_accept_mutex</link>};
<anchor xml:id="_thread__pair_8cpp_source_1l00283"/>00283 
<anchor xml:id="_thread__pair_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a7371d66499abbff03183171892687428">_sockdata</link>.emplace_back(sdt);
<anchor xml:id="_thread__pair_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;add_sockdata&#32;OK!!&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_thread__pair_8cpp_source_1l00288"/>00288 }
<anchor xml:id="_thread__pair_8cpp_source_1l00289"/>00289 
<anchor xml:id="_thread__pair_8cpp_source_1l00290"/><link linkend="_classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092">00290</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classthread__pair_1a2d936545f8c4da9bb9271f1b355f4092">thread_pair::remove_sockdata</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsocket__data__t">socket_data_t</link>&#32;&amp;sdt)
<anchor xml:id="_thread__pair_8cpp_source_1l00291"/>00291 {
<anchor xml:id="_thread__pair_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;l_guard{<link linkend="_classthread__pair_1ab7a9a2bfb659ede1bebbb06a38a89f19">_accept_mutex</link>};
<anchor xml:id="_thread__pair_8cpp_source_1l00293"/>00293 
<anchor xml:id="_thread__pair_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;std::list&lt;socket_data_t&gt;::iterator&#32;findIter&#32;=&#32;std::find(<link linkend="_classthread__pair_1a7371d66499abbff03183171892687428">_sockdata</link>.begin(),&#32;<link linkend="_classthread__pair_1a7371d66499abbff03183171892687428">_sockdata</link>.end(),&#32;sdt);
<anchor xml:id="_thread__pair_8cpp_source_1l00295"/>00295 
<anchor xml:id="_thread__pair_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(findIter&#32;==&#32;<link linkend="_classthread__pair_1a7371d66499abbff03183171892687428">_sockdata</link>.end())&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;remove_sockdata&#32;NOT&#32;FOUND!!&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_thread__pair_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_thread__pair_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsocket__data__t">socket_data_t</link>&#32;item&#32;=&#32;*findIter;
<anchor xml:id="_thread__pair_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classthread__pair_1a7371d66499abbff03183171892687428">_sockdata</link>.remove(item);
<anchor xml:id="_thread__pair_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;remove_sockdata&#32;OK!!&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;sdt.<link linkend="_structsocket__data__t_1a0796047c7fbe7ad403803e318d28bf9f">sd</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_thread__pair_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;}
<anchor xml:id="_thread__pair_8cpp_source_1l00306"/>00306 }
<anchor xml:id="_thread__pair_8cpp_source_1l00307"/>00307 
<anchor xml:id="_thread__pair_8cpp_source_1l00308"/><link linkend="_classthread__pair_1a15322b033ebd6882f6ee9c81cc21b512">00308</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classthread__pair_1a15322b033ebd6882f6ee9c81cc21b512">thread_pair::get_sockdata_list</link>(list&lt;socket_data_t&gt;&#32;&amp;lsdt)
<anchor xml:id="_thread__pair_8cpp_source_1l00309"/>00309 {
<anchor xml:id="_thread__pair_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;l_guard{<link linkend="_classthread__pair_1ab7a9a2bfb659ede1bebbb06a38a89f19">_accept_mutex</link>};
<anchor xml:id="_thread__pair_8cpp_source_1l00311"/>00311 
<anchor xml:id="_thread__pair_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;lsdt&#32;=&#32;<link linkend="_classthread__pair_1a7371d66499abbff03183171892687428">_sockdata</link>;
<anchor xml:id="_thread__pair_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;LOG_DEBUG&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;get_sockdata_list&#32;OK!!&#32;lsdt.size()=&quot;</emphasis>&#32;&lt;&lt;&#32;lsdt.size();&#32;
<anchor xml:id="_thread__pair_8cpp_source_1l00315"/>00315 
<anchor xml:id="_thread__pair_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_thread__pair_8cpp_source_1l00317"/>00317 }
</programlisting></section>
