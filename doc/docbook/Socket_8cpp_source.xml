<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_Socket_8cpp_source" xml:lang="en-US">
<title>Socket.cpp</title>
<indexterm><primary>src/Socket.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_Socket_8cpp_source_1l00001"/>00001 <emphasis role="comment">//</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00002"/>00002 <emphasis role="comment">//&#32;&#32;Socket.cpp</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00003"/>00003 <emphasis role="comment">//&#32;&#32;SocketServer</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00004"/>00004 <emphasis role="comment">//</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00005"/>00005 <emphasis role="comment">//&#32;&#32;Created&#32;by&#32;Kay&#32;Makowsky&#32;on&#32;15.06.16.</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00006"/>00006 <emphasis role="comment">//&#32;&#32;Copyright&#32;Â©&#32;2016&#32;Kay&#32;Makowsky.&#32;All&#32;rights&#32;reserved.</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00007"/>00007 <emphasis role="comment">//</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00008"/>00008 
<anchor xml:id="_Socket_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_Socket_8h">Socket.h</link>&quot;</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00010"/>00010 
<anchor xml:id="_Socket_8cpp_source_1l00011"/>00011 <emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
<anchor xml:id="_Socket_8cpp_source_1l00012"/><link linkend="_classSocket_1a7c3256c4fc6e2c603df73201049fae5a">00012</link> <link linkend="_classSocket_1a7c3256c4fc6e2c603df73201049fae5a">Socket::Socket</link>(){
<anchor xml:id="_Socket_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00014"/>00014 }
<anchor xml:id="_Socket_8cpp_source_1l00015"/><link linkend="_classSocket_1a87656ab3b60c9f793a426e0cb2d57317">00015</link> <link linkend="_classSocket_1a7c3256c4fc6e2c603df73201049fae5a">Socket::Socket</link>(<emphasis role="keywordtype">int</emphasis>&#32;domain,&#32;<emphasis role="keywordtype">int</emphasis>&#32;type,&#32;<emphasis role="keywordtype">int</emphasis>&#32;protocol)
<anchor xml:id="_Socket_8cpp_source_1l00016"/>00016 {
<anchor xml:id="_Socket_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;memset(&amp;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>);
<anchor xml:id="_Socket_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>&#32;=&#32;socket(domain,&#32;type&#32;,&#32;protocol);
<anchor xml:id="_Socket_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;opening&#32;socket&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_family&#32;=&#32;domain;
<anchor xml:id="_Socket_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_socktype&#32;=&#32;type;
<anchor xml:id="_Socket_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_protocol&#32;=&#32;protocol;
<anchor xml:id="_Socket_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_Socket_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a2708e6a0b9b2b4c2c547757c86848cf4">address</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_Socket_8cpp_source_1l00029"/>00029 }
<anchor xml:id="_Socket_8cpp_source_1l00030"/>00030 
<anchor xml:id="_Socket_8cpp_source_1l00031"/><link linkend="_classSocket_1a4f142a9d6ffd312c72bc813797658a1b">00031</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1a4f142a9d6ffd312c72bc813797658a1b">Socket::bind</link>(<emphasis role="keywordtype">string</emphasis>&#32;ip,&#32;<emphasis role="keywordtype">string</emphasis>&#32;port){
<anchor xml:id="_Socket_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_family&#32;==&#32;AF_UNIX)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_un&#32;addr;
<anchor xml:id="_Socket_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;addr,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(addr));
<anchor xml:id="_Socket_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addr.sun_family&#32;=&#32;AF_UNIX;
<anchor xml:id="_Socket_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strncpy(addr.sun_path,&#32;ip.c_str(),&#32;<emphasis role="keyword">sizeof</emphasis>(addr.sun_path)-1);
<anchor xml:id="_Socket_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;<link linkend="_classSocket_1a4f142a9d6ffd312c72bc813797658a1b">::bind</link>(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr*)&amp;addr,&#32;<emphasis role="keyword">sizeof</emphasis>(addr));
<anchor xml:id="_Socket_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bind&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a2708e6a0b9b2b4c2c547757c86848cf4">address</link>&#32;=&#32;ip;
<anchor xml:id="_Socket_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;this-&gt;port&#32;=&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>;
<anchor xml:id="_Socket_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*res;
<anchor xml:id="_Socket_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_flags&#32;=&#32;AI_PASSIVE;
<anchor xml:id="_Socket_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((status&#32;=&#32;getaddrinfo(ip.c_str(),&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>.c_str(),&#32;&amp;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>,&#32;&amp;res))&#32;!=&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;getaddrinfo&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen&#32;=&#32;res-&gt;ai_addrlen;
<anchor xml:id="_Socket_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr&#32;=&#32;res-&gt;ai_addr;
<anchor xml:id="_Socket_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;freeaddrinfo(res);
<anchor xml:id="_Socket_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classSocket_1a4f142a9d6ffd312c72bc813797658a1b">::bind</link>(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr,&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen);
<anchor xml:id="_Socket_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;bind&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00065"/>00065 }
<anchor xml:id="_Socket_8cpp_source_1l00066"/>00066 
<anchor xml:id="_Socket_8cpp_source_1l00067"/><link linkend="_classSocket_1ac57cbd359ac6c4c731dbcebebfc6af5c">00067</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1ac57cbd359ac6c4c731dbcebebfc6af5c">Socket::connect</link>(<emphasis role="keywordtype">string</emphasis>&#32;ip,&#32;<emphasis role="keywordtype">string</emphasis>&#32;port){
<anchor xml:id="_Socket_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_family&#32;==&#32;AF_UNIX)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_un&#32;addr;
<anchor xml:id="_Socket_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;addr,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(addr));
<anchor xml:id="_Socket_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addr.sun_family&#32;=&#32;AF_UNIX;
<anchor xml:id="_Socket_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strncpy(addr.sun_path,&#32;ip.c_str(),&#32;<emphasis role="keyword">sizeof</emphasis>(addr.sun_path)-1);
<anchor xml:id="_Socket_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;<link linkend="_classSocket_1ac57cbd359ac6c4c731dbcebebfc6af5c">::connect</link>(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr*)&amp;addr,&#32;<emphasis role="keyword">sizeof</emphasis>(addr));
<anchor xml:id="_Socket_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;connect&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a2708e6a0b9b2b4c2c547757c86848cf4">address</link>&#32;=&#32;ip;
<anchor xml:id="_Socket_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;this-&gt;port&#32;=&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>;
<anchor xml:id="_Socket_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*res;
<anchor xml:id="_Socket_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((status&#32;=&#32;getaddrinfo(ip.c_str(),&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>.c_str(),&#32;&amp;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>,&#32;&amp;res))&#32;!=&#32;0){
<anchor xml:id="_Socket_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;getaddrinfo&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno);
<anchor xml:id="_Socket_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen&#32;=&#32;res-&gt;ai_addrlen;
<anchor xml:id="_Socket_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr&#32;=&#32;res-&gt;ai_addr;
<anchor xml:id="_Socket_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;freeaddrinfo(res);
<anchor xml:id="_Socket_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classSocket_1ac57cbd359ac6c4c731dbcebebfc6af5c">::connect</link>(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr,&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen);
<anchor xml:id="_Socket_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;connect&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(status)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00101"/>00101 }
<anchor xml:id="_Socket_8cpp_source_1l00102"/>00102 
<anchor xml:id="_Socket_8cpp_source_1l00103"/><link linkend="_classSocket_1af4b275979ee2f9b28bbc54c90daae2e9">00103</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1af4b275979ee2f9b28bbc54c90daae2e9">Socket::listen</link>(<emphasis role="keywordtype">int</emphasis>&#32;max_queue){
<anchor xml:id="_Socket_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;status&#32;=&#32;<link linkend="_classSocket_1af4b275979ee2f9b28bbc54c90daae2e9">::listen</link>(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,max_queue);
<anchor xml:id="_Socket_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;listen&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00111"/>00111 }
<anchor xml:id="_Socket_8cpp_source_1l00112"/>00112 
<anchor xml:id="_Socket_8cpp_source_1l00113"/><link linkend="_classSocket_1a3f749d9a206e48a875e8c24f29500a93">00113</link> <link linkend="_classSocket">Socket</link>&#32;<link linkend="_classSocket_1a3f749d9a206e48a875e8c24f29500a93">Socket::accept</link>(){
<anchor xml:id="_Socket_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;socklen_t&#32;addr_size;
<anchor xml:id="_Socket_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;addr_size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>&#32;<link linkend="_classSocket_1ac4c0caa322e951195f18053bdfdd81ce">their_addr</link>;
<anchor xml:id="_Socket_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;newsock&#32;=&#32;<link linkend="_classSocket_1a3f749d9a206e48a875e8c24f29500a93">::accept</link>(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;<link linkend="_classSocket_1ac4c0caa322e951195f18053bdfdd81ce">their_addr</link>,&#32;&amp;addr_size);
<anchor xml:id="_Socket_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newsock&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;accept&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<link linkend="_classSocket">Socket</link>&#32;newSocket(<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_family,<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_socktype,<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_protocol);
<anchor xml:id="_Socket_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;newSocket.<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>&#32;=&#32;newsock;
<anchor xml:id="_Socket_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;newSocket.<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>&#32;=&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>;
<anchor xml:id="_Socket_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;host[NI_MAXHOST];
<anchor xml:id="_Socket_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;getnameinfo((<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;<link linkend="_classSocket_1ac4c0caa322e951195f18053bdfdd81ce">their_addr</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classSocket_1ac4c0caa322e951195f18053bdfdd81ce">their_addr</link>),&#32;host,&#32;<emphasis role="keyword">sizeof</emphasis>(host),&#32;NULL,&#32;0,&#32;NI_NUMERICHOST);
<anchor xml:id="_Socket_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;getnameinfo&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;newSocket.<link linkend="_classSocket_1a2708e6a0b9b2b4c2c547757c86848cf4">address</link>&#32;=&#32;host;
<anchor xml:id="_Socket_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;newSocket.<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_family&#32;=&#32;<link linkend="_classSocket_1ac4c0caa322e951195f18053bdfdd81ce">their_addr</link>.ss_family;
<anchor xml:id="_Socket_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;newSocket.<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>sockaddr&#32;*)&amp;<link linkend="_classSocket_1ac4c0caa322e951195f18053bdfdd81ce">their_addr</link>;
<anchor xml:id="_Socket_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newSocket;
<anchor xml:id="_Socket_8cpp_source_1l00135"/>00135 }
<anchor xml:id="_Socket_8cpp_source_1l00136"/><link linkend="_classSocket_1a564eb3f48d8cb31423076e68f8cc1f54">00136</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1a564eb3f48d8cb31423076e68f8cc1f54">Socket::socket_write</link>(<emphasis role="keywordtype">string</emphasis>&#32;msg){
<anchor xml:id="_Socket_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;buf&#32;=&#32;msg.c_str();
<anchor xml:id="_Socket_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len&#32;=&#32;(int)strlen(buf);
<anchor xml:id="_Socket_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;(int)send(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;buf,&#32;len,&#32;0);
<anchor xml:id="_Socket_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;write&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00145"/>00145 }
<anchor xml:id="_Socket_8cpp_source_1l00146"/><link linkend="_classSocket_1a27b26f9051e8ff3deeb8bfe0f0dea66f">00146</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1a27b26f9051e8ff3deeb8bfe0f0dea66f">Socket::socket_safe_read</link>(<emphasis role="keywordtype">string</emphasis>&#32;&amp;buf,<emphasis role="keywordtype">int</emphasis>&#32;len,<emphasis role="keywordtype">int</emphasis>&#32;seconds){
<anchor xml:id="_Socket_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;vector&lt;Socket&gt;&#32;reads;
<anchor xml:id="_Socket_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;reads.push_back(*<emphasis role="keyword">this</emphasis>);
<anchor xml:id="_Socket_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;count&#32;=&#32;<link linkend="_classSocket_1a8078f3895616b76dae6367e765bc5744">Socket::select</link>(&amp;reads,&#32;NULL,&#32;NULL,&#32;seconds);
<anchor xml:id="_Socket_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(count&#32;&lt;&#32;1){
<anchor xml:id="_Socket_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//No&#32;new&#32;Connection</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buf&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_Socket_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_Socket_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[len];
<anchor xml:id="_Socket_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;bzero(buffer,len);
<anchor xml:id="_Socket_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;(int)recv(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;buffer,&#32;len-1,&#32;0);
<anchor xml:id="_Socket_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;read&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;buf&#32;=&#32;string(buffer);
<anchor xml:id="_Socket_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00164"/>00164 }
<anchor xml:id="_Socket_8cpp_source_1l00165"/><link linkend="_classSocket_1ad7b9a7832dc2384d4f899afd73cb1193">00165</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1ad7b9a7832dc2384d4f899afd73cb1193">Socket::socket_read</link>(<emphasis role="keywordtype">string</emphasis>&#32;&amp;buf,<emphasis role="keywordtype">int</emphasis>&#32;len){
<anchor xml:id="_Socket_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[len];
<anchor xml:id="_Socket_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;bzero(buffer,len);
<anchor xml:id="_Socket_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;(int)recv(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;buffer,&#32;len-1,&#32;0);
<anchor xml:id="_Socket_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;read&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;buf&#32;=&#32;string(buffer);
<anchor xml:id="_Socket_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00175"/>00175 }
<anchor xml:id="_Socket_8cpp_source_1l00176"/><link linkend="_classSocket_1afc14b0a6d28023b8388dc63f1715da65">00176</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1afc14b0a6d28023b8388dc63f1715da65">Socket::socket_writeTo</link>(<emphasis role="keywordtype">string</emphasis>&#32;msg,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ip,&#32;<emphasis role="keywordtype">string</emphasis>&#32;port){
<anchor xml:id="_Socket_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;buf&#32;=&#32;msg.c_str();
<anchor xml:id="_Socket_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;len&#32;=&#32;(int)strlen(buf);
<anchor xml:id="_Socket_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a2708e6a0b9b2b4c2c547757c86848cf4">address</link>&#32;=&#32;ip;
<anchor xml:id="_Socket_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;this-&gt;port&#32;=&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>;
<anchor xml:id="_Socket_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*res;
<anchor xml:id="_Socket_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((status&#32;=&#32;getaddrinfo(ip.c_str(),&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>.c_str(),&#32;&amp;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>,&#32;&amp;res))&#32;!=&#32;0){
<anchor xml:id="_Socket_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;getaddrinfo&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen&#32;=&#32;res-&gt;ai_addrlen;
<anchor xml:id="_Socket_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr&#32;=&#32;res-&gt;ai_addr;
<anchor xml:id="_Socket_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;freeaddrinfo(res);
<anchor xml:id="_Socket_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;status&#32;=&#32;(int)sendto(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;buf,&#32;len,&#32;0,&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr,&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen);
<anchor xml:id="_Socket_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;writeTo&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00197"/>00197 }
<anchor xml:id="_Socket_8cpp_source_1l00198"/><link linkend="_classSocket_1ab244c6b09f175b4423790886d2eb9486">00198</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1ab244c6b09f175b4423790886d2eb9486">Socket::socket_readFrom</link>(<emphasis role="keywordtype">string</emphasis>&#32;&amp;buf,&#32;<emphasis role="keywordtype">int</emphasis>&#32;len,&#32;<emphasis role="keywordtype">string</emphasis>&#32;ip,&#32;<emphasis role="keywordtype">string</emphasis>&#32;port){
<anchor xml:id="_Socket_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[len];
<anchor xml:id="_Socket_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;bzero(buffer,len);
<anchor xml:id="_Socket_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*res;
<anchor xml:id="_Socket_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((status&#32;=&#32;getaddrinfo(ip.c_str(),&#32;<link linkend="_classSocket_1af75711bf9c0f0788d7767f836a97c5e6">port</link>.c_str(),&#32;&amp;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>,&#32;&amp;res))&#32;!=&#32;0){
<anchor xml:id="_Socket_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;getaddrinfo&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen&#32;=&#32;res-&gt;ai_addrlen;
<anchor xml:id="_Socket_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr&#32;=&#32;res-&gt;ai_addr;
<anchor xml:id="_Socket_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;freeaddrinfo(res);
<anchor xml:id="_Socket_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;status&#32;=&#32;(int)recvfrom(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;buffer,&#32;len-1,&#32;0,<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addr,&#32;&amp;<link linkend="_classSocket_1a641d9c790350664e5e90dce7d78bd59a">address_info</link>.ai_addrlen);
<anchor xml:id="_Socket_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;readFrom&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;buf&#32;=&#32;string(buffer);&#32;
<anchor xml:id="_Socket_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00218"/>00218 }
<anchor xml:id="_Socket_8cpp_source_1l00219"/>00219 
<anchor xml:id="_Socket_8cpp_source_1l00220"/><link linkend="_classSocket_1acac0892dfa60b7034b662060f640009a">00220</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1acac0892dfa60b7034b662060f640009a">Socket::socket_set_opt</link>(<emphasis role="keywordtype">int</emphasis>&#32;level,&#32;<emphasis role="keywordtype">int</emphasis>&#32;optname,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;optval){
<anchor xml:id="_Socket_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;len&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(optval);
<anchor xml:id="_Socket_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;::setsockopt(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,level,optname,optval,len);
<anchor xml:id="_Socket_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;socket_set_opt&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00228"/>00228 }
<anchor xml:id="_Socket_8cpp_source_1l00229"/>00229 
<anchor xml:id="_Socket_8cpp_source_1l00230"/><link linkend="_classSocket_1ab51d01cc80b2a4648086322d9e99417b">00230</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1ab51d01cc80b2a4648086322d9e99417b">Socket::socket_get_opt</link>(<emphasis role="keywordtype">int</emphasis>&#32;level,&#32;<emphasis role="keywordtype">int</emphasis>&#32;optname,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;optval){
<anchor xml:id="_Socket_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;len&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(optval);
<anchor xml:id="_Socket_8cpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;::getsockopt(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,level,optname,optval,&amp;len);
<anchor xml:id="_Socket_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;socket_get_opt&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00238"/>00238 }
<anchor xml:id="_Socket_8cpp_source_1l00239"/>00239 
<anchor xml:id="_Socket_8cpp_source_1l00240"/><link linkend="_classSocket_1a2a59b2d7eef6873ab1849951fd23ea0b">00240</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1a2a59b2d7eef6873ab1849951fd23ea0b">Socket::set_blocking</link>(){
<anchor xml:id="_Socket_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;status&#32;=&#32;fcntl(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;F_GETFL,&#32;NULL);
<anchor xml:id="_Socket_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;set_blocking(get)&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;status&#32;&amp;=&#32;(~O_NONBLOCK);
<anchor xml:id="_Socket_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;status&#32;=&#32;fcntl(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;F_SETFL,&#32;status);
<anchor xml:id="_Socket_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;set_blocking(set)&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)status;
<anchor xml:id="_Socket_8cpp_source_1l00253"/>00253 }
<anchor xml:id="_Socket_8cpp_source_1l00254"/>00254 
<anchor xml:id="_Socket_8cpp_source_1l00255"/><link linkend="_classSocket_1a28772006630fafe066e1e4db34fc8a8d">00255</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1a28772006630fafe066e1e4db34fc8a8d">Socket::set_non_blocking</link>(){
<anchor xml:id="_Socket_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;status&#32;=&#32;fcntl(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;F_GETFL,&#32;NULL);
<anchor xml:id="_Socket_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;set_non_blocking(get)&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;status&#32;|=&#32;O_NONBLOCK;
<anchor xml:id="_Socket_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;status&#32;=&#32;fcntl(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;F_SETFL,&#32;status);
<anchor xml:id="_Socket_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;set_non_blocking(set)&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)status;
<anchor xml:id="_Socket_8cpp_source_1l00268"/>00268 }
<anchor xml:id="_Socket_8cpp_source_1l00269"/>00269 
<anchor xml:id="_Socket_8cpp_source_1l00270"/><link linkend="_classSocket_1af6f86be700a215da342cfaeba37e7c0f">00270</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1af6f86be700a215da342cfaeba37e7c0f">Socket::socket_shutdown</link>(<emphasis role="keywordtype">int</emphasis>&#32;how){
<anchor xml:id="_Socket_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;::shutdown(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>,&#32;how);
<anchor xml:id="_Socket_8cpp_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;shutdown&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;status;
<anchor xml:id="_Socket_8cpp_source_1l00277"/>00277 }
<anchor xml:id="_Socket_8cpp_source_1l00278"/>00278 
<anchor xml:id="_Socket_8cpp_source_1l00279"/><link linkend="_classSocket_1a75ee749264ccbcfc4dfbf5442e55dcb8">00279</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classSocket_1a75ee749264ccbcfc4dfbf5442e55dcb8">Socket::close</link>(){
<anchor xml:id="_Socket_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;<link linkend="_classSocket_1a75ee749264ccbcfc4dfbf5442e55dcb8">::close</link>(<link linkend="_classSocket_1a231ddf6e338a86640e26808b83efeaa1">sock</link>);
<anchor xml:id="_Socket_8cpp_source_1l00281"/>00281 }
<anchor xml:id="_Socket_8cpp_source_1l00282"/>00282 
<anchor xml:id="_Socket_8cpp_source_1l00283"/><link linkend="_classSocket_1a8078f3895616b76dae6367e765bc5744">00283</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSocket_1a8078f3895616b76dae6367e765bc5744">Socket::select</link>(vector&lt;Socket&gt;&#32;*reads,&#32;vector&lt;Socket&gt;&#32;*writes,&#32;vector&lt;Socket&gt;&#32;*exceptions,<emphasis role="keywordtype">int</emphasis>&#32;seconds){
<anchor xml:id="_Socket_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;reads-&gt;at(0).sock;
<anchor xml:id="_Socket_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timeval&#32;tv;
<anchor xml:id="_Socket_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;fd_set&#32;readfds;
<anchor xml:id="_Socket_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;fd_set&#32;writefds;
<anchor xml:id="_Socket_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;fd_set&#32;exceptfds;
<anchor xml:id="_Socket_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;tv.tv_sec&#32;=&#32;seconds;
<anchor xml:id="_Socket_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;tv.tv_usec&#32;=&#32;0;
<anchor xml:id="_Socket_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;FD_ZERO(&amp;readfds);
<anchor xml:id="_Socket_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;FD_ZERO(&amp;writefds);
<anchor xml:id="_Socket_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;FD_ZERO(&amp;exceptfds);
<anchor xml:id="_Socket_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxSock&#32;=&#32;0;
<anchor xml:id="_Socket_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(reads&#32;!=&#32;NULL){
<anchor xml:id="_Socket_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;reads-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sockInt&#32;=&#32;reads-&gt;at(i).sock;
<anchor xml:id="_Socket_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sockInt&#32;&gt;&#32;maxSock)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxSock&#32;=&#32;sockInt;
<anchor xml:id="_Socket_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_SET(sockInt,&#32;&amp;readfds);
<anchor xml:id="_Socket_8cpp_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(writes&#32;!=&#32;NULL){
<anchor xml:id="_Socket_8cpp_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;writes-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sockInt&#32;=&#32;writes-&gt;at(i).sock;
<anchor xml:id="_Socket_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sockInt&#32;&gt;&#32;maxSock)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxSock&#32;=&#32;sockInt;
<anchor xml:id="_Socket_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_SET(sockInt,&#32;&amp;writefds);
<anchor xml:id="_Socket_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(exceptions&#32;!=&#32;NULL){
<anchor xml:id="_Socket_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;exceptions-&gt;size();&#32;i++)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sockInt&#32;=&#32;exceptions-&gt;at(i).sock;
<anchor xml:id="_Socket_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sockInt&#32;&gt;&#32;maxSock)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxSock&#32;=&#32;sockInt;
<anchor xml:id="_Socket_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_SET(sockInt,&#32;&amp;exceptfds);
<anchor xml:id="_Socket_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Um&#32;writefds&#32;und&#32;exceptfds&#32;kÃ¼mmern&#32;wir&#32;uns&#32;nicht:</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;result&#32;=&#32;<link linkend="_classSocket_1a8078f3895616b76dae6367e765bc5744">::select</link>(maxSock+1,&#32;&amp;readfds,&#32;&amp;writefds,&#32;&amp;exceptfds,&#32;&amp;tv);
<anchor xml:id="_Socket_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;
<anchor xml:id="_Socket_8cpp_source_1l00332"/>00332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//exit(1);</emphasis>
<anchor xml:id="_Socket_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;select&#32;error:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;gai_strerror(errno)&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reads&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>)reads-&gt;size()-1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FD_ISSET(reads-&gt;at(i).sock,&#32;&amp;readfds))&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reads-&gt;erase(reads-&gt;begin()+i);
<anchor xml:id="_Socket_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(writes&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>)writes-&gt;size()-1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FD_ISSET(writes-&gt;at(i).sock,&#32;&amp;writefds))&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writes-&gt;erase(reads-&gt;begin()+i);
<anchor xml:id="_Socket_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exceptions&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;(<emphasis role="keywordtype">int</emphasis>)exceptions-&gt;size()-1;&#32;i&#32;&gt;=&#32;0;&#32;i--)&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!FD_ISSET(exceptions-&gt;at(i).sock,&#32;&amp;exceptfds))&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exceptions-&gt;erase(exceptions-&gt;begin()+i);
<anchor xml:id="_Socket_8cpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;result;
<anchor xml:id="_Socket_8cpp_source_1l00358"/>00358 }
<anchor xml:id="_Socket_8cpp_source_1l00359"/>00359 
<anchor xml:id="_Socket_8cpp_source_1l00360"/><link linkend="_classSocket_1a49b6d9bbc776522388ce7c13d3a0ac57">00360</link> <emphasis role="keywordtype">string</emphasis>&#32;<link linkend="_classSocket_1a49b6d9bbc776522388ce7c13d3a0ac57">Socket::ipFromHostName</link>(<emphasis role="keywordtype">string</emphasis>&#32;hostname){
<anchor xml:id="_Socket_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;hostent&#32;*&#32;record&#32;=&#32;gethostbyname(hostname.c_str());
<anchor xml:id="_Socket_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(record&#32;==&#32;NULL)
<anchor xml:id="_Socket_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;{
<anchor xml:id="_Socket_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Is&#32;unavailable:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;hostname&#32;&lt;&lt;&#32;endl;
<anchor xml:id="_Socket_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit(1);
<anchor xml:id="_Socket_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;}
<anchor xml:id="_Socket_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;in_addr&#32;*&#32;<link linkend="_classSocket_1a2708e6a0b9b2b4c2c547757c86848cf4">address</link>&#32;=&#32;(in_addr&#32;*&#32;)record-&gt;h_addr;
<anchor xml:id="_Socket_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;ip_address&#32;=&#32;inet_ntoa(*&#32;<link linkend="_classSocket_1a2708e6a0b9b2b4c2c547757c86848cf4">address</link>);
<anchor xml:id="_Socket_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ip_address;
<anchor xml:id="_Socket_8cpp_source_1l00370"/>00370 }
</programlisting></section>
